use std::collections::hash_map::Entry;
use std::collections::HashMap;
use std::sync::{Arc, RwLock};
use crate::utils::TeXStr;

pub enum FontTableParam {
    Text,Math,SansSerif,Italic,Bold,Script,Capital,Monospaced,Blackboard,Fraktur,CapitalLetters
}

pub struct FontTable {
    pub params:Vec<FontTableParam>,
    table:&'static HashMap<u8,&'static str>
}
impl FontTable {
    pub fn as_unicode(&self,u:u8) -> &str {
        todo!()
    }
    pub fn get_char(&self,u:u8) -> &str {
        match self.table.get(&u) {
            Some(c) => c,
            None => "???"
        }
    }
}

pub struct FontTableStore {
    map : RwLock<HashMap<TeXStr,Arc<FontTable>>>
}
impl FontTableStore {
    pub fn get(&self, name:TeXStr) -> Option<Arc<FontTable>> {
        match self.map.write().unwrap().entry(name.clone()) {
            Entry::Occupied(o) => Some(o.get().clone()),
            Entry::Vacant(o) => match &name.to_string() {
                s if s == "cmr" => Some(o.insert(Arc::new(FontTable {
                    params:vec!(FontTableParam::Text),
                    table:&STANDARD_TEXT_CM
                })).clone()),
                _ => None
            }
        }
    }
    pub(in crate::fonts::fontchars) fn new() -> FontTableStore { FontTableStore {map:RwLock::new(HashMap::new())}}
}

lazy_static! {
    pub static ref FONT_TABLES : FontTableStore = FontTableStore::new();
    pub static ref STANDARD_TEXT_CM : HashMap<u8,&'static str> = HashMap::from([
        (0,"Γ"),(1,"∆"),(2,"Θ"),(3,"Λ"),(4,"Ξ"),(5,"Π"),(6,"Σ"),(7,"Υ"),(8,"Φ"),(9,"Ψ"),(10,"Ω"),
        (11,"ff"),(12,"fi"),(13,"fl"),(14,"ffi"),(15,"ffl"),(16,"ı"),(17,"ȷ"),(18,"`"),(19," ́"),
        (20,"ˇ"),(21," ̆"),(22," ̄"),(23," ̊"),(24," ̧"),(25,"ß"),(26,"æ"),(27,"œ"),(28,"ø"),(29,"Æ"),
        (30,"Œ"),(31,"Ø"),(32," "),(33,"!"),(34,"”"),(35,"#"),(36,"$"),(37,"%"),(38,"&"),(39,"’"),
        (40,"("),(41,")"),(42,"*"),(43,"+"),(44,","),(45,"-"),(46,"."),(47,"/"),(48,"0"),(49,"1"),
        (50,"2"),(51,"3"),(52,"4"),(53,"5"),(54,"6"),(55,"7"),(56,"8"),(57,"9"),(58,":"),(59,";"),
        (60,"¡"),(61,"="),(62,"¿"),(63,"?"),(64,"@"),(65,"A"),(66,"B"),(67,"C"),(68,"D"),(69,"E"),
        (70,"F"),(71,"G"),(72,"H"),(73,"I"),(74,"J"),(75,"K"),(76,"L"),(77,"M"),(78,"N"),(79,"O"),
        (80,"P"),(81,"Q"),(82,"R"),(83,"S"),(84,"T"),(85,"U"),(86,"V"),(87,"W"),(88,"X"),(89,"Y"),
        (90,"Z"),(91,"["),(92,"“"),(93,"]"),(94,"^"),(95," ̇"),(96,"‘"),(97,"a"),(98,"b"),(99,"c"),
        (100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),
        (109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),
        (118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"–"),(124,"—"),(125," ̋"),(126," ̃"),
        (127," ̈")
    ]);
    pub static ref STANDARD_TEXT_EC : HashMap<u8,&'static str> = HashMap::from([
        (0,"`"),(1," ́"),(2,"^"),(3," ̃"),(4," ̈"),(5," ̋"),(6," ̊"),(7,"ˇ"),(8," ̆"),(9," ̄"),(10," ̇"),
        (11," ̧"),(12," ̨"),(13,","),(14,"‹"),(15,"›"),(16,"“"),(17,"”"),(18,"„"),(19,"«"),(20,"»"),
        (21,"-"),(22,"―"),(23,""),(24,"。"),(25,"ı"),(26,"ȷ"),(27,"ff"),(28,"fi"),(29,"fl"),(30,"ffi"),
        (31,"ffl"),(32,"␣"),(33,"!"),(34,"\""),(35,"#"),(36,"$"),(37,"%"),(38,"&"),(39,"’"),(40,"("),
        (41,")"),(42,"*"),(43,"+"),(44,","),(45,"-"),(46,"."),(47,"/"),(48,"0"),(49,"1"),
        (50,"2"),(51,"3"),(52,"4"),(53,"5"),(54,"6"),(55,"7"),(56,"8"),(57,"9"),(58,":"),(59,";"),
        (60,"¡"),(61,"="),(62,"¿"),(63,"?"),(64,"@"),(65,"A"),(66,"B"),(67,"C"),(68,"D"),(69,"E"),
        (70,"F"),(71,"G"),(72,"H"),(73,"I"),(74,"J"),(75,"K"),(76,"L"),(77,"M"),(78,"N"),(79,"O"),
        (80,"P"),(81,"Q"),(82,"R"),(83,"S"),(84,"T"),(85,"U"),(86,"V"),(87,"W"),(88,"X"),(89,"Y"),
        (90,"Z"),(91,"["),(92,"“"),(93,"]"),(94,"^"),(95," ̇"),(96,"‘"),(97,"a"),(98,"b"),(99,"c"),
        (100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),
        (109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),
        (118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(124,"|"),
        (126," ̃"),(127,"-"),(128,"Ă"),(129,"A̧"),(130,"Ć"),(131,"Č"),(132,"Ď"),(133,"Ě"),(134,"Ȩ"),
        (135,"Ğ"),(136,"Ĺ"),(137,"L̛"),(138,"Ł"),(139,"Ń"),(140,"Ň"),
        (142,"Ő"),(143,"Ŕ"),(144,"Ř"),(145,"Ś"),(146,"Š"),(147,"Ş"),(148,"Ť"),(149,"Ţ"),(150,"Ű"),
        (151,"Ů"),(152,"Ÿ"),(153,"Ź"),(154,"Ž"),(155,"Ż"),(156,"IJ"),(157,"İ"),(158,"đ"),(159,"§"),
        (160,"ă"),(161,"a̧"),(162,"ć"),(163,"č"),(164,"d̛"),(165,"ĕ"),(166,"ȩ"),(167,"ğ"),(168,"ĺ"),
        (169,"l̛"),(170,"ł"),(171,"ń"),(172,"ň"),
        (174,"ő"),(175,"ŕ"),(176,"ř"),(177,"ś"),(178,"š"),(179,"ş"),(180,"t̛"),(181,"ţ"),(182,"ű"),
        (183,"ů"),(184,"ÿ"),(185,"ź"),(186,"ž"),(187,"ż"),(188,"ij"),(189,"¡"),(190,"¿"),(191,"£"),
        (192,"À"),(193,"Á"),(194,"Â"),(195,"Ã"),(196,"Ä"),(197,"Å"),(198,"Æ"),(199,"Ç"),(200,"È"),
        (201,"É"),(202,"Ê"),(203,"Ë"),(204,"Ì"),(205,"Í"),(206,"Î"),(207,"Ï"),(208,"Ð"),(209,"Ñ"),
        (210,"Ò"),(211,"Ó"),(212,"Ô"),(213,"Õ"),(214,"Ö"),(215,"Œ"),(216,"Ø"),(217,"Ù"),(218,"Ú"),
        (219,"Û"),(220,"Ü"),(221,"Ý"),(222,"Þ"),(223,"SS"),(224,"à"),(225,"á"),(226,"â"),(227,"ã"),
        (228,"ä"),(229,"å"),(230,"æ"),(231,"ç"),(232,"è"),(233,"é"),(234,"ê"),(235,"ë"),(236,"ì"),
        (237,"í"),(238,"î"),(239,"ï"),(240,"ð"),(241,"ñ"),(242,"ò"),(243,"ó"),(244,"ô"),(245,"õ"),
        (246,"ö"),(247,"œ"),(248,"ø"),(249,"ù"),(250,"ú"),(251,"û"),(252,"ü"),(253,"ý"),(254,"þ"),
        (255,"ß")
    ]);


    pub static ref SCRIPT : HashMap<char,char> = HashMap::from([
        ('A','𝓐'),('B','𝓑'),('C','𝓒'),('D','𝓓'),('E','𝓔'),('F','𝓕'),('G','𝓖'),('H','𝓗'),('I','𝓘'),
        ('J','𝓙'),('K','𝓚'),('L','𝓛'),('M','𝓜'),('N','𝓝'),('O','𝓞'),('P','𝓟'),('Q','𝓠'),('R','𝓡'),
        ('S','𝓢'),('T','𝓣'),('U','𝓤'),('V','𝓥'),('W','𝓦'),('X','𝓧'),('Y','𝓨'),('Z','𝓩')
    ]);
    pub static ref BOLD : HashMap<char,char> = HashMap::from([
        ('Γ','𝚪'),('∆','𝚫'),('Θ','𝚯'),('Λ','𝚲'),('Ξ','𝚵'),('Π','𝚷'),('Σ','𝚺'),('Υ','𝚼'),('Φ','𝚽'),
        ('Ψ','𝚿'),('Ω','𝛀'),
        ('α','𝛂'),('β','𝛃'),('γ','𝛄'),('δ','𝛅'),('ε','𝛆'),('ζ','𝛇'),('η','𝛈'),('θ','𝛉'),('ι','𝛊'),
        ('κ','𝛋'),('λ','𝛌'),('μ','𝛍'),('ν','𝛎'),('ξ','𝛏'),('ο','𝛐'),('π','𝛑'),('ρ','𝛒'),('σ','𝛔'),
        ('τ','𝛕'),('υ','𝛖'),('φ','𝛗'),('χ','𝛘'),('ψ','𝛙'),('ω','𝛚'),

        ('0','𝟎'),('1','𝟏'),('2','𝟐'),('3','𝟑'),('4','𝟒'),('5','𝟓'),('6','𝟔'),('7','𝟕'),('8','𝟖'),
        ('9','𝟗'),
        ('A','𝐀'),('B','𝐁'),('C','𝐂'),('D','𝐃'),('E','𝐄'),('F','𝐅'),('G','𝐆'),('H','𝐇'),('I','𝐈'),
        ('J','𝐉'),('K','𝐊'),('L','𝐋'),('M','𝐌'),('N','𝐍'),('O','𝐎'),('P','𝐏'),('Q','𝐐'),('R','𝐑'),
        ('S','𝐒'),('T','𝐓'),('U','𝐔'),('V','𝐕'),('W','𝐖'),('X','𝐗'),('Y','𝐘'),('Z','𝐙'),
        ('a','𝐚'),('b','𝐛'),('c','𝐜'),('d','𝐝'),('e','𝐞'),('f','𝐟'),('g','𝐠'),('h','𝐡'),('i','𝐢'),
        ('j','𝐣'),('k','𝐤'),('l','𝐥'),('m','𝐦'),('n','𝐧'),('o','𝐨'),('p','𝐩'),('q','𝐪'),('r','𝐫'),
        ('s','𝐬'),('t','𝐭'),('u','𝐮'),('v','𝐯'),('w','𝐰'),('x','𝐱'),('y','𝐲'),('z','𝐳')
    ]);
    pub static ref BOLD_ITALIC : HashMap<char,char> = HashMap::from([
        ('Γ','𝜞'),('∆','𝜟'),('Θ','𝜣'),('Λ','𝜦'),('Ξ','𝜩'),('Π','𝜫'),('Σ','𝜮'),('Υ','𝜰'),('Φ','𝜱'),
        ('Ψ','𝜳'),('Ω','𝜴'),
        ('α','𝜶'),('β','𝜷'),('γ','𝜸'),('δ','𝜹'),('ε','𝜺'),('ζ','𝜻'),('η','𝜼'),('θ','𝜽'),('ι','𝜾'),
        ('κ','𝜿'),('λ','𝝀'),('μ','𝝁'),('ν','𝝂'),('ξ','𝝃'),('ο','𝝄'),('π','𝝅'),('ρ','𝝆'),('σ','𝝈'),
        ('τ','𝝉'),('υ','𝝊'),('φ','𝝋'),('χ','𝝌'),('ψ','𝝍'),('ω','𝝎'),

        ('0','𝟎'),('1','𝟏'),('2','𝟐'),('3','𝟑'),('4','𝟒'),('5','𝟓'),('6','𝟔'),('7','𝟕'),('8','𝟖'),
        ('9','𝟗'),
        ('A','𝑨'),('B','𝑩'),('C','𝑪'),('D','𝑫'),('E','𝑬'),('F','𝑭'),('G','𝑮'),('H','𝑯'),('I','𝑰'),
        ('J','𝑱'),('K','𝑲'),('L','𝑳'),('M','𝑴'),('N','𝑵'),('O','𝑶'),('P','𝑷'),('Q','𝑸'),('R','𝑹'),
        ('S','𝑺'),('T','𝑻'),('U','𝑼'),('V','𝑽'),('W','𝑾'),('X','𝑿'),('Y','𝒀'),('Z','𝒁'),
        ('a','𝒂'),('b','𝒃'),('c','𝒄'),('d','𝒅'),('e','𝒆'),('f','𝒇'),('g','𝒈'),('h','𝒉'),('i','𝒊'),
        ('j','𝒋'),('k','𝒌'),('l','𝒍'),('m','𝒎'),('n','𝒏'),('o','𝒐'),('p','𝒑'),('q','𝒒'),('r','𝒓'),
        ('s','𝒔'),('t','𝒕'),('u','𝒖'),('v','𝒗'),('w','𝒘'),('x','𝒙'),('y','𝒚'),('z','𝒛')
    ]);
    pub static ref CAPITAL : HashMap<char,char> = HashMap::from([
        ('A','𝖠'),('B','𝖡'),('C','𝖢'),('D','𝖣'),('E','𝖤'),('F','𝖥'),('G','𝖦'),('H','𝖧'),('I','𝖨'),
        ('J','𝖩'),('K','𝖪'),('L','𝖫'),('M','𝖬'),('N','𝖭'),('O','𝖮'),('P','𝖯'),('Q','𝖰'),('R','𝖱'),
        ('S','𝖲'),('T','𝖳'),('U','𝖴'),('V','𝖵'),('W','𝖶'),('X','𝖷'),('Y','𝖸'),('Z','𝖹'),
        ('a','ᴀ'),('b','ʙ'),('c','ᴄ'),('d','ᴅ'),('e','ᴇ'),('f','ꜰ'),('g','ɢ'),('h','ʜ'),('i','ɪ'),
        ('j','ᴊ'),('k','ᴋ'),('l','ʟ'),('m','ᴍ'),('n','ɴ'),('o','ᴏ'),('p','ᴘ'),('q','Q'),('r','ʀ'),
        ('s','ꜱ'),('t','ᴛ'),('u','ᴜ'),('v','ᴠ'),('w','ᴡ'),('x','𝗑'),('y','ʏ'),('z','ᴢ')
    ]);

    // Italic 𝛢 𝛣 𝛤 𝛥 𝛦 𝛧 𝛨 𝛩 𝛪 𝛫 𝛬 𝛭 𝛮 𝛯 𝛰 𝛱 𝛲 𝛴 𝛵 𝛶 𝛷 𝛸 𝛹 𝛺 𝛼 𝛽 𝛾 𝛿 𝜀 𝜁 𝜂 𝜃 𝜄 𝜅 𝜆 𝜇 𝜈 𝜉 𝜊 𝜋 𝜌 𝜎 𝜏 𝜐 𝜑 𝜒 𝜓 𝜔
    // Sans-Serif Bold 𝝖 𝝗 𝝘 𝝙 𝝚 𝝛 𝝜 𝝝 𝝞 𝝟 𝝠 𝝡 𝝢 𝝣 𝝤 𝝥 𝝦 𝝨 𝝩 𝝪 𝝫 𝝬 𝝭 𝝮 𝝰 𝝱 𝝲 𝝳 𝝴 𝝵 𝝶 𝝷 𝝸 𝝹 𝝺 𝝻 𝝼 𝝽 𝝾 𝝿 𝞀 𝞂 𝞃 𝞄 𝞅 𝞆 𝞇 𝞈
    // Sans-Serif Bold Italic 𝞐 𝞑 𝞒 𝞓 𝞔 𝞕 𝞖 𝞗 𝞘 𝞙 𝞚 𝞛 𝞜 𝞝 𝞞 𝞟 𝞠 𝞢 𝞣 𝞤 𝞥 𝞦 𝞧 𝞨 𝞪 𝞫 𝞬 𝞭 𝞮 𝞯 𝞰 𝞱 𝞲 𝞳 𝞴 𝞵 𝞶 𝞷 𝞸 𝞹 𝞺 𝞼 𝞽 𝞾 𝞿 𝟀 𝟁 𝟂
}