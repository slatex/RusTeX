/* automatically generated by rust-bindgen 0.59.2 */

pub const DEV_NULL: &[u8; 10usize] = b"/dev/null\0";
pub const KPSEVERSION: &[u8; 23usize] = b"kpathsea version 6.3.2\0";
pub const HAVE_ASSERT_H: u32 = 1;
pub const HAVE_DECL_ISASCII: u32 = 1;
pub const HAVE_DECL_PUTENV: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_FLOAT_H: u32 = 1;
pub const HAVE_FSEEKO: u32 = 1;
pub const HAVE_GETCWD: u32 = 1;
pub const HAVE_GETWD: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_LIMITS_H: u32 = 1;
pub const HAVE_MEMCMP: u32 = 1;
pub const HAVE_MEMCPY: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MKSTEMP: u32 = 1;
pub const HAVE_MKTEMP: u32 = 1;
pub const HAVE_PUTENV: u32 = 1;
pub const HAVE_PWD_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRCHR: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRRCHR: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_MTIM: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const LT_OBJDIR: &[u8; 7usize] = b".libs/\0";
pub const MAKE_OMEGA_OCP_BY_DEFAULT: u32 = 1;
pub const MAKE_OMEGA_OFM_BY_DEFAULT: u32 = 1;
pub const MAKE_TEX_FMT_BY_DEFAULT: u32 = 1;
pub const MAKE_TEX_MF_BY_DEFAULT: u32 = 1;
pub const MAKE_TEX_PK_BY_DEFAULT: u32 = 1;
pub const MAKE_TEX_TEX_BY_DEFAULT: u32 = 0;
pub const MAKE_TEX_TFM_BY_DEFAULT: u32 = 1;
pub const KPSE_PACKAGE: &[u8; 9usize] = b"kpathsea\0";
pub const KPSE_PACKAGE_BUGREPORT: &[u8; 14usize] = b"tex-k@tug.org\0";
pub const KPSE_PACKAGE_NAME: &[u8; 9usize] = b"Kpathsea\0";
pub const KPSE_PACKAGE_STRING: &[u8; 15usize] = b"Kpathsea 6.3.2\0";
pub const KPSE_PACKAGE_TARNAME: &[u8; 9usize] = b"kpathsea\0";
pub const KPSE_PACKAGE_URL: &[u8; 1usize] = b"\0";
pub const KPSE_PACKAGE_VERSION: &[u8; 6usize] = b"6.3.2\0";
pub const SIZEOF_LONG: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const KPSE_VERSION: &[u8; 6usize] = b"6.3.2\0";
pub const _DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const KPATHSEA: u32 = 34;
pub const _MATH_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _ASSERT_H: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const KPSE_COMPAT_API: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2usize] = b"l\0";
pub const PRId8: &[u8; 2usize] = b"d\0";
pub const PRId16: &[u8; 2usize] = b"d\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &[u8; 2usize] = b"d\0";
pub const PRIdFAST16: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &[u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &[u8; 3usize] = b"ld\0";
pub const PRIi8: &[u8; 2usize] = b"i\0";
pub const PRIi16: &[u8; 2usize] = b"i\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 3usize] = b"li\0";
pub const PRIiFAST8: &[u8; 2usize] = b"i\0";
pub const PRIiFAST16: &[u8; 3usize] = b"li\0";
pub const PRIiFAST32: &[u8; 3usize] = b"li\0";
pub const PRIiFAST64: &[u8; 3usize] = b"li\0";
pub const PRIo8: &[u8; 2usize] = b"o\0";
pub const PRIo16: &[u8; 2usize] = b"o\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &[u8; 2usize] = b"o\0";
pub const PRIoFAST16: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &[u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &[u8; 3usize] = b"lo\0";
pub const PRIu8: &[u8; 2usize] = b"u\0";
pub const PRIu16: &[u8; 2usize] = b"u\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &[u8; 2usize] = b"u\0";
pub const PRIuFAST16: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &[u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &[u8; 3usize] = b"lu\0";
pub const PRIx8: &[u8; 2usize] = b"x\0";
pub const PRIx16: &[u8; 2usize] = b"x\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &[u8; 2usize] = b"x\0";
pub const PRIxFAST16: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &[u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &[u8; 3usize] = b"lx\0";
pub const PRIX8: &[u8; 2usize] = b"X\0";
pub const PRIX16: &[u8; 2usize] = b"X\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &[u8; 2usize] = b"X\0";
pub const PRIXFAST16: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &[u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"ld\0";
pub const PRIiMAX: &[u8; 3usize] = b"li\0";
pub const PRIoMAX: &[u8; 3usize] = b"lo\0";
pub const PRIuMAX: &[u8; 3usize] = b"lu\0";
pub const PRIxMAX: &[u8; 3usize] = b"lx\0";
pub const PRIXMAX: &[u8; 3usize] = b"lX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &[u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &[u8; 3usize] = b"ld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 3usize] = b"li\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3usize] = b"li\0";
pub const SCNiFAST32: &[u8; 3usize] = b"li\0";
pub const SCNiFAST64: &[u8; 3usize] = b"li\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &[u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &[u8; 3usize] = b"lu\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &[u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &[u8; 3usize] = b"lo\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &[u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"ld\0";
pub const SCNiMAX: &[u8; 3usize] = b"li\0";
pub const SCNoMAX: &[u8; 3usize] = b"lo\0";
pub const SCNuMAX: &[u8; 3usize] = b"lu\0";
pub const SCNxMAX: &[u8; 3usize] = b"lx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const KPATHSEA_CAN_FREE: u32 = 0;
pub const KPSE_DEBUG_STAT: u32 = 0;
pub const KPSE_DEBUG_HASH: u32 = 1;
pub const KPSE_DEBUG_FOPEN: u32 = 2;
pub const KPSE_DEBUG_PATHS: u32 = 3;
pub const KPSE_DEBUG_EXPAND: u32 = 4;
pub const KPSE_DEBUG_SEARCH: u32 = 5;
pub const KPSE_DEBUG_VARS: u32 = 6;
pub const KPSE_LAST_DEBUG: u32 = 6;
pub const MAX_INT_LENGTH: u32 = 21;
pub const DEFAULT_TEXMFROOT: &[u8; 16usize] = b"$SELFAUTOPARENT\0";
pub const DEFAULT_TEXMFDIST: &[u8; 30usize] = b"/usr/share/texlive/texmf-dist\0";
pub const DEFAULT_TEXMFMAIN: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFDEBIAN: &[u8; 17usize] = b"/usr/share/texmf\0";
pub const DEFAULT_TEXMFLOCAL: &[u8; 23usize] = b"/usr/local/share/texmf\0";
pub const DEFAULT_TEXMFSYSVAR: &[u8; 15usize] = b"/var/lib/texmf\0";
pub const DEFAULT_TEXMFSYSCONFIG: &[u8; 11usize] = b"/etc/texmf\0";
pub const DEFAULT_TEXMFHOME: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFVAR: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFCONFIG: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFAUXTREES: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMF: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFDBS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_SYSTEXMF: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFCACHE: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_VARTEXFONTS: &[u8; 17usize] = b"/var/cache/fonts\0";
pub const DEFAULT_WEB2C: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFDOTDIR: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TTF2TFMINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MFINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MPINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXFORMATS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MFBASES: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MPMEMS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXPOOL: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MFPOOL: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MPPOOL: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_VFFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TFMFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_PKFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_GFFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_GLYPHFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MISCFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXFONTMAPS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_BIBINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_BSTINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MLBIBINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MLBSTINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_RISINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_BLTXMLINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MFTINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXPSHEADERS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OSFONTDIR: &[u8; 41usize] = b"/please/set/osfontdir/in/the/environment\0";
pub const DEFAULT_T1FONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_AFMFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TTFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OPENTYPEFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_T42FONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_LIGFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXCONFIG: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_INDEXSTYLE: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_INDEXDICTIONARY: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_ENCFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_CMAPFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_SFDFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_FONTFEATURES: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_FONTCIDMAPS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_PDFTEXCONFIG: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TRFONTS: &[u8; 57usize] =
    b"/usr{/local,}/share/groff/{current/font,site-font}/devps\0";
pub const DEFAULT_MPSUPPORT: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MIMELIBDIR: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MAILCAPLIBDIR: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_FONTCONFIG_FILE: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_FONTCONFIG_PATH: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_FC_CACHEDIR: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXDOCS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXSOURCES: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFLOCALEDIR: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_WEBINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_CWEBINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OFMFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OPLFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OVFFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OVPFONTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OTPINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_OCPINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_T4HTINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEX4HTFONTSET: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEX4HTINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TW_LIBPATH: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TW_INIPATH: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_DVIPDFMXINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_LUAINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_CLUAINPUTS: &[u8; 57usize] =
    b"$TEXMFDOTDIR:$SELFAUTOLOC/lib/{$progname,$engine,}/lua//\0";
pub const DEFAULT_TEXMFSCRIPTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_JAVAINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_PERLINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_PYTHONINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_RUBYINPUTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEXMFCNF : & [u8 ; 141usize] = b"{/etc/texmf/web2c,/usr/local/share/texmf/web2c,/usr/share/texmf/web2c,/usr/share/texlive/texmf-dist/web2c,$SELFAUTOPARENT/share/texmf/web2c}\0" ;
pub const DEFAULT_TEXMF_RESTRICTED_SCRIPTS: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_MISSFONT_LOG: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEX_HUSH: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_TEX: &[u8; 10usize] = b"/nonesuch\0";
pub const DEFAULT_BIBTEX_CSFILE: &[u8; 10usize] = b"/nonesuch\0";
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const MAXNAMLEN: u32 = 255;
pub const FOPEN_A_MODE: &[u8; 3usize] = b"ab\0";
pub const FOPEN_R_MODE: &[u8; 2usize] = b"r\0";
pub const FOPEN_W_MODE: &[u8; 3usize] = b"wb\0";
pub const FOPEN_RBIN_MODE: &[u8; 3usize] = b"rb\0";
pub const FOPEN_WBIN_MODE: &[u8; 3usize] = b"wb\0";
pub const FOPEN_ABIN_MODE: &[u8; 3usize] = b"ab\0";
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const O_BINARY: u32 = 0;
pub const _CTYPE_H: u32 = 1;
pub const DIR_SEP: u8 = 47u8;
pub const DIR_SEP_STRING: &[u8; 2usize] = b"/\0";
pub const ENV_SEP: u8 = 58u8;
pub const ENV_SEP_STRING: &[u8; 2usize] = b":\0";
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _GETOPT_H: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
/*pub const FP_NAN: ::std::os::raw::c_uint = 0;
pub const FP_INFINITE: ::std::os::raw::c_uint = 1;
pub const FP_ZERO: ::std::os::raw::c_uint = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 3;
pub const FP_NORMAL: ::std::os::raw::c_uint = 4;*/
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub const _SC_MINSIGSTKSZ: ::std::os::raw::c_uint = 249;
pub const _SC_SIGSTKSZ: ::std::os::raw::c_uint = 250;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type boolean = ::std::os::raw::c_int;
pub type string = *mut ::std::os::raw::c_char;
pub type const_string = *const ::std::os::raw::c_char;
pub type address = *mut ::std::os::raw::c_void;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type p_record_input = ::std::option::Option<unsafe extern "C" fn(arg1: const_string)>;
pub type p_record_output = ::std::option::Option<unsafe extern "C" fn(arg1: const_string)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct str_llist_elt {
    pub str_: string,
    pub moved: boolean,
    pub next: *mut str_llist_elt,
}
#[test]
fn bindgen_test_layout_str_llist_elt() {
    assert_eq!(
        ::std::mem::size_of::<str_llist_elt>(),
        24usize,
        concat!("Size of: ", stringify!(str_llist_elt))
    );
    assert_eq!(
        ::std::mem::align_of::<str_llist_elt>(),
        8usize,
        concat!("Alignment of ", stringify!(str_llist_elt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_llist_elt>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(str_llist_elt),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_llist_elt>())).moved as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(str_llist_elt),
            "::",
            stringify!(moved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_llist_elt>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(str_llist_elt),
            "::",
            stringify!(next)
        )
    );
}
pub type str_llist_elt_type = str_llist_elt;
pub type str_llist_type = *mut str_llist_elt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_entry {
    pub key: const_string,
    pub value: *mut str_llist_type,
}
#[test]
fn bindgen_test_layout_cache_entry() {
    assert_eq!(
        ::std::mem::size_of::<cache_entry>(),
        16usize,
        concat!("Size of: ", stringify!(cache_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(cache_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cache_entry>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_entry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cache_entry>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cache_entry),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct expansion_type {
    pub var: const_string,
    pub expanding: boolean,
}
#[test]
fn bindgen_test_layout_expansion_type() {
    assert_eq!(
        ::std::mem::size_of::<expansion_type>(),
        16usize,
        concat!("Size of: ", stringify!(expansion_type))
    );
    assert_eq!(
        ::std::mem::align_of::<expansion_type>(),
        8usize,
        concat!("Alignment of ", stringify!(expansion_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expansion_type>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(expansion_type),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expansion_type>())).expanding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(expansion_type),
            "::",
            stringify!(expanding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_element_struct {
    pub key: const_string,
    pub value: const_string,
    pub next: *mut hash_element_struct,
}
#[test]
fn bindgen_test_layout_hash_element_struct() {
    assert_eq!(
        ::std::mem::size_of::<hash_element_struct>(),
        24usize,
        concat!("Size of: ", stringify!(hash_element_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<hash_element_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(hash_element_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hash_element_struct>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_element_struct),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hash_element_struct>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_element_struct),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hash_element_struct>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_element_struct),
            "::",
            stringify!(next)
        )
    );
}
pub type hash_element_type = hash_element_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_table_type {
    pub buckets: *mut *mut hash_element_type,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_hash_table_type() {
    assert_eq!(
        ::std::mem::size_of::<hash_table_type>(),
        16usize,
        concat!("Size of: ", stringify!(hash_table_type))
    );
    assert_eq!(
        ::std::mem::align_of::<hash_table_type>(),
        8usize,
        concat!("Alignment of ", stringify!(hash_table_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hash_table_type>())).buckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_table_type),
            "::",
            stringify!(buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hash_table_type>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_table_type),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct str_list_type {
    pub length: ::std::os::raw::c_uint,
    pub list: *mut string,
}
#[test]
fn bindgen_test_layout_str_list_type() {
    assert_eq!(
        ::std::mem::size_of::<str_list_type>(),
        16usize,
        concat!("Size of: ", stringify!(str_list_type))
    );
    assert_eq!(
        ::std::mem::align_of::<str_list_type>(),
        8usize,
        concat!("Alignment of ", stringify!(str_list_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_list_type>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(str_list_type),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_list_type>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(str_list_type),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cstr_list_type {
    pub length: ::std::os::raw::c_uint,
    pub list: *mut const_string,
}
#[test]
fn bindgen_test_layout_cstr_list_type() {
    assert_eq!(
        ::std::mem::size_of::<cstr_list_type>(),
        16usize,
        concat!("Size of: ", stringify!(cstr_list_type))
    );
    assert_eq!(
        ::std::mem::align_of::<cstr_list_type>(),
        8usize,
        concat!("Alignment of ", stringify!(cstr_list_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cstr_list_type>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cstr_list_type),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cstr_list_type>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cstr_list_type),
            "::",
            stringify!(list)
        )
    );
}
pub const kpse_file_format_type_kpse_gf_format: kpse_file_format_type = 0;
pub const kpse_file_format_type_kpse_pk_format: kpse_file_format_type = 1;
pub const kpse_file_format_type_kpse_any_glyph_format: kpse_file_format_type = 2;
pub const kpse_file_format_type_kpse_tfm_format: kpse_file_format_type = 3;
pub const kpse_file_format_type_kpse_afm_format: kpse_file_format_type = 4;
pub const kpse_file_format_type_kpse_base_format: kpse_file_format_type = 5;
pub const kpse_file_format_type_kpse_bib_format: kpse_file_format_type = 6;
pub const kpse_file_format_type_kpse_bst_format: kpse_file_format_type = 7;
pub const kpse_file_format_type_kpse_cnf_format: kpse_file_format_type = 8;
pub const kpse_file_format_type_kpse_db_format: kpse_file_format_type = 9;
pub const kpse_file_format_type_kpse_fmt_format: kpse_file_format_type = 10;
pub const kpse_file_format_type_kpse_fontmap_format: kpse_file_format_type = 11;
pub const kpse_file_format_type_kpse_mem_format: kpse_file_format_type = 12;
pub const kpse_file_format_type_kpse_mf_format: kpse_file_format_type = 13;
pub const kpse_file_format_type_kpse_mfpool_format: kpse_file_format_type = 14;
pub const kpse_file_format_type_kpse_mft_format: kpse_file_format_type = 15;
pub const kpse_file_format_type_kpse_mp_format: kpse_file_format_type = 16;
pub const kpse_file_format_type_kpse_mppool_format: kpse_file_format_type = 17;
pub const kpse_file_format_type_kpse_mpsupport_format: kpse_file_format_type = 18;
pub const kpse_file_format_type_kpse_ocp_format: kpse_file_format_type = 19;
pub const kpse_file_format_type_kpse_ofm_format: kpse_file_format_type = 20;
pub const kpse_file_format_type_kpse_opl_format: kpse_file_format_type = 21;
pub const kpse_file_format_type_kpse_otp_format: kpse_file_format_type = 22;
pub const kpse_file_format_type_kpse_ovf_format: kpse_file_format_type = 23;
pub const kpse_file_format_type_kpse_ovp_format: kpse_file_format_type = 24;
pub const kpse_file_format_type_kpse_pict_format: kpse_file_format_type = 25;
pub const kpse_file_format_type_kpse_tex_format: kpse_file_format_type = 26;
pub const kpse_file_format_type_kpse_texdoc_format: kpse_file_format_type = 27;
pub const kpse_file_format_type_kpse_texpool_format: kpse_file_format_type = 28;
pub const kpse_file_format_type_kpse_texsource_format: kpse_file_format_type = 29;
pub const kpse_file_format_type_kpse_tex_ps_header_format: kpse_file_format_type = 30;
pub const kpse_file_format_type_kpse_troff_font_format: kpse_file_format_type = 31;
pub const kpse_file_format_type_kpse_type1_format: kpse_file_format_type = 32;
pub const kpse_file_format_type_kpse_vf_format: kpse_file_format_type = 33;
pub const kpse_file_format_type_kpse_dvips_config_format: kpse_file_format_type = 34;
pub const kpse_file_format_type_kpse_ist_format: kpse_file_format_type = 35;
pub const kpse_file_format_type_kpse_truetype_format: kpse_file_format_type = 36;
pub const kpse_file_format_type_kpse_type42_format: kpse_file_format_type = 37;
pub const kpse_file_format_type_kpse_web2c_format: kpse_file_format_type = 38;
pub const kpse_file_format_type_kpse_program_text_format: kpse_file_format_type = 39;
pub const kpse_file_format_type_kpse_program_binary_format: kpse_file_format_type = 40;
pub const kpse_file_format_type_kpse_miscfonts_format: kpse_file_format_type = 41;
pub const kpse_file_format_type_kpse_web_format: kpse_file_format_type = 42;
pub const kpse_file_format_type_kpse_cweb_format: kpse_file_format_type = 43;
pub const kpse_file_format_type_kpse_enc_format: kpse_file_format_type = 44;
pub const kpse_file_format_type_kpse_cmap_format: kpse_file_format_type = 45;
pub const kpse_file_format_type_kpse_sfd_format: kpse_file_format_type = 46;
pub const kpse_file_format_type_kpse_opentype_format: kpse_file_format_type = 47;
pub const kpse_file_format_type_kpse_pdftex_config_format: kpse_file_format_type = 48;
pub const kpse_file_format_type_kpse_lig_format: kpse_file_format_type = 49;
pub const kpse_file_format_type_kpse_texmfscripts_format: kpse_file_format_type = 50;
pub const kpse_file_format_type_kpse_lua_format: kpse_file_format_type = 51;
pub const kpse_file_format_type_kpse_fea_format: kpse_file_format_type = 52;
pub const kpse_file_format_type_kpse_cid_format: kpse_file_format_type = 53;
pub const kpse_file_format_type_kpse_mlbib_format: kpse_file_format_type = 54;
pub const kpse_file_format_type_kpse_mlbst_format: kpse_file_format_type = 55;
pub const kpse_file_format_type_kpse_clua_format: kpse_file_format_type = 56;
pub const kpse_file_format_type_kpse_ris_format: kpse_file_format_type = 57;
pub const kpse_file_format_type_kpse_bltxml_format: kpse_file_format_type = 58;
pub const kpse_file_format_type_kpse_last_format: kpse_file_format_type = 59;
pub type kpse_file_format_type = ::std::os::raw::c_uint;
pub const kpse_src_type_kpse_src_implicit: kpse_src_type = 0;
pub const kpse_src_type_kpse_src_compile: kpse_src_type = 1;
pub const kpse_src_type_kpse_src_texmf_cnf: kpse_src_type = 2;
pub const kpse_src_type_kpse_src_client_cnf: kpse_src_type = 3;
pub const kpse_src_type_kpse_src_env: kpse_src_type = 4;
pub const kpse_src_type_kpse_src_x: kpse_src_type = 5;
pub const kpse_src_type_kpse_src_cmdline: kpse_src_type = 6;
pub type kpse_src_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kpse_format_info_type {
    pub type_: const_string,
    pub path: string,
    pub raw_path: const_string,
    pub path_source: const_string,
    pub override_path: const_string,
    pub client_path: const_string,
    pub cnf_path: const_string,
    pub default_path: const_string,
    pub suffix: *mut const_string,
    pub alt_suffix: *mut const_string,
    pub suffix_search_only: boolean,
    pub program: const_string,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut const_string,
    pub program_enabled_p: boolean,
    pub program_enable_level: kpse_src_type,
    pub binmode: boolean,
}
#[test]
fn bindgen_test_layout_kpse_format_info_type() {
    assert_eq!(
        ::std::mem::size_of::<kpse_format_info_type>(),
        128usize,
        concat!("Size of: ", stringify!(kpse_format_info_type))
    );
    assert_eq!(
        ::std::mem::align_of::<kpse_format_info_type>(),
        8usize,
        concat!("Alignment of ", stringify!(kpse_format_info_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).raw_path as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(raw_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).path_source as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(path_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).override_path as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(override_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).client_path as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(client_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).cnf_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(cnf_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).default_path as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(default_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).suffix as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(suffix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).alt_suffix as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(alt_suffix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).suffix_search_only as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(suffix_search_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).program as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).argc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).argv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).program_enabled_p as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(program_enabled_p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpse_format_info_type>())).program_enable_level as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(program_enable_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_format_info_type>())).binmode as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_format_info_type),
            "::",
            stringify!(binmode)
        )
    );
}
pub type kpathsea = *mut kpathsea_instance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kpathsea_instance {
    pub record_input: p_record_input,
    pub record_output: p_record_output,
    pub cnf_hash: hash_table_type,
    pub doing_cnf_init: boolean,
    pub db: hash_table_type,
    pub alias_db: hash_table_type,
    pub db_dir_list: str_list_type,
    pub debug: ::std::os::raw::c_uint,
    pub link_table: hash_table_type,
    pub the_cache: *mut cache_entry,
    pub cache_length: ::std::os::raw::c_uint,
    pub map: hash_table_type,
    pub map_path: const_string,
    pub debug_hash_lookup_int: boolean,
    pub elt: string,
    pub elt_alloc: ::std::os::raw::c_uint,
    pub path: const_string,
    pub followup_search: boolean,
    pub log_file: *mut FILE,
    pub log_opened: boolean,
    pub invocation_name: string,
    pub invocation_short_name: string,
    pub program_name: string,
    pub ll_verbose: ::std::os::raw::c_int,
    pub fallback_font: const_string,
    pub fallback_resolutions_string: const_string,
    pub fallback_resolutions: *mut ::std::os::raw::c_uint,
    pub format_info: [kpse_format_info_type; 59usize],
    pub make_tex_discard_errors: boolean,
    pub missfont: *mut FILE,
    pub expansions: *mut expansion_type,
    pub expansion_len: ::std::os::raw::c_uint,
    pub saved_env: *mut *mut ::std::os::raw::c_char,
    pub saved_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_kpathsea_instance() {
    assert_eq!(
        ::std::mem::size_of::<kpathsea_instance>(),
        7864usize,
        concat!("Size of: ", stringify!(kpathsea_instance))
    );
    assert_eq!(
        ::std::mem::align_of::<kpathsea_instance>(),
        8usize,
        concat!("Alignment of ", stringify!(kpathsea_instance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).record_input as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(record_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).record_output as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(record_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).cnf_hash as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(cnf_hash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).doing_cnf_init as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(doing_cnf_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).db as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).alias_db as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(alias_db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).db_dir_list as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(db_dir_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).debug as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).link_table as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(link_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).the_cache as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(the_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).cache_length as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(cache_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).map as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).map_path as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(map_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).debug_hash_lookup_int as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(debug_hash_lookup_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).elt as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(elt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).elt_alloc as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(elt_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).path as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).followup_search as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(followup_search)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).log_file as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(log_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).log_opened as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(log_opened)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).invocation_name as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(invocation_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).invocation_short_name as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(invocation_short_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).program_name as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(program_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).ll_verbose as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(ll_verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).fallback_font as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(fallback_font)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).fallback_resolutions_string as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(fallback_resolutions_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).fallback_resolutions as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(fallback_resolutions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).format_info as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(format_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kpathsea_instance>())).make_tex_discard_errors as *const _
                as usize
        },
        7816usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(make_tex_discard_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).missfont as *const _ as usize },
        7824usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(missfont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).expansions as *const _ as usize },
        7832usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(expansions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).expansion_len as *const _ as usize },
        7840usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(expansion_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).saved_env as *const _ as usize },
        7848usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(saved_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpathsea_instance>())).saved_count as *const _ as usize },
        7856usize,
        concat!(
            "Offset of field: ",
            stringify!(kpathsea_instance),
            "::",
            stringify!(saved_count)
        )
    );
}
extern "C" {
    pub static mut kpse_def_inst: kpathsea_instance;
}
extern "C" {
    pub static mut kpse_def: kpathsea;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: ::std::os::raw::c_uint = 0;
pub const DT_FIFO: ::std::os::raw::c_uint = 1;
pub const DT_CHR: ::std::os::raw::c_uint = 2;
pub const DT_DIR: ::std::os::raw::c_uint = 4;
pub const DT_BLK: ::std::os::raw::c_uint = 6;
pub const DT_REG: ::std::os::raw::c_uint = 8;
pub const DT_LNK: ::std::os::raw::c_uint = 10;
pub const DT_SOCK: ::std::os::raw::c_uint = 12;
pub const DT_WHT: ::std::os::raw::c_uint = 14;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub const _ISupper: ::std::os::raw::c_uint = 256;
pub const _ISlower: ::std::os::raw::c_uint = 512;
pub const _ISalpha: ::std::os::raw::c_uint = 1024;
pub const _ISdigit: ::std::os::raw::c_uint = 2048;
pub const _ISxdigit: ::std::os::raw::c_uint = 4096;
pub const _ISspace: ::std::os::raw::c_uint = 8192;
pub const _ISprint: ::std::os::raw::c_uint = 16384;
pub const _ISgraph: ::std::os::raw::c_uint = 32768;
pub const _ISblank: ::std::os::raw::c_uint = 1;
pub const _IScntrl: ::std::os::raw::c_uint = 2;
pub const _ISpunct: ::std::os::raw::c_uint = 4;
pub const _ISalnum: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_option() {
    assert_eq!(
        ::std::mem::size_of::<option>(),
        32usize,
        concat!("Size of: ", stringify!(option))
    );
    assert_eq!(
        ::std::mem::align_of::<option>(),
        8usize,
        concat!("Alignment of ", stringify!(option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).has_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(has_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(val)
        )
    );
}
pub const kpse_glyph_source_type_kpse_glyph_source_normal: kpse_glyph_source_type = 0;
pub const kpse_glyph_source_type_kpse_glyph_source_alias: kpse_glyph_source_type = 1;
pub const kpse_glyph_source_type_kpse_glyph_source_maketex: kpse_glyph_source_type = 2;
pub const kpse_glyph_source_type_kpse_glyph_source_fallback_res: kpse_glyph_source_type = 3;
pub const kpse_glyph_source_type_kpse_glyph_source_fallback: kpse_glyph_source_type = 4;
pub type kpse_glyph_source_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kpse_glyph_file_type {
    pub name: const_string,
    pub dpi: ::std::os::raw::c_uint,
    pub format: kpse_file_format_type,
    pub source: kpse_glyph_source_type,
}
#[test]
fn bindgen_test_layout_kpse_glyph_file_type() {
    assert_eq!(
        ::std::mem::size_of::<kpse_glyph_file_type>(),
        24usize,
        concat!("Size of: ", stringify!(kpse_glyph_file_type))
    );
    assert_eq!(
        ::std::mem::align_of::<kpse_glyph_file_type>(),
        8usize,
        concat!("Alignment of ", stringify!(kpse_glyph_file_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_glyph_file_type>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_glyph_file_type),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_glyph_file_type>())).dpi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_glyph_file_type),
            "::",
            stringify!(dpi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_glyph_file_type>())).format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_glyph_file_type),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kpse_glyph_file_type>())).source as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kpse_glyph_file_type),
            "::",
            stringify!(source)
        )
    );
}
extern "C" {
    pub static mut kpathsea_version_string: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut kpathsea_bug_address: *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
extern crate libloading;
pub struct Kpathsea {
    __library: ::libloading::Library,
    pub __fpclassify:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __signbit:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isinf:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __finite:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isnan:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __iseqsig: Result<
        unsafe extern "C" fn(__x: f64, __y: f64) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __issignaling:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub acos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __acos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub asin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __asin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub atan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __atan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub atan2: Result<unsafe extern "C" fn(__y: f64, __x: f64) -> f64, ::libloading::Error>,
    pub __atan2: Result<unsafe extern "C" fn(__y: f64, __x: f64) -> f64, ::libloading::Error>,
    pub cos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __cos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub sin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __sin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub tan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __tan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub cosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __cosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub sinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __sinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub tanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __tanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub acosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __acosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub asinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __asinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub atanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __atanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub exp: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __exp: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub frexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __frexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub ldexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __ldexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub log: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub log10: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log10: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub modf: Result<unsafe extern "C" fn(__x: f64, __iptr: *mut f64) -> f64, ::libloading::Error>,
    pub __modf:
        Result<unsafe extern "C" fn(__x: f64, __iptr: *mut f64) -> f64, ::libloading::Error>,
    pub expm1: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __expm1: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub log1p: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log1p: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub logb: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __logb: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub exp2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __exp2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub log2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub pow: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __pow: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub sqrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __sqrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub hypot: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __hypot: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub cbrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __cbrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub ceil: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __ceil: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub fabs: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __fabs: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub floor: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __floor: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub fmod: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fmod: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub isinf:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub finite:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub drem: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __drem: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub significand: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __significand: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub copysign: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __copysign: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub nan: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub __nan: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub isnan:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub j0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __j0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub j1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __j1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub jn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub __jn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub y0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __y0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub y1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __y1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub yn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub __yn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub erf: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __erf: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub erfc: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __erfc: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub lgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __lgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub tgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __tgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub gamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __gamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub lgamma_r: Result<
        unsafe extern "C" fn(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __lgamma_r: Result<
        unsafe extern "C" fn(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub rint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __rint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub nextafter: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __nextafter: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub nexttoward: Result<unsafe extern "C" fn(__x: f64, __y: u128) -> f64, ::libloading::Error>,
    pub __nexttoward: Result<unsafe extern "C" fn(__x: f64, __y: u128) -> f64, ::libloading::Error>,
    pub remainder: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __remainder: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub scalbn: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __scalbn: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub ilogb: Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __ilogb:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub scalbln: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_long) -> f64,
        ::libloading::Error,
    >,
    pub __scalbln: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_long) -> f64,
        ::libloading::Error,
    >,
    pub nearbyint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __nearbyint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub round: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __round: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub trunc: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __trunc: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub remquo: Result<
        unsafe extern "C" fn(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __remquo: Result<
        unsafe extern "C" fn(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub lrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub lround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub fdim: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fdim: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub fmax: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fmax: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub fmin: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fmin: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub fma: Result<unsafe extern "C" fn(__x: f64, __y: f64, __z: f64) -> f64, ::libloading::Error>,
    pub __fma:
        Result<unsafe extern "C" fn(__x: f64, __y: f64, __z: f64) -> f64, ::libloading::Error>,
    pub scalb: Result<unsafe extern "C" fn(__x: f64, __n: f64) -> f64, ::libloading::Error>,
    pub __scalb: Result<unsafe extern "C" fn(__x: f64, __n: f64) -> f64, ::libloading::Error>,
    pub __fpclassifyf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __signbitf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isinff:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __finitef:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isnanf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __iseqsigf: Result<
        unsafe extern "C" fn(__x: f32, __y: f32) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __issignalingf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub acosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __acosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub asinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __asinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub atanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __atanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub atan2f: Result<unsafe extern "C" fn(__y: f32, __x: f32) -> f32, ::libloading::Error>,
    pub __atan2f: Result<unsafe extern "C" fn(__y: f32, __x: f32) -> f32, ::libloading::Error>,
    pub cosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __cosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub sinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __sinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub tanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __tanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub coshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __coshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub sinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __sinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub tanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __tanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub acoshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __acoshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub asinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __asinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub atanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __atanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub expf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __expf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub frexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __frexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub ldexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __ldexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub logf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __logf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub log10f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __log10f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub modff: Result<unsafe extern "C" fn(__x: f32, __iptr: *mut f32) -> f32, ::libloading::Error>,
    pub __modff:
        Result<unsafe extern "C" fn(__x: f32, __iptr: *mut f32) -> f32, ::libloading::Error>,
    pub expm1f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __expm1f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub log1pf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __log1pf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub logbf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __logbf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub exp2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __exp2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub log2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __log2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub powf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __powf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub sqrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __sqrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub hypotf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __hypotf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub cbrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __cbrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub ceilf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __ceilf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub fabsf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __fabsf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub floorf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __floorf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub fmodf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fmodf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub isinff:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub finitef:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub dremf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __dremf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub significandf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __significandf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub copysignf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __copysignf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub nanf: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f32,
        ::libloading::Error,
    >,
    pub __nanf: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f32,
        ::libloading::Error,
    >,
    pub isnanf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub j0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __j0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub j1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __j1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub jnf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub __jnf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub y0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __y0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub y1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __y1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub ynf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub __ynf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub erff: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __erff: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub erfcf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __erfcf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub lgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __lgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub tgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __tgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub gammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __gammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub lgammaf_r: Result<
        unsafe extern "C" fn(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __lgammaf_r: Result<
        unsafe extern "C" fn(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub rintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __rintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub nextafterf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __nextafterf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub nexttowardf: Result<unsafe extern "C" fn(__x: f32, __y: u128) -> f32, ::libloading::Error>,
    pub __nexttowardf:
        Result<unsafe extern "C" fn(__x: f32, __y: u128) -> f32, ::libloading::Error>,
    pub remainderf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __remainderf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub scalbnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __scalbnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub ilogbf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __ilogbf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub scalblnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_long) -> f32,
        ::libloading::Error,
    >,
    pub __scalblnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_long) -> f32,
        ::libloading::Error,
    >,
    pub nearbyintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __nearbyintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub roundf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __roundf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub truncf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __truncf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub remquof: Result<
        unsafe extern "C" fn(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __remquof: Result<
        unsafe extern "C" fn(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub lrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub lroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub fdimf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fdimf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub fmaxf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fmaxf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub fminf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fminf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub fmaf:
        Result<unsafe extern "C" fn(__x: f32, __y: f32, __z: f32) -> f32, ::libloading::Error>,
    pub __fmaf:
        Result<unsafe extern "C" fn(__x: f32, __y: f32, __z: f32) -> f32, ::libloading::Error>,
    pub scalbf: Result<unsafe extern "C" fn(__x: f32, __n: f32) -> f32, ::libloading::Error>,
    pub __scalbf: Result<unsafe extern "C" fn(__x: f32, __n: f32) -> f32, ::libloading::Error>,
    pub __fpclassifyl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __signbitl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isinfl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __finitel:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isnanl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __iseqsigl: Result<
        unsafe extern "C" fn(__x: u128, __y: u128) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __issignalingl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub acosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __acosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub asinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __asinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub atanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __atanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub atan2l: Result<unsafe extern "C" fn(__y: u128, __x: u128) -> u128, ::libloading::Error>,
    pub __atan2l: Result<unsafe extern "C" fn(__y: u128, __x: u128) -> u128, ::libloading::Error>,
    pub cosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __cosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub sinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __sinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub tanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __tanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub coshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __coshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub sinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __sinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub tanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __tanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub acoshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __acoshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub asinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __asinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub atanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __atanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub expl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __expl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub frexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __frexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub ldexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __ldexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub logl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __logl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub log10l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __log10l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub modfl:
        Result<unsafe extern "C" fn(__x: u128, __iptr: *mut u128) -> u128, ::libloading::Error>,
    pub __modfl:
        Result<unsafe extern "C" fn(__x: u128, __iptr: *mut u128) -> u128, ::libloading::Error>,
    pub expm1l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __expm1l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub log1pl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __log1pl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub logbl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __logbl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub exp2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __exp2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub log2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __log2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub powl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __powl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub sqrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __sqrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub hypotl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __hypotl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub cbrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __cbrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub ceill: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __ceill: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub fabsl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __fabsl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub floorl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __floorl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub fmodl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fmodl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub isinfl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub finitel:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub dreml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __dreml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub significandl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __significandl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub copysignl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __copysignl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub nanl: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> u128,
        ::libloading::Error,
    >,
    pub __nanl: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> u128,
        ::libloading::Error,
    >,
    pub isnanl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub j0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __j0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub j1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __j1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub jnl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub __jnl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub y0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __y0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub y1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __y1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub ynl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub __ynl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub erfl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __erfl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub erfcl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __erfcl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub lgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __lgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub tgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __tgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub gammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __gammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub lgammal_r: Result<
        unsafe extern "C" fn(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __lgammal_r: Result<
        unsafe extern "C" fn(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub rintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __rintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub nextafterl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __nextafterl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub nexttowardl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __nexttowardl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub remainderl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __remainderl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub scalbnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __scalbnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub ilogbl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __ilogbl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub scalblnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_long) -> u128,
        ::libloading::Error,
    >,
    pub __scalblnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_long) -> u128,
        ::libloading::Error,
    >,
    pub nearbyintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __nearbyintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub roundl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __roundl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub truncl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __truncl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub remquol: Result<
        unsafe extern "C" fn(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __remquol: Result<
        unsafe extern "C" fn(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub lrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub lroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub fdiml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fdiml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub fmaxl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fmaxl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub fminl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fminl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub fmal:
        Result<unsafe extern "C" fn(__x: u128, __y: u128, __z: u128) -> u128, ::libloading::Error>,
    pub __fmal:
        Result<unsafe extern "C" fn(__x: u128, __y: u128, __z: u128) -> u128, ::libloading::Error>,
    pub scalbl: Result<unsafe extern "C" fn(__x: u128, __n: u128) -> u128, ::libloading::Error>,
    pub __scalbl: Result<unsafe extern "C" fn(__x: u128, __n: u128) -> u128, ::libloading::Error>,
    pub remove: Result<
        unsafe extern "C" fn(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rename: Result<
        unsafe extern "C" fn(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub renameat: Result<
        unsafe extern "C" fn(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fclose: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tmpfile: Result<unsafe extern "C" fn() -> *mut FILE, ::libloading::Error>,
    pub tmpnam: Result<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tmpnam_r: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tempnam: Result<
        unsafe extern "C" fn(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fflush: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fflush_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fopen: Result<
        unsafe extern "C" fn(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub freopen: Result<
        unsafe extern "C" fn(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fdopen: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fmemopen: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_void,
            __len: size_t,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub open_memstream: Result<
        unsafe extern "C" fn(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut size_t,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub setbuf: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub setvbuf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setbuffer: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: size_t,
        ),
        ::libloading::Error,
    >,
    pub setlinebuf: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub fprintf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub printf: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfprintf: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vprintf: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub snprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_ulong,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsnprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_ulong,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vdprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fscanf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scanf: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fscanf1: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scanf1: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf1: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf1: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf1: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf1: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgetc: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getc: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getchar: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getc_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getchar_unlocked:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fgetc_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc_unlocked: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc_unlocked: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar_unlocked: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getw: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putw: Result<
        unsafe extern "C" fn(
            __w: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgets: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __getdelim: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut size_t,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub getdelim: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut size_t,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub getline: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut size_t,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub fputs: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub puts: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ungetc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fread: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __n: ::std::os::raw::c_ulong,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub fwrite: Result<
        unsafe extern "C" fn(
            __ptr: *const ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __n: ::std::os::raw::c_ulong,
            __s: *mut FILE,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub fread_unlocked: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: size_t,
            __n: size_t,
            __stream: *mut FILE,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub fwrite_unlocked: Result<
        unsafe extern "C" fn(
            __ptr: *const ::std::os::raw::c_void,
            __size: size_t,
            __n: size_t,
            __stream: *mut FILE,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub fseek: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftell: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub rewind: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub fseeko: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __off: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftello: Result<unsafe extern "C" fn(__stream: *mut FILE) -> __off_t, ::libloading::Error>,
    pub fgetpos: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fsetpos: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub feof: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ferror: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr_unlocked: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub feof_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ferror_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub perror:
        Result<unsafe extern "C" fn(__s: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub fileno: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fileno_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pclose: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub popen: Result<
        unsafe extern "C" fn(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub ctermid: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub flockfile: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub ftrylockfile: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub funlockfile: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub __uflow:
        Result<unsafe extern "C" fn(arg1: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __overflow: Result<
        unsafe extern "C" fn(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub select: Result<
        unsafe extern "C" fn(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *mut timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pselect: Result<
        unsafe extern "C" fn(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *const timespec,
            __sigmask: *const __sigset_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub access: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub faccessat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lseek: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> __off_t,
        ::libloading::Error,
    >,
    pub close: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub closefrom:
        Result<unsafe extern "C" fn(__lowfd: ::std::os::raw::c_int), ::libloading::Error>,
    pub read: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: size_t,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub write: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: size_t,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub pread: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: size_t,
            __offset: __off_t,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub pwrite: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: size_t,
            __offset: __off_t,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub pipe: Result<
        unsafe extern "C" fn(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub alarm: Result<
        unsafe extern "C" fn(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub sleep: Result<
        unsafe extern "C" fn(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub ualarm: Result<
        unsafe extern "C" fn(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t,
        ::libloading::Error,
    >,
    pub usleep: Result<
        unsafe extern "C" fn(__useconds: __useconds_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pause: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub chown: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchown: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lchown: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchownat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chdir: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchdir: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getcwd: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_char,
            __size: size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getwd: Result<
        unsafe extern "C" fn(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub dup: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dup2: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fd2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execve: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fexecve: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execv: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execle: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execl: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execvp: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execlp: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nice: Result<
        unsafe extern "C" fn(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _exit: Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub pathconf: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub fpathconf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub sysconf: Result<
        unsafe extern "C" fn(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub confstr: Result<
        unsafe extern "C" fn(
            __name: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub getpid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getppid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getpgrp: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub __getpgid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub getpgid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub setpgid: Result<
        unsafe extern "C" fn(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setpgrp: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setsid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getsid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub getuid: Result<unsafe extern "C" fn() -> __uid_t, ::libloading::Error>,
    pub geteuid: Result<unsafe extern "C" fn() -> __uid_t, ::libloading::Error>,
    pub getgid: Result<unsafe extern "C" fn() -> __gid_t, ::libloading::Error>,
    pub getegid: Result<unsafe extern "C" fn() -> __gid_t, ::libloading::Error>,
    pub getgroups: Result<
        unsafe extern "C" fn(
            __size: ::std::os::raw::c_int,
            __list: *mut __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setuid:
        Result<unsafe extern "C" fn(__uid: __uid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setreuid: Result<
        unsafe extern "C" fn(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub seteuid:
        Result<unsafe extern "C" fn(__uid: __uid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setgid:
        Result<unsafe extern "C" fn(__gid: __gid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setregid: Result<
        unsafe extern "C" fn(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setegid:
        Result<unsafe extern "C" fn(__gid: __gid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fork: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub vfork: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ttyname: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ttyname_r: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isatty: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ttyslot: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub link: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub linkat: Result<
        unsafe extern "C" fn(
            __fromfd: ::std::os::raw::c_int,
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub symlink: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readlink: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub symlinkat: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readlinkat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub unlink: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unlinkat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rmdir: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tcgetpgrp:
        Result<unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> __pid_t, ::libloading::Error>,
    pub tcsetpgrp: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __pgrp_id: __pid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getlogin:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub getlogin_r: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __name_len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setlogin: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getopt: Result<
        unsafe extern "C" fn(
            ___argc: ::std::os::raw::c_int,
            ___argv: *const *mut ::std::os::raw::c_char,
            __shortopts: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostname: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sethostname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sethostid: Result<
        unsafe extern "C" fn(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getdomainname: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setdomainname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vhangup: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub revoke: Result<
        unsafe extern "C" fn(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub profil: Result<
        unsafe extern "C" fn(
            __sample_buffer: *mut ::std::os::raw::c_ushort,
            __size: size_t,
            __offset: size_t,
            __scale: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub acct: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getusershell:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub endusershell: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub setusershell: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub daemon: Result<
        unsafe extern "C" fn(
            __nochdir: ::std::os::raw::c_int,
            __noclose: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chroot: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getpass: Result<
        unsafe extern "C" fn(
            __prompt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fsync: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostid: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub sync: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getpagesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getdtablesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub truncate: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __length: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftruncate: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __length: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub brk: Result<
        unsafe extern "C" fn(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sbrk: Result<
        unsafe extern "C" fn(__delta: isize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub syscall: Result<
        unsafe extern "C" fn(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub lockf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __len: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fdatasync: Result<
        unsafe extern "C" fn(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub crypt: Result<
        unsafe extern "C" fn(
            __key: *const ::std::os::raw::c_char,
            __salt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getentropy: Result<
        unsafe extern "C" fn(
            __buffer: *mut ::std::os::raw::c_void,
            __length: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __ctype_get_mb_cur_max: Result<unsafe extern "C" fn() -> size_t, ::libloading::Error>,
    pub atof: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub atoi: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub atol: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub atoll: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtod: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtof: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32,
        ::libloading::Error,
    >,
    pub strtold: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128,
        ::libloading::Error,
    >,
    pub strtol: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub strtoul: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strtoq: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtouq: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub strtoll: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtoull: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub l64a: Result<
        unsafe extern "C" fn(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub a64l: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub random: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub srandom: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub initstate: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub setstate: Result<
        unsafe extern "C" fn(
            __statebuf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub random_r: Result<
        unsafe extern "C" fn(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub srandom_r: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub initstate_r: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: size_t,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setstate_r: Result<
        unsafe extern "C" fn(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rand: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub srand: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub rand_r: Result<
        unsafe extern "C" fn(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub drand48: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub erand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> f64,
        ::libloading::Error,
    >,
    pub lrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub nrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub mrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub jrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub srand48:
        Result<unsafe extern "C" fn(__seedval: ::std::os::raw::c_long), ::libloading::Error>,
    pub seed48: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
        ) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub lcong48:
        Result<unsafe extern "C" fn(__param: *mut ::std::os::raw::c_ushort), ::libloading::Error>,
    pub drand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub erand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lrand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nrand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mrand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub jrand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub srand48_r: Result<
        unsafe extern "C" fn(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub seed48_r: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lcong48_r: Result<
        unsafe extern "C" fn(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub malloc: Result<
        unsafe extern "C" fn(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub calloc: Result<
        unsafe extern "C" fn(
            __nmemb: ::std::os::raw::c_ulong,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub realloc: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub free: Result<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub reallocarray: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: size_t,
            __size: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub alloca: Result<
        unsafe extern "C" fn(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub valloc: Result<
        unsafe extern "C" fn(__size: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub posix_memalign: Result<
        unsafe extern "C" fn(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: size_t,
            __size: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub aligned_alloc: Result<
        unsafe extern "C" fn(
            __alignment: ::std::os::raw::c_ulong,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub abort: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub atexit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub at_quick_exit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub on_exit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub exit: Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub quick_exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub _Exit: Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub getenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub putenv: Result<
        unsafe extern "C" fn(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setenv: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unsetenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearenv: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub mktemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mkstemp: Result<
        unsafe extern "C" fn(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemps: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkdtemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub system: Result<
        unsafe extern "C" fn(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub realpath: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub bsearch: Result<
        unsafe extern "C" fn(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: size_t,
            __size: size_t,
            __compar: __compar_fn_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub qsort: Result<
        unsafe extern "C" fn(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: size_t,
            __size: size_t,
            __compar: __compar_fn_t,
        ),
        ::libloading::Error,
    >,
    pub abs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub labs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub llabs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub div: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_int,
            __denom: ::std::os::raw::c_int,
        ) -> div_t,
        ::libloading::Error,
    >,
    pub ldiv: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> ldiv_t,
        ::libloading::Error,
    >,
    pub lldiv: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> lldiv_t,
        ::libloading::Error,
    >,
    pub ecvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub gcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qecvt: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qfcvt: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qgcvt: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ecvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fcvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub qecvt_r: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub qfcvt_r: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mblen: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbtowc: Result<
        unsafe extern "C" fn(
            __pwc: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wctomb: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __wchar: wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbstowcs: Result<
        unsafe extern "C" fn(
            __pwcs: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub wcstombs: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const wchar_t,
            __n: size_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub rpmatch: Result<
        unsafe extern "C" fn(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getsubopt: Result<
        unsafe extern "C" fn(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getloadavg: Result<
        unsafe extern "C" fn(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memmove: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memccpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memset: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcat: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncat: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcoll: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strcoll_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm_l: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: size_t,
            __l: locale_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub strdup: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strndup: Result<
        unsafe extern "C" fn(
            __string: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strrchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strpbrk: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strstr: Result<
        unsafe extern "C" fn(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strlen: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strnlen: Result<
        unsafe extern "C" fn(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t,
        ::libloading::Error,
    >,
    pub strerror: Result<
        unsafe extern "C" fn(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strerror_r: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strerror_l: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub bcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub bcopy: Result<
        unsafe extern "C" fn(
            __src: *const ::std::os::raw::c_void,
            __dest: *mut ::std::os::raw::c_void,
            __n: size_t,
        ),
        ::libloading::Error,
    >,
    pub bzero: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong),
        ::libloading::Error,
    >,
    pub index: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub rindex: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ffs: Result<
        unsafe extern "C" fn(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ffsl: Result<
        unsafe extern "C" fn(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ffsll: Result<
        unsafe extern "C" fn(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcasecmp_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __loc: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: size_t,
            __loc: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub explicit_bzero: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_void, __n: size_t),
        ::libloading::Error,
    >,
    pub strsep: Result<
        unsafe extern "C" fn(
            __stringp: *mut *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strsignal: Result<
        unsafe extern "C" fn(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __stpcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub stpcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __stpncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub stpncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __errno_location:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub __assert_fail: Result<
        unsafe extern "C" fn(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub __assert_perror_fail: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub __assert: Result<
        unsafe extern "C" fn(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub imaxabs: Result<unsafe extern "C" fn(__n: intmax_t) -> intmax_t, ::libloading::Error>,
    pub imaxdiv: Result<
        unsafe extern "C" fn(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t,
        ::libloading::Error,
    >,
    pub strtoimax: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> intmax_t,
        ::libloading::Error,
    >,
    pub strtoumax: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> uintmax_t,
        ::libloading::Error,
    >,
    pub wcstoimax: Result<
        unsafe extern "C" fn(
            __nptr: *const __gwchar_t,
            __endptr: *mut *mut __gwchar_t,
            __base: ::std::os::raw::c_int,
        ) -> intmax_t,
        ::libloading::Error,
    >,
    pub wcstoumax: Result<
        unsafe extern "C" fn(
            __nptr: *const __gwchar_t,
            __endptr: *mut *mut __gwchar_t,
            __base: ::std::os::raw::c_int,
        ) -> uintmax_t,
        ::libloading::Error,
    >,
    pub hash_create: Result<
        unsafe extern "C" fn(size: ::std::os::raw::c_uint) -> hash_table_type,
        ::libloading::Error,
    >,
    pub hash_insert: Result<
        unsafe extern "C" fn(table: *mut hash_table_type, key: const_string, value: const_string),
        ::libloading::Error,
    >,
    pub hash_remove: Result<
        unsafe extern "C" fn(table: *mut hash_table_type, key: const_string, value: const_string),
        ::libloading::Error,
    >,
    pub hash_lookup: Result<
        unsafe extern "C" fn(table: hash_table_type, key: const_string) -> *mut const_string,
        ::libloading::Error,
    >,
    pub str_list_add:
        Result<unsafe extern "C" fn(l: *mut str_list_type, s: string), ::libloading::Error>,
    pub cstr_list_add:
        Result<unsafe extern "C" fn(l: *mut cstr_list_type, s: const_string), ::libloading::Error>,
    pub kpathsea_new: Result<unsafe extern "C" fn() -> kpathsea, ::libloading::Error>,
    pub kpathsea_finish: Result<unsafe extern "C" fn(kpse: kpathsea), ::libloading::Error>,
    pub kpse_fopen_trace: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub kpse_fclose_trace:
        Result<unsafe extern "C" fn(arg1: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub concat: Result<
        unsafe extern "C" fn(s1: const_string, s2: const_string) -> string,
        ::libloading::Error,
    >,
    pub concat3: Result<
        unsafe extern "C" fn(arg1: const_string, arg2: const_string, arg3: const_string) -> string,
        ::libloading::Error,
    >,
    pub xstrdup: Result<unsafe extern "C" fn(s: const_string) -> string, ::libloading::Error>,
    pub uppercasify: Result<unsafe extern "C" fn(s: const_string) -> string, ::libloading::Error>,
    pub atou: Result<
        unsafe extern "C" fn(arg1: const_string) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub same_file_p: Result<
        unsafe extern "C" fn(filename1: const_string, filename2: const_string) -> boolean,
        ::libloading::Error,
    >,
    pub xbasename:
        Result<unsafe extern "C" fn(name: const_string) -> const_string, ::libloading::Error>,
    pub xdirname: Result<unsafe extern "C" fn(name: const_string) -> string, ::libloading::Error>,
    pub find_suffix:
        Result<unsafe extern "C" fn(name: const_string) -> const_string, ::libloading::Error>,
    pub remove_suffix:
        Result<unsafe extern "C" fn(name: const_string) -> string, ::libloading::Error>,
    pub make_suffix: Result<
        unsafe extern "C" fn(s: const_string, suffix: const_string) -> string,
        ::libloading::Error,
    >,
    pub make_prefix: Result<
        unsafe extern "C" fn(stem_prefix: string, name: string) -> string,
        ::libloading::Error,
    >,
    pub extend_filename: Result<
        unsafe extern "C" fn(name: const_string, suffix: const_string) -> const_string,
        ::libloading::Error,
    >,
    pub kpathsea_xputenv: Result<
        unsafe extern "C" fn(kpse: kpathsea, var: const_string, value: const_string),
        ::libloading::Error,
    >,
    pub kpathsea_xputenv_int: Result<
        unsafe extern "C" fn(kpse: kpathsea, var: const_string, value: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub xputenv:
        Result<unsafe extern "C" fn(var: const_string, value: const_string), ::libloading::Error>,
    pub xputenv_int: Result<
        unsafe extern "C" fn(var: const_string, value: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub xgetcwd: Result<unsafe extern "C" fn() -> string, ::libloading::Error>,
    pub kpathsea_dir_p:
        Result<unsafe extern "C" fn(kpse: kpathsea, fn_: string) -> boolean, ::libloading::Error>,
    pub dir_p: Result<unsafe extern "C" fn(fn_: string) -> boolean, ::libloading::Error>,
    pub dir_links: Result<
        unsafe extern "C" fn(
            fn_: const_string,
            nlinks: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub kpathsea_dir_links: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            fn_: const_string,
            nlinks: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub xfopen: Result<
        unsafe extern "C" fn(filename: const_string, mode: const_string) -> *mut FILE,
        ::libloading::Error,
    >,
    pub xfclose:
        Result<unsafe extern "C" fn(fp: *mut FILE, filename: const_string), ::libloading::Error>,
    pub xfseek: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            offset: ::std::os::raw::c_long,
            wherefrom: ::std::os::raw::c_int,
            filename: const_string,
        ),
        ::libloading::Error,
    >,
    pub xfseeko: Result<
        unsafe extern "C" fn(
            fp: *mut FILE,
            offset: off_t,
            wherefrom: ::std::os::raw::c_int,
            filename: const_string,
        ),
        ::libloading::Error,
    >,
    pub xftell: Result<
        unsafe extern "C" fn(fp: *mut FILE, filename: const_string) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub xftello: Result<
        unsafe extern "C" fn(fp: *mut FILE, filename: const_string) -> off_t,
        ::libloading::Error,
    >,
    pub xmalloc: Result<unsafe extern "C" fn(size: size_t) -> address, ::libloading::Error>,
    pub xrealloc: Result<
        unsafe extern "C" fn(old_address: address, new_size: size_t) -> address,
        ::libloading::Error,
    >,
    pub xcalloc:
        Result<unsafe extern "C" fn(nelem: size_t, elsize: size_t) -> address, ::libloading::Error>,
    pub kpathsea_selfdir: Result<
        unsafe extern "C" fn(kpse: kpathsea, argv0: const_string) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_set_program_name: Result<
        unsafe extern "C" fn(kpse: kpathsea, argv0: const_string, progname: const_string),
        ::libloading::Error,
    >,
    pub kpse_selfdir:
        Result<unsafe extern "C" fn(argv0: const_string) -> string, ::libloading::Error>,
    pub kpse_set_program_name: Result<
        unsafe extern "C" fn(argv0: const_string, progname: const_string),
        ::libloading::Error,
    >,
    pub kpse_program_basename:
        Result<unsafe extern "C" fn(argv0: const_string) -> string, ::libloading::Error>,
    pub kpathsea_absolute_p: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            filename: const_string,
            relative_ok: boolean,
        ) -> boolean,
        ::libloading::Error,
    >,
    pub kpse_absolute_p: Result<
        unsafe extern "C" fn(filename: const_string, relative_ok: boolean) -> boolean,
        ::libloading::Error,
    >,
    pub opendir: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut DIR,
        ::libloading::Error,
    >,
    pub fdopendir:
        Result<unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> *mut DIR, ::libloading::Error>,
    pub closedir: Result<
        unsafe extern "C" fn(__dirp: *mut DIR) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readdir: Result<unsafe extern "C" fn(__dirp: *mut DIR) -> *mut dirent, ::libloading::Error>,
    pub readdir_r: Result<
        unsafe extern "C" fn(
            __dirp: *mut DIR,
            __entry: *mut dirent,
            __result: *mut *mut dirent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rewinddir: Result<unsafe extern "C" fn(__dirp: *mut DIR), ::libloading::Error>,
    pub seekdir: Result<
        unsafe extern "C" fn(__dirp: *mut DIR, __pos: ::std::os::raw::c_long),
        ::libloading::Error,
    >,
    pub telldir: Result<
        unsafe extern "C" fn(__dirp: *mut DIR) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub dirfd: Result<
        unsafe extern "C" fn(__dirp: *mut DIR) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scandir: Result<
        unsafe extern "C" fn(
            __dir: *const ::std::os::raw::c_char,
            __namelist: *mut *mut *mut dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const dirent,
                    arg2: *mut *const dirent,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub alphasort: Result<
        unsafe extern "C" fn(
            __e1: *mut *const dirent,
            __e2: *mut *const dirent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getdirentries: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: size_t,
            __basep: *mut __off_t,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub fcntl: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub open: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __oflag: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub openat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __oflag: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub creat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub posix_fadvise: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: off_t,
            __len: off_t,
            __advise: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub posix_fallocate: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: off_t,
            __len: off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __ctype_b_loc:
        Result<unsafe extern "C" fn() -> *mut *const ::std::os::raw::c_ushort, ::libloading::Error>,
    pub __ctype_tolower_loc:
        Result<unsafe extern "C" fn() -> *mut *const __int32_t, ::libloading::Error>,
    pub __ctype_toupper_loc:
        Result<unsafe extern "C" fn() -> *mut *const __int32_t, ::libloading::Error>,
    pub isalnum: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalpha: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iscntrl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isdigit: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub islower: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isgraph: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isprint: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ispunct: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isspace: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isupper: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isxdigit: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tolower: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toupper: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isblank: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isascii: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toascii: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _toupper: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _tolower: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalnum_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalpha_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iscntrl_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isdigit_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub islower_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isgraph_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isprint_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ispunct_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isspace_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isupper_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isxdigit_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isblank_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __tolower_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tolower_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __toupper_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toupper_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub stat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fstat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fstatat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __buf: *mut stat,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lstat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chmod: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lchmod: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchmod: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchmodat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub umask: Result<unsafe extern "C" fn(__mask: __mode_t) -> __mode_t, ::libloading::Error>,
    pub mkdir: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkdirat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mknod: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __dev: __dev_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mknodat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __dev: __dev_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkfifo: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkfifoat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utimensat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __times: *const timespec,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub futimens: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __times: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub kpathsea_cnf_get: Result<
        unsafe extern "C" fn(kpse: kpathsea, var: const_string) -> const_string,
        ::libloading::Error,
    >,
    pub kpathsea_cnf_line_env_progname:
        Result<unsafe extern "C" fn(kpse: kpathsea, l: string), ::libloading::Error>,
    pub kpse_cnf_get:
        Result<unsafe extern "C" fn(var: const_string) -> const_string, ::libloading::Error>,
    pub concatn:
        Result<unsafe extern "C" fn(str1: const_string, ...) -> string, ::libloading::Error>,
    pub kpathsea_brace_expand: Result<
        unsafe extern "C" fn(kpse: kpathsea, path: const_string) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_path_expand: Result<
        unsafe extern "C" fn(kpse: kpathsea, path: const_string) -> string,
        ::libloading::Error,
    >,
    pub kpse_brace_expand:
        Result<unsafe extern "C" fn(path: const_string) -> string, ::libloading::Error>,
    pub kpse_path_expand:
        Result<unsafe extern "C" fn(path: const_string) -> string, ::libloading::Error>,
    pub getopt_long: Result<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *mut ::std::os::raw::c_char,
            shortopts: *const ::std::os::raw::c_char,
            longopts: *const option,
            longind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getopt_long_only: Result<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *mut ::std::os::raw::c_char,
            shortopts: *const ::std::os::raw::c_char,
            longopts: *const option,
            longind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub read_line: Result<unsafe extern "C" fn(f: *mut FILE) -> string, ::libloading::Error>,
    pub kpathsea_magstep_fix: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            dpi: ::std::os::raw::c_uint,
            bdpi: ::std::os::raw::c_uint,
            m_ret: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub kpse_magstep_fix: Result<
        unsafe extern "C" fn(
            dpi: ::std::os::raw::c_uint,
            bdpi: ::std::os::raw::c_uint,
            m_ret: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub kpathsea_path_search: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            path: const_string,
            name: const_string,
            must_exist: boolean,
        ) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_all_path_search: Result<
        unsafe extern "C" fn(kpse: kpathsea, path: const_string, name: const_string) -> *mut string,
        ::libloading::Error,
    >,
    pub kpse_path_search: Result<
        unsafe extern "C" fn(path: const_string, name: const_string, must_exist: boolean) -> string,
        ::libloading::Error,
    >,
    pub kpse_all_path_search: Result<
        unsafe extern "C" fn(path: const_string, name: const_string) -> *mut string,
        ::libloading::Error,
    >,
    pub kpathsea_init_prog: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            prefix: const_string,
            dpi: ::std::os::raw::c_uint,
            mode: const_string,
            fallback: const_string,
        ),
        ::libloading::Error,
    >,
    pub kpse_init_prog: Result<
        unsafe extern "C" fn(
            prefix: const_string,
            dpi: ::std::os::raw::c_uint,
            mode: const_string,
            fallback: const_string,
        ),
        ::libloading::Error,
    >,
    pub kpathsea_readable_file:
        Result<unsafe extern "C" fn(kpse: kpathsea, name: string) -> string, ::libloading::Error>,
    pub kpse_readable_file:
        Result<unsafe extern "C" fn(name: string) -> string, ::libloading::Error>,
    pub kpathsea_set_program_enabled: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            fmt: kpse_file_format_type,
            value: boolean,
            level: kpse_src_type,
        ),
        ::libloading::Error,
    >,
    pub kpathsea_maketex_option: Result<
        unsafe extern "C" fn(kpse: kpathsea, fmtname: const_string, value: boolean),
        ::libloading::Error,
    >,
    pub kpathsea_set_suffixes: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            format: kpse_file_format_type,
            alternate: boolean,
            ...
        ),
        ::libloading::Error,
    >,
    pub kpathsea_init_format: Result<
        unsafe extern "C" fn(kpse: kpathsea, format: kpse_file_format_type) -> const_string,
        ::libloading::Error,
    >,
    pub kpathsea_init_format_return_varlist: Result<
        unsafe extern "C" fn(kpse: kpathsea, format: kpse_file_format_type) -> const_string,
        ::libloading::Error,
    >,
    pub kpathsea_find_file: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            name: const_string,
            format: kpse_file_format_type,
            must_exist: boolean,
        ) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_find_file_generic: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            name: const_string,
            format: kpse_file_format_type,
            must_exist: boolean,
            all: boolean,
        ) -> *mut string,
        ::libloading::Error,
    >,
    pub kpathsea_in_name_ok: Result<
        unsafe extern "C" fn(kpse: kpathsea, fname: const_string) -> boolean,
        ::libloading::Error,
    >,
    pub kpathsea_out_name_ok: Result<
        unsafe extern "C" fn(kpse: kpathsea, fname: const_string) -> boolean,
        ::libloading::Error,
    >,
    pub kpathsea_in_name_ok_silent: Result<
        unsafe extern "C" fn(kpse: kpathsea, fname: const_string) -> boolean,
        ::libloading::Error,
    >,
    pub kpathsea_out_name_ok_silent: Result<
        unsafe extern "C" fn(kpse: kpathsea, fname: const_string) -> boolean,
        ::libloading::Error,
    >,
    pub kpathsea_open_file: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            name: const_string,
            format: kpse_file_format_type,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub kpathsea_reset_program_name:
        Result<unsafe extern "C" fn(kpse: kpathsea, progname: const_string), ::libloading::Error>,
    pub kpse_init_fallback_resolutions:
        Result<unsafe extern "C" fn(envvar: string), ::libloading::Error>,
    pub kpse_set_program_enabled: Result<
        unsafe extern "C" fn(fmt: kpse_file_format_type, value: boolean, level: kpse_src_type),
        ::libloading::Error,
    >,
    pub kpse_maketex_option:
        Result<unsafe extern "C" fn(fmtname: const_string, value: boolean), ::libloading::Error>,
    pub kpse_set_suffixes: Result<
        unsafe extern "C" fn(format: kpse_file_format_type, alternate: boolean, ...),
        ::libloading::Error,
    >,
    pub kpse_init_format: Result<
        unsafe extern "C" fn(arg1: kpse_file_format_type) -> const_string,
        ::libloading::Error,
    >,
    pub kpse_find_file: Result<
        unsafe extern "C" fn(
            name: const_string,
            format: kpse_file_format_type,
            must_exist: boolean,
        ) -> string,
        ::libloading::Error,
    >,
    pub kpse_find_file_generic: Result<
        unsafe extern "C" fn(
            name: const_string,
            format: kpse_file_format_type,
            must_exist: boolean,
            all: boolean,
        ) -> *mut string,
        ::libloading::Error,
    >,
    pub kpse_in_name_ok:
        Result<unsafe extern "C" fn(fname: const_string) -> boolean, ::libloading::Error>,
    pub kpse_out_name_ok:
        Result<unsafe extern "C" fn(fname: const_string) -> boolean, ::libloading::Error>,
    pub kpse_open_file: Result<
        unsafe extern "C" fn(arg1: const_string, arg2: kpse_file_format_type) -> *mut FILE,
        ::libloading::Error,
    >,
    pub kpse_reset_program_name:
        Result<unsafe extern "C" fn(progname: const_string), ::libloading::Error>,
    pub kpathsea_find_glyph: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            font_name: const_string,
            dpi: ::std::os::raw::c_uint,
            format: kpse_file_format_type,
            glyph_file: *mut kpse_glyph_file_type,
        ) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_bitmap_tolerance: Result<
        unsafe extern "C" fn(kpse: kpathsea, dpi1: f64, dpi2: f64) -> boolean,
        ::libloading::Error,
    >,
    pub kpse_find_glyph: Result<
        unsafe extern "C" fn(
            font_name: const_string,
            dpi: ::std::os::raw::c_uint,
            format: kpse_file_format_type,
            glyph_file: *mut kpse_glyph_file_type,
        ) -> string,
        ::libloading::Error,
    >,
    pub kpse_bitmap_tolerance:
        Result<unsafe extern "C" fn(dpi1: f64, dpi2: f64) -> boolean, ::libloading::Error>,
    pub kpathsea_tex_hush: Result<
        unsafe extern "C" fn(kpse: kpathsea, what: const_string) -> boolean,
        ::libloading::Error,
    >,
    pub kpse_tex_hush:
        Result<unsafe extern "C" fn(what: const_string) -> boolean, ::libloading::Error>,
    pub kpathsea_make_tex: Result<
        unsafe extern "C" fn(
            kpse: kpathsea,
            format: kpse_file_format_type,
            base_file: const_string,
        ) -> string,
        ::libloading::Error,
    >,
    pub kpse_make_tex: Result<
        unsafe extern "C" fn(format: kpse_file_format_type, base_file: const_string) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_var_value: Result<
        unsafe extern "C" fn(kpse: kpathsea, var: const_string) -> string,
        ::libloading::Error,
    >,
    pub kpathsea_var_expand: Result<
        unsafe extern "C" fn(kpse: kpathsea, src: const_string) -> string,
        ::libloading::Error,
    >,
    pub kpse_var_value:
        Result<unsafe extern "C" fn(var: const_string) -> string, ::libloading::Error>,
    pub kpse_var_expand:
        Result<unsafe extern "C" fn(src: const_string) -> string, ::libloading::Error>,
}
impl Kpathsea {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let __fpclassify = __library.get(b"__fpclassify\0").map(|sym| *sym);
        let __signbit = __library.get(b"__signbit\0").map(|sym| *sym);
        let __isinf = __library.get(b"__isinf\0").map(|sym| *sym);
        let __finite = __library.get(b"__finite\0").map(|sym| *sym);
        let __isnan = __library.get(b"__isnan\0").map(|sym| *sym);
        let __iseqsig = __library.get(b"__iseqsig\0").map(|sym| *sym);
        let __issignaling = __library.get(b"__issignaling\0").map(|sym| *sym);
        let acos = __library.get(b"acos\0").map(|sym| *sym);
        let __acos = __library.get(b"__acos\0").map(|sym| *sym);
        let asin = __library.get(b"asin\0").map(|sym| *sym);
        let __asin = __library.get(b"__asin\0").map(|sym| *sym);
        let atan = __library.get(b"atan\0").map(|sym| *sym);
        let __atan = __library.get(b"__atan\0").map(|sym| *sym);
        let atan2 = __library.get(b"atan2\0").map(|sym| *sym);
        let __atan2 = __library.get(b"__atan2\0").map(|sym| *sym);
        let cos = __library.get(b"cos\0").map(|sym| *sym);
        let __cos = __library.get(b"__cos\0").map(|sym| *sym);
        let sin = __library.get(b"sin\0").map(|sym| *sym);
        let __sin = __library.get(b"__sin\0").map(|sym| *sym);
        let tan = __library.get(b"tan\0").map(|sym| *sym);
        let __tan = __library.get(b"__tan\0").map(|sym| *sym);
        let cosh = __library.get(b"cosh\0").map(|sym| *sym);
        let __cosh = __library.get(b"__cosh\0").map(|sym| *sym);
        let sinh = __library.get(b"sinh\0").map(|sym| *sym);
        let __sinh = __library.get(b"__sinh\0").map(|sym| *sym);
        let tanh = __library.get(b"tanh\0").map(|sym| *sym);
        let __tanh = __library.get(b"__tanh\0").map(|sym| *sym);
        let acosh = __library.get(b"acosh\0").map(|sym| *sym);
        let __acosh = __library.get(b"__acosh\0").map(|sym| *sym);
        let asinh = __library.get(b"asinh\0").map(|sym| *sym);
        let __asinh = __library.get(b"__asinh\0").map(|sym| *sym);
        let atanh = __library.get(b"atanh\0").map(|sym| *sym);
        let __atanh = __library.get(b"__atanh\0").map(|sym| *sym);
        let exp = __library.get(b"exp\0").map(|sym| *sym);
        let __exp = __library.get(b"__exp\0").map(|sym| *sym);
        let frexp = __library.get(b"frexp\0").map(|sym| *sym);
        let __frexp = __library.get(b"__frexp\0").map(|sym| *sym);
        let ldexp = __library.get(b"ldexp\0").map(|sym| *sym);
        let __ldexp = __library.get(b"__ldexp\0").map(|sym| *sym);
        let log = __library.get(b"log\0").map(|sym| *sym);
        let __log = __library.get(b"__log\0").map(|sym| *sym);
        let log10 = __library.get(b"log10\0").map(|sym| *sym);
        let __log10 = __library.get(b"__log10\0").map(|sym| *sym);
        let modf = __library.get(b"modf\0").map(|sym| *sym);
        let __modf = __library.get(b"__modf\0").map(|sym| *sym);
        let expm1 = __library.get(b"expm1\0").map(|sym| *sym);
        let __expm1 = __library.get(b"__expm1\0").map(|sym| *sym);
        let log1p = __library.get(b"log1p\0").map(|sym| *sym);
        let __log1p = __library.get(b"__log1p\0").map(|sym| *sym);
        let logb = __library.get(b"logb\0").map(|sym| *sym);
        let __logb = __library.get(b"__logb\0").map(|sym| *sym);
        let exp2 = __library.get(b"exp2\0").map(|sym| *sym);
        let __exp2 = __library.get(b"__exp2\0").map(|sym| *sym);
        let log2 = __library.get(b"log2\0").map(|sym| *sym);
        let __log2 = __library.get(b"__log2\0").map(|sym| *sym);
        let pow = __library.get(b"pow\0").map(|sym| *sym);
        let __pow = __library.get(b"__pow\0").map(|sym| *sym);
        let sqrt = __library.get(b"sqrt\0").map(|sym| *sym);
        let __sqrt = __library.get(b"__sqrt\0").map(|sym| *sym);
        let hypot = __library.get(b"hypot\0").map(|sym| *sym);
        let __hypot = __library.get(b"__hypot\0").map(|sym| *sym);
        let cbrt = __library.get(b"cbrt\0").map(|sym| *sym);
        let __cbrt = __library.get(b"__cbrt\0").map(|sym| *sym);
        let ceil = __library.get(b"ceil\0").map(|sym| *sym);
        let __ceil = __library.get(b"__ceil\0").map(|sym| *sym);
        let fabs = __library.get(b"fabs\0").map(|sym| *sym);
        let __fabs = __library.get(b"__fabs\0").map(|sym| *sym);
        let floor = __library.get(b"floor\0").map(|sym| *sym);
        let __floor = __library.get(b"__floor\0").map(|sym| *sym);
        let fmod = __library.get(b"fmod\0").map(|sym| *sym);
        let __fmod = __library.get(b"__fmod\0").map(|sym| *sym);
        let isinf = __library.get(b"isinf\0").map(|sym| *sym);
        let finite = __library.get(b"finite\0").map(|sym| *sym);
        let drem = __library.get(b"drem\0").map(|sym| *sym);
        let __drem = __library.get(b"__drem\0").map(|sym| *sym);
        let significand = __library.get(b"significand\0").map(|sym| *sym);
        let __significand = __library.get(b"__significand\0").map(|sym| *sym);
        let copysign = __library.get(b"copysign\0").map(|sym| *sym);
        let __copysign = __library.get(b"__copysign\0").map(|sym| *sym);
        let nan = __library.get(b"nan\0").map(|sym| *sym);
        let __nan = __library.get(b"__nan\0").map(|sym| *sym);
        let isnan = __library.get(b"isnan\0").map(|sym| *sym);
        let j0 = __library.get(b"j0\0").map(|sym| *sym);
        let __j0 = __library.get(b"__j0\0").map(|sym| *sym);
        let j1 = __library.get(b"j1\0").map(|sym| *sym);
        let __j1 = __library.get(b"__j1\0").map(|sym| *sym);
        let jn = __library.get(b"jn\0").map(|sym| *sym);
        let __jn = __library.get(b"__jn\0").map(|sym| *sym);
        let y0 = __library.get(b"y0\0").map(|sym| *sym);
        let __y0 = __library.get(b"__y0\0").map(|sym| *sym);
        let y1 = __library.get(b"y1\0").map(|sym| *sym);
        let __y1 = __library.get(b"__y1\0").map(|sym| *sym);
        let yn = __library.get(b"yn\0").map(|sym| *sym);
        let __yn = __library.get(b"__yn\0").map(|sym| *sym);
        let erf = __library.get(b"erf\0").map(|sym| *sym);
        let __erf = __library.get(b"__erf\0").map(|sym| *sym);
        let erfc = __library.get(b"erfc\0").map(|sym| *sym);
        let __erfc = __library.get(b"__erfc\0").map(|sym| *sym);
        let lgamma = __library.get(b"lgamma\0").map(|sym| *sym);
        let __lgamma = __library.get(b"__lgamma\0").map(|sym| *sym);
        let tgamma = __library.get(b"tgamma\0").map(|sym| *sym);
        let __tgamma = __library.get(b"__tgamma\0").map(|sym| *sym);
        let gamma = __library.get(b"gamma\0").map(|sym| *sym);
        let __gamma = __library.get(b"__gamma\0").map(|sym| *sym);
        let lgamma_r = __library.get(b"lgamma_r\0").map(|sym| *sym);
        let __lgamma_r = __library.get(b"__lgamma_r\0").map(|sym| *sym);
        let rint = __library.get(b"rint\0").map(|sym| *sym);
        let __rint = __library.get(b"__rint\0").map(|sym| *sym);
        let nextafter = __library.get(b"nextafter\0").map(|sym| *sym);
        let __nextafter = __library.get(b"__nextafter\0").map(|sym| *sym);
        let nexttoward = __library.get(b"nexttoward\0").map(|sym| *sym);
        let __nexttoward = __library.get(b"__nexttoward\0").map(|sym| *sym);
        let remainder = __library.get(b"remainder\0").map(|sym| *sym);
        let __remainder = __library.get(b"__remainder\0").map(|sym| *sym);
        let scalbn = __library.get(b"scalbn\0").map(|sym| *sym);
        let __scalbn = __library.get(b"__scalbn\0").map(|sym| *sym);
        let ilogb = __library.get(b"ilogb\0").map(|sym| *sym);
        let __ilogb = __library.get(b"__ilogb\0").map(|sym| *sym);
        let scalbln = __library.get(b"scalbln\0").map(|sym| *sym);
        let __scalbln = __library.get(b"__scalbln\0").map(|sym| *sym);
        let nearbyint = __library.get(b"nearbyint\0").map(|sym| *sym);
        let __nearbyint = __library.get(b"__nearbyint\0").map(|sym| *sym);
        let round = __library.get(b"round\0").map(|sym| *sym);
        let __round = __library.get(b"__round\0").map(|sym| *sym);
        let trunc = __library.get(b"trunc\0").map(|sym| *sym);
        let __trunc = __library.get(b"__trunc\0").map(|sym| *sym);
        let remquo = __library.get(b"remquo\0").map(|sym| *sym);
        let __remquo = __library.get(b"__remquo\0").map(|sym| *sym);
        let lrint = __library.get(b"lrint\0").map(|sym| *sym);
        let __lrint = __library.get(b"__lrint\0").map(|sym| *sym);
        let llrint = __library.get(b"llrint\0").map(|sym| *sym);
        let __llrint = __library.get(b"__llrint\0").map(|sym| *sym);
        let lround = __library.get(b"lround\0").map(|sym| *sym);
        let __lround = __library.get(b"__lround\0").map(|sym| *sym);
        let llround = __library.get(b"llround\0").map(|sym| *sym);
        let __llround = __library.get(b"__llround\0").map(|sym| *sym);
        let fdim = __library.get(b"fdim\0").map(|sym| *sym);
        let __fdim = __library.get(b"__fdim\0").map(|sym| *sym);
        let fmax = __library.get(b"fmax\0").map(|sym| *sym);
        let __fmax = __library.get(b"__fmax\0").map(|sym| *sym);
        let fmin = __library.get(b"fmin\0").map(|sym| *sym);
        let __fmin = __library.get(b"__fmin\0").map(|sym| *sym);
        let fma = __library.get(b"fma\0").map(|sym| *sym);
        let __fma = __library.get(b"__fma\0").map(|sym| *sym);
        let scalb = __library.get(b"scalb\0").map(|sym| *sym);
        let __scalb = __library.get(b"__scalb\0").map(|sym| *sym);
        let __fpclassifyf = __library.get(b"__fpclassifyf\0").map(|sym| *sym);
        let __signbitf = __library.get(b"__signbitf\0").map(|sym| *sym);
        let __isinff = __library.get(b"__isinff\0").map(|sym| *sym);
        let __finitef = __library.get(b"__finitef\0").map(|sym| *sym);
        let __isnanf = __library.get(b"__isnanf\0").map(|sym| *sym);
        let __iseqsigf = __library.get(b"__iseqsigf\0").map(|sym| *sym);
        let __issignalingf = __library.get(b"__issignalingf\0").map(|sym| *sym);
        let acosf = __library.get(b"acosf\0").map(|sym| *sym);
        let __acosf = __library.get(b"__acosf\0").map(|sym| *sym);
        let asinf = __library.get(b"asinf\0").map(|sym| *sym);
        let __asinf = __library.get(b"__asinf\0").map(|sym| *sym);
        let atanf = __library.get(b"atanf\0").map(|sym| *sym);
        let __atanf = __library.get(b"__atanf\0").map(|sym| *sym);
        let atan2f = __library.get(b"atan2f\0").map(|sym| *sym);
        let __atan2f = __library.get(b"__atan2f\0").map(|sym| *sym);
        let cosf = __library.get(b"cosf\0").map(|sym| *sym);
        let __cosf = __library.get(b"__cosf\0").map(|sym| *sym);
        let sinf = __library.get(b"sinf\0").map(|sym| *sym);
        let __sinf = __library.get(b"__sinf\0").map(|sym| *sym);
        let tanf = __library.get(b"tanf\0").map(|sym| *sym);
        let __tanf = __library.get(b"__tanf\0").map(|sym| *sym);
        let coshf = __library.get(b"coshf\0").map(|sym| *sym);
        let __coshf = __library.get(b"__coshf\0").map(|sym| *sym);
        let sinhf = __library.get(b"sinhf\0").map(|sym| *sym);
        let __sinhf = __library.get(b"__sinhf\0").map(|sym| *sym);
        let tanhf = __library.get(b"tanhf\0").map(|sym| *sym);
        let __tanhf = __library.get(b"__tanhf\0").map(|sym| *sym);
        let acoshf = __library.get(b"acoshf\0").map(|sym| *sym);
        let __acoshf = __library.get(b"__acoshf\0").map(|sym| *sym);
        let asinhf = __library.get(b"asinhf\0").map(|sym| *sym);
        let __asinhf = __library.get(b"__asinhf\0").map(|sym| *sym);
        let atanhf = __library.get(b"atanhf\0").map(|sym| *sym);
        let __atanhf = __library.get(b"__atanhf\0").map(|sym| *sym);
        let expf = __library.get(b"expf\0").map(|sym| *sym);
        let __expf = __library.get(b"__expf\0").map(|sym| *sym);
        let frexpf = __library.get(b"frexpf\0").map(|sym| *sym);
        let __frexpf = __library.get(b"__frexpf\0").map(|sym| *sym);
        let ldexpf = __library.get(b"ldexpf\0").map(|sym| *sym);
        let __ldexpf = __library.get(b"__ldexpf\0").map(|sym| *sym);
        let logf = __library.get(b"logf\0").map(|sym| *sym);
        let __logf = __library.get(b"__logf\0").map(|sym| *sym);
        let log10f = __library.get(b"log10f\0").map(|sym| *sym);
        let __log10f = __library.get(b"__log10f\0").map(|sym| *sym);
        let modff = __library.get(b"modff\0").map(|sym| *sym);
        let __modff = __library.get(b"__modff\0").map(|sym| *sym);
        let expm1f = __library.get(b"expm1f\0").map(|sym| *sym);
        let __expm1f = __library.get(b"__expm1f\0").map(|sym| *sym);
        let log1pf = __library.get(b"log1pf\0").map(|sym| *sym);
        let __log1pf = __library.get(b"__log1pf\0").map(|sym| *sym);
        let logbf = __library.get(b"logbf\0").map(|sym| *sym);
        let __logbf = __library.get(b"__logbf\0").map(|sym| *sym);
        let exp2f = __library.get(b"exp2f\0").map(|sym| *sym);
        let __exp2f = __library.get(b"__exp2f\0").map(|sym| *sym);
        let log2f = __library.get(b"log2f\0").map(|sym| *sym);
        let __log2f = __library.get(b"__log2f\0").map(|sym| *sym);
        let powf = __library.get(b"powf\0").map(|sym| *sym);
        let __powf = __library.get(b"__powf\0").map(|sym| *sym);
        let sqrtf = __library.get(b"sqrtf\0").map(|sym| *sym);
        let __sqrtf = __library.get(b"__sqrtf\0").map(|sym| *sym);
        let hypotf = __library.get(b"hypotf\0").map(|sym| *sym);
        let __hypotf = __library.get(b"__hypotf\0").map(|sym| *sym);
        let cbrtf = __library.get(b"cbrtf\0").map(|sym| *sym);
        let __cbrtf = __library.get(b"__cbrtf\0").map(|sym| *sym);
        let ceilf = __library.get(b"ceilf\0").map(|sym| *sym);
        let __ceilf = __library.get(b"__ceilf\0").map(|sym| *sym);
        let fabsf = __library.get(b"fabsf\0").map(|sym| *sym);
        let __fabsf = __library.get(b"__fabsf\0").map(|sym| *sym);
        let floorf = __library.get(b"floorf\0").map(|sym| *sym);
        let __floorf = __library.get(b"__floorf\0").map(|sym| *sym);
        let fmodf = __library.get(b"fmodf\0").map(|sym| *sym);
        let __fmodf = __library.get(b"__fmodf\0").map(|sym| *sym);
        let isinff = __library.get(b"isinff\0").map(|sym| *sym);
        let finitef = __library.get(b"finitef\0").map(|sym| *sym);
        let dremf = __library.get(b"dremf\0").map(|sym| *sym);
        let __dremf = __library.get(b"__dremf\0").map(|sym| *sym);
        let significandf = __library.get(b"significandf\0").map(|sym| *sym);
        let __significandf = __library.get(b"__significandf\0").map(|sym| *sym);
        let copysignf = __library.get(b"copysignf\0").map(|sym| *sym);
        let __copysignf = __library.get(b"__copysignf\0").map(|sym| *sym);
        let nanf = __library.get(b"nanf\0").map(|sym| *sym);
        let __nanf = __library.get(b"__nanf\0").map(|sym| *sym);
        let isnanf = __library.get(b"isnanf\0").map(|sym| *sym);
        let j0f = __library.get(b"j0f\0").map(|sym| *sym);
        let __j0f = __library.get(b"__j0f\0").map(|sym| *sym);
        let j1f = __library.get(b"j1f\0").map(|sym| *sym);
        let __j1f = __library.get(b"__j1f\0").map(|sym| *sym);
        let jnf = __library.get(b"jnf\0").map(|sym| *sym);
        let __jnf = __library.get(b"__jnf\0").map(|sym| *sym);
        let y0f = __library.get(b"y0f\0").map(|sym| *sym);
        let __y0f = __library.get(b"__y0f\0").map(|sym| *sym);
        let y1f = __library.get(b"y1f\0").map(|sym| *sym);
        let __y1f = __library.get(b"__y1f\0").map(|sym| *sym);
        let ynf = __library.get(b"ynf\0").map(|sym| *sym);
        let __ynf = __library.get(b"__ynf\0").map(|sym| *sym);
        let erff = __library.get(b"erff\0").map(|sym| *sym);
        let __erff = __library.get(b"__erff\0").map(|sym| *sym);
        let erfcf = __library.get(b"erfcf\0").map(|sym| *sym);
        let __erfcf = __library.get(b"__erfcf\0").map(|sym| *sym);
        let lgammaf = __library.get(b"lgammaf\0").map(|sym| *sym);
        let __lgammaf = __library.get(b"__lgammaf\0").map(|sym| *sym);
        let tgammaf = __library.get(b"tgammaf\0").map(|sym| *sym);
        let __tgammaf = __library.get(b"__tgammaf\0").map(|sym| *sym);
        let gammaf = __library.get(b"gammaf\0").map(|sym| *sym);
        let __gammaf = __library.get(b"__gammaf\0").map(|sym| *sym);
        let lgammaf_r = __library.get(b"lgammaf_r\0").map(|sym| *sym);
        let __lgammaf_r = __library.get(b"__lgammaf_r\0").map(|sym| *sym);
        let rintf = __library.get(b"rintf\0").map(|sym| *sym);
        let __rintf = __library.get(b"__rintf\0").map(|sym| *sym);
        let nextafterf = __library.get(b"nextafterf\0").map(|sym| *sym);
        let __nextafterf = __library.get(b"__nextafterf\0").map(|sym| *sym);
        let nexttowardf = __library.get(b"nexttowardf\0").map(|sym| *sym);
        let __nexttowardf = __library.get(b"__nexttowardf\0").map(|sym| *sym);
        let remainderf = __library.get(b"remainderf\0").map(|sym| *sym);
        let __remainderf = __library.get(b"__remainderf\0").map(|sym| *sym);
        let scalbnf = __library.get(b"scalbnf\0").map(|sym| *sym);
        let __scalbnf = __library.get(b"__scalbnf\0").map(|sym| *sym);
        let ilogbf = __library.get(b"ilogbf\0").map(|sym| *sym);
        let __ilogbf = __library.get(b"__ilogbf\0").map(|sym| *sym);
        let scalblnf = __library.get(b"scalblnf\0").map(|sym| *sym);
        let __scalblnf = __library.get(b"__scalblnf\0").map(|sym| *sym);
        let nearbyintf = __library.get(b"nearbyintf\0").map(|sym| *sym);
        let __nearbyintf = __library.get(b"__nearbyintf\0").map(|sym| *sym);
        let roundf = __library.get(b"roundf\0").map(|sym| *sym);
        let __roundf = __library.get(b"__roundf\0").map(|sym| *sym);
        let truncf = __library.get(b"truncf\0").map(|sym| *sym);
        let __truncf = __library.get(b"__truncf\0").map(|sym| *sym);
        let remquof = __library.get(b"remquof\0").map(|sym| *sym);
        let __remquof = __library.get(b"__remquof\0").map(|sym| *sym);
        let lrintf = __library.get(b"lrintf\0").map(|sym| *sym);
        let __lrintf = __library.get(b"__lrintf\0").map(|sym| *sym);
        let llrintf = __library.get(b"llrintf\0").map(|sym| *sym);
        let __llrintf = __library.get(b"__llrintf\0").map(|sym| *sym);
        let lroundf = __library.get(b"lroundf\0").map(|sym| *sym);
        let __lroundf = __library.get(b"__lroundf\0").map(|sym| *sym);
        let llroundf = __library.get(b"llroundf\0").map(|sym| *sym);
        let __llroundf = __library.get(b"__llroundf\0").map(|sym| *sym);
        let fdimf = __library.get(b"fdimf\0").map(|sym| *sym);
        let __fdimf = __library.get(b"__fdimf\0").map(|sym| *sym);
        let fmaxf = __library.get(b"fmaxf\0").map(|sym| *sym);
        let __fmaxf = __library.get(b"__fmaxf\0").map(|sym| *sym);
        let fminf = __library.get(b"fminf\0").map(|sym| *sym);
        let __fminf = __library.get(b"__fminf\0").map(|sym| *sym);
        let fmaf = __library.get(b"fmaf\0").map(|sym| *sym);
        let __fmaf = __library.get(b"__fmaf\0").map(|sym| *sym);
        let scalbf = __library.get(b"scalbf\0").map(|sym| *sym);
        let __scalbf = __library.get(b"__scalbf\0").map(|sym| *sym);
        let __fpclassifyl = __library.get(b"__fpclassifyl\0").map(|sym| *sym);
        let __signbitl = __library.get(b"__signbitl\0").map(|sym| *sym);
        let __isinfl = __library.get(b"__isinfl\0").map(|sym| *sym);
        let __finitel = __library.get(b"__finitel\0").map(|sym| *sym);
        let __isnanl = __library.get(b"__isnanl\0").map(|sym| *sym);
        let __iseqsigl = __library.get(b"__iseqsigl\0").map(|sym| *sym);
        let __issignalingl = __library.get(b"__issignalingl\0").map(|sym| *sym);
        let acosl = __library.get(b"acosl\0").map(|sym| *sym);
        let __acosl = __library.get(b"__acosl\0").map(|sym| *sym);
        let asinl = __library.get(b"asinl\0").map(|sym| *sym);
        let __asinl = __library.get(b"__asinl\0").map(|sym| *sym);
        let atanl = __library.get(b"atanl\0").map(|sym| *sym);
        let __atanl = __library.get(b"__atanl\0").map(|sym| *sym);
        let atan2l = __library.get(b"atan2l\0").map(|sym| *sym);
        let __atan2l = __library.get(b"__atan2l\0").map(|sym| *sym);
        let cosl = __library.get(b"cosl\0").map(|sym| *sym);
        let __cosl = __library.get(b"__cosl\0").map(|sym| *sym);
        let sinl = __library.get(b"sinl\0").map(|sym| *sym);
        let __sinl = __library.get(b"__sinl\0").map(|sym| *sym);
        let tanl = __library.get(b"tanl\0").map(|sym| *sym);
        let __tanl = __library.get(b"__tanl\0").map(|sym| *sym);
        let coshl = __library.get(b"coshl\0").map(|sym| *sym);
        let __coshl = __library.get(b"__coshl\0").map(|sym| *sym);
        let sinhl = __library.get(b"sinhl\0").map(|sym| *sym);
        let __sinhl = __library.get(b"__sinhl\0").map(|sym| *sym);
        let tanhl = __library.get(b"tanhl\0").map(|sym| *sym);
        let __tanhl = __library.get(b"__tanhl\0").map(|sym| *sym);
        let acoshl = __library.get(b"acoshl\0").map(|sym| *sym);
        let __acoshl = __library.get(b"__acoshl\0").map(|sym| *sym);
        let asinhl = __library.get(b"asinhl\0").map(|sym| *sym);
        let __asinhl = __library.get(b"__asinhl\0").map(|sym| *sym);
        let atanhl = __library.get(b"atanhl\0").map(|sym| *sym);
        let __atanhl = __library.get(b"__atanhl\0").map(|sym| *sym);
        let expl = __library.get(b"expl\0").map(|sym| *sym);
        let __expl = __library.get(b"__expl\0").map(|sym| *sym);
        let frexpl = __library.get(b"frexpl\0").map(|sym| *sym);
        let __frexpl = __library.get(b"__frexpl\0").map(|sym| *sym);
        let ldexpl = __library.get(b"ldexpl\0").map(|sym| *sym);
        let __ldexpl = __library.get(b"__ldexpl\0").map(|sym| *sym);
        let logl = __library.get(b"logl\0").map(|sym| *sym);
        let __logl = __library.get(b"__logl\0").map(|sym| *sym);
        let log10l = __library.get(b"log10l\0").map(|sym| *sym);
        let __log10l = __library.get(b"__log10l\0").map(|sym| *sym);
        let modfl = __library.get(b"modfl\0").map(|sym| *sym);
        let __modfl = __library.get(b"__modfl\0").map(|sym| *sym);
        let expm1l = __library.get(b"expm1l\0").map(|sym| *sym);
        let __expm1l = __library.get(b"__expm1l\0").map(|sym| *sym);
        let log1pl = __library.get(b"log1pl\0").map(|sym| *sym);
        let __log1pl = __library.get(b"__log1pl\0").map(|sym| *sym);
        let logbl = __library.get(b"logbl\0").map(|sym| *sym);
        let __logbl = __library.get(b"__logbl\0").map(|sym| *sym);
        let exp2l = __library.get(b"exp2l\0").map(|sym| *sym);
        let __exp2l = __library.get(b"__exp2l\0").map(|sym| *sym);
        let log2l = __library.get(b"log2l\0").map(|sym| *sym);
        let __log2l = __library.get(b"__log2l\0").map(|sym| *sym);
        let powl = __library.get(b"powl\0").map(|sym| *sym);
        let __powl = __library.get(b"__powl\0").map(|sym| *sym);
        let sqrtl = __library.get(b"sqrtl\0").map(|sym| *sym);
        let __sqrtl = __library.get(b"__sqrtl\0").map(|sym| *sym);
        let hypotl = __library.get(b"hypotl\0").map(|sym| *sym);
        let __hypotl = __library.get(b"__hypotl\0").map(|sym| *sym);
        let cbrtl = __library.get(b"cbrtl\0").map(|sym| *sym);
        let __cbrtl = __library.get(b"__cbrtl\0").map(|sym| *sym);
        let ceill = __library.get(b"ceill\0").map(|sym| *sym);
        let __ceill = __library.get(b"__ceill\0").map(|sym| *sym);
        let fabsl = __library.get(b"fabsl\0").map(|sym| *sym);
        let __fabsl = __library.get(b"__fabsl\0").map(|sym| *sym);
        let floorl = __library.get(b"floorl\0").map(|sym| *sym);
        let __floorl = __library.get(b"__floorl\0").map(|sym| *sym);
        let fmodl = __library.get(b"fmodl\0").map(|sym| *sym);
        let __fmodl = __library.get(b"__fmodl\0").map(|sym| *sym);
        let isinfl = __library.get(b"isinfl\0").map(|sym| *sym);
        let finitel = __library.get(b"finitel\0").map(|sym| *sym);
        let dreml = __library.get(b"dreml\0").map(|sym| *sym);
        let __dreml = __library.get(b"__dreml\0").map(|sym| *sym);
        let significandl = __library.get(b"significandl\0").map(|sym| *sym);
        let __significandl = __library.get(b"__significandl\0").map(|sym| *sym);
        let copysignl = __library.get(b"copysignl\0").map(|sym| *sym);
        let __copysignl = __library.get(b"__copysignl\0").map(|sym| *sym);
        let nanl = __library.get(b"nanl\0").map(|sym| *sym);
        let __nanl = __library.get(b"__nanl\0").map(|sym| *sym);
        let isnanl = __library.get(b"isnanl\0").map(|sym| *sym);
        let j0l = __library.get(b"j0l\0").map(|sym| *sym);
        let __j0l = __library.get(b"__j0l\0").map(|sym| *sym);
        let j1l = __library.get(b"j1l\0").map(|sym| *sym);
        let __j1l = __library.get(b"__j1l\0").map(|sym| *sym);
        let jnl = __library.get(b"jnl\0").map(|sym| *sym);
        let __jnl = __library.get(b"__jnl\0").map(|sym| *sym);
        let y0l = __library.get(b"y0l\0").map(|sym| *sym);
        let __y0l = __library.get(b"__y0l\0").map(|sym| *sym);
        let y1l = __library.get(b"y1l\0").map(|sym| *sym);
        let __y1l = __library.get(b"__y1l\0").map(|sym| *sym);
        let ynl = __library.get(b"ynl\0").map(|sym| *sym);
        let __ynl = __library.get(b"__ynl\0").map(|sym| *sym);
        let erfl = __library.get(b"erfl\0").map(|sym| *sym);
        let __erfl = __library.get(b"__erfl\0").map(|sym| *sym);
        let erfcl = __library.get(b"erfcl\0").map(|sym| *sym);
        let __erfcl = __library.get(b"__erfcl\0").map(|sym| *sym);
        let lgammal = __library.get(b"lgammal\0").map(|sym| *sym);
        let __lgammal = __library.get(b"__lgammal\0").map(|sym| *sym);
        let tgammal = __library.get(b"tgammal\0").map(|sym| *sym);
        let __tgammal = __library.get(b"__tgammal\0").map(|sym| *sym);
        let gammal = __library.get(b"gammal\0").map(|sym| *sym);
        let __gammal = __library.get(b"__gammal\0").map(|sym| *sym);
        let lgammal_r = __library.get(b"lgammal_r\0").map(|sym| *sym);
        let __lgammal_r = __library.get(b"__lgammal_r\0").map(|sym| *sym);
        let rintl = __library.get(b"rintl\0").map(|sym| *sym);
        let __rintl = __library.get(b"__rintl\0").map(|sym| *sym);
        let nextafterl = __library.get(b"nextafterl\0").map(|sym| *sym);
        let __nextafterl = __library.get(b"__nextafterl\0").map(|sym| *sym);
        let nexttowardl = __library.get(b"nexttowardl\0").map(|sym| *sym);
        let __nexttowardl = __library.get(b"__nexttowardl\0").map(|sym| *sym);
        let remainderl = __library.get(b"remainderl\0").map(|sym| *sym);
        let __remainderl = __library.get(b"__remainderl\0").map(|sym| *sym);
        let scalbnl = __library.get(b"scalbnl\0").map(|sym| *sym);
        let __scalbnl = __library.get(b"__scalbnl\0").map(|sym| *sym);
        let ilogbl = __library.get(b"ilogbl\0").map(|sym| *sym);
        let __ilogbl = __library.get(b"__ilogbl\0").map(|sym| *sym);
        let scalblnl = __library.get(b"scalblnl\0").map(|sym| *sym);
        let __scalblnl = __library.get(b"__scalblnl\0").map(|sym| *sym);
        let nearbyintl = __library.get(b"nearbyintl\0").map(|sym| *sym);
        let __nearbyintl = __library.get(b"__nearbyintl\0").map(|sym| *sym);
        let roundl = __library.get(b"roundl\0").map(|sym| *sym);
        let __roundl = __library.get(b"__roundl\0").map(|sym| *sym);
        let truncl = __library.get(b"truncl\0").map(|sym| *sym);
        let __truncl = __library.get(b"__truncl\0").map(|sym| *sym);
        let remquol = __library.get(b"remquol\0").map(|sym| *sym);
        let __remquol = __library.get(b"__remquol\0").map(|sym| *sym);
        let lrintl = __library.get(b"lrintl\0").map(|sym| *sym);
        let __lrintl = __library.get(b"__lrintl\0").map(|sym| *sym);
        let llrintl = __library.get(b"llrintl\0").map(|sym| *sym);
        let __llrintl = __library.get(b"__llrintl\0").map(|sym| *sym);
        let lroundl = __library.get(b"lroundl\0").map(|sym| *sym);
        let __lroundl = __library.get(b"__lroundl\0").map(|sym| *sym);
        let llroundl = __library.get(b"llroundl\0").map(|sym| *sym);
        let __llroundl = __library.get(b"__llroundl\0").map(|sym| *sym);
        let fdiml = __library.get(b"fdiml\0").map(|sym| *sym);
        let __fdiml = __library.get(b"__fdiml\0").map(|sym| *sym);
        let fmaxl = __library.get(b"fmaxl\0").map(|sym| *sym);
        let __fmaxl = __library.get(b"__fmaxl\0").map(|sym| *sym);
        let fminl = __library.get(b"fminl\0").map(|sym| *sym);
        let __fminl = __library.get(b"__fminl\0").map(|sym| *sym);
        let fmal = __library.get(b"fmal\0").map(|sym| *sym);
        let __fmal = __library.get(b"__fmal\0").map(|sym| *sym);
        let scalbl = __library.get(b"scalbl\0").map(|sym| *sym);
        let __scalbl = __library.get(b"__scalbl\0").map(|sym| *sym);
        let remove = __library.get(b"remove\0").map(|sym| *sym);
        let rename = __library.get(b"rename\0").map(|sym| *sym);
        let renameat = __library.get(b"renameat\0").map(|sym| *sym);
        let fclose = __library.get(b"fclose\0").map(|sym| *sym);
        let tmpfile = __library.get(b"tmpfile\0").map(|sym| *sym);
        let tmpnam = __library.get(b"tmpnam\0").map(|sym| *sym);
        let tmpnam_r = __library.get(b"tmpnam_r\0").map(|sym| *sym);
        let tempnam = __library.get(b"tempnam\0").map(|sym| *sym);
        let fflush = __library.get(b"fflush\0").map(|sym| *sym);
        let fflush_unlocked = __library.get(b"fflush_unlocked\0").map(|sym| *sym);
        let fopen = __library.get(b"fopen\0").map(|sym| *sym);
        let freopen = __library.get(b"freopen\0").map(|sym| *sym);
        let fdopen = __library.get(b"fdopen\0").map(|sym| *sym);
        let fmemopen = __library.get(b"fmemopen\0").map(|sym| *sym);
        let open_memstream = __library.get(b"open_memstream\0").map(|sym| *sym);
        let setbuf = __library.get(b"setbuf\0").map(|sym| *sym);
        let setvbuf = __library.get(b"setvbuf\0").map(|sym| *sym);
        let setbuffer = __library.get(b"setbuffer\0").map(|sym| *sym);
        let setlinebuf = __library.get(b"setlinebuf\0").map(|sym| *sym);
        let fprintf = __library.get(b"fprintf\0").map(|sym| *sym);
        let printf = __library.get(b"printf\0").map(|sym| *sym);
        let sprintf = __library.get(b"sprintf\0").map(|sym| *sym);
        let vfprintf = __library.get(b"vfprintf\0").map(|sym| *sym);
        let vprintf = __library.get(b"vprintf\0").map(|sym| *sym);
        let vsprintf = __library.get(b"vsprintf\0").map(|sym| *sym);
        let snprintf = __library.get(b"snprintf\0").map(|sym| *sym);
        let vsnprintf = __library.get(b"vsnprintf\0").map(|sym| *sym);
        let vdprintf = __library.get(b"vdprintf\0").map(|sym| *sym);
        let dprintf = __library.get(b"dprintf\0").map(|sym| *sym);
        let fscanf = __library.get(b"fscanf\0").map(|sym| *sym);
        let scanf = __library.get(b"scanf\0").map(|sym| *sym);
        let sscanf = __library.get(b"sscanf\0").map(|sym| *sym);
        let fscanf1 = __library.get(b"fscanf1\0").map(|sym| *sym);
        let scanf1 = __library.get(b"scanf1\0").map(|sym| *sym);
        let sscanf1 = __library.get(b"sscanf1\0").map(|sym| *sym);
        let vfscanf = __library.get(b"vfscanf\0").map(|sym| *sym);
        let vscanf = __library.get(b"vscanf\0").map(|sym| *sym);
        let vsscanf = __library.get(b"vsscanf\0").map(|sym| *sym);
        let vfscanf1 = __library.get(b"vfscanf1\0").map(|sym| *sym);
        let vscanf1 = __library.get(b"vscanf1\0").map(|sym| *sym);
        let vsscanf1 = __library.get(b"vsscanf1\0").map(|sym| *sym);
        let fgetc = __library.get(b"fgetc\0").map(|sym| *sym);
        let getc = __library.get(b"getc\0").map(|sym| *sym);
        let getchar = __library.get(b"getchar\0").map(|sym| *sym);
        let getc_unlocked = __library.get(b"getc_unlocked\0").map(|sym| *sym);
        let getchar_unlocked = __library.get(b"getchar_unlocked\0").map(|sym| *sym);
        let fgetc_unlocked = __library.get(b"fgetc_unlocked\0").map(|sym| *sym);
        let fputc = __library.get(b"fputc\0").map(|sym| *sym);
        let putc = __library.get(b"putc\0").map(|sym| *sym);
        let putchar = __library.get(b"putchar\0").map(|sym| *sym);
        let fputc_unlocked = __library.get(b"fputc_unlocked\0").map(|sym| *sym);
        let putc_unlocked = __library.get(b"putc_unlocked\0").map(|sym| *sym);
        let putchar_unlocked = __library.get(b"putchar_unlocked\0").map(|sym| *sym);
        let getw = __library.get(b"getw\0").map(|sym| *sym);
        let putw = __library.get(b"putw\0").map(|sym| *sym);
        let fgets = __library.get(b"fgets\0").map(|sym| *sym);
        let __getdelim = __library.get(b"__getdelim\0").map(|sym| *sym);
        let getdelim = __library.get(b"getdelim\0").map(|sym| *sym);
        let getline = __library.get(b"getline\0").map(|sym| *sym);
        let fputs = __library.get(b"fputs\0").map(|sym| *sym);
        let puts = __library.get(b"puts\0").map(|sym| *sym);
        let ungetc = __library.get(b"ungetc\0").map(|sym| *sym);
        let fread = __library.get(b"fread\0").map(|sym| *sym);
        let fwrite = __library.get(b"fwrite\0").map(|sym| *sym);
        let fread_unlocked = __library.get(b"fread_unlocked\0").map(|sym| *sym);
        let fwrite_unlocked = __library.get(b"fwrite_unlocked\0").map(|sym| *sym);
        let fseek = __library.get(b"fseek\0").map(|sym| *sym);
        let ftell = __library.get(b"ftell\0").map(|sym| *sym);
        let rewind = __library.get(b"rewind\0").map(|sym| *sym);
        let fseeko = __library.get(b"fseeko\0").map(|sym| *sym);
        let ftello = __library.get(b"ftello\0").map(|sym| *sym);
        let fgetpos = __library.get(b"fgetpos\0").map(|sym| *sym);
        let fsetpos = __library.get(b"fsetpos\0").map(|sym| *sym);
        let clearerr = __library.get(b"clearerr\0").map(|sym| *sym);
        let feof = __library.get(b"feof\0").map(|sym| *sym);
        let ferror = __library.get(b"ferror\0").map(|sym| *sym);
        let clearerr_unlocked = __library.get(b"clearerr_unlocked\0").map(|sym| *sym);
        let feof_unlocked = __library.get(b"feof_unlocked\0").map(|sym| *sym);
        let ferror_unlocked = __library.get(b"ferror_unlocked\0").map(|sym| *sym);
        let perror = __library.get(b"perror\0").map(|sym| *sym);
        let fileno = __library.get(b"fileno\0").map(|sym| *sym);
        let fileno_unlocked = __library.get(b"fileno_unlocked\0").map(|sym| *sym);
        let pclose = __library.get(b"pclose\0").map(|sym| *sym);
        let popen = __library.get(b"popen\0").map(|sym| *sym);
        let ctermid = __library.get(b"ctermid\0").map(|sym| *sym);
        let flockfile = __library.get(b"flockfile\0").map(|sym| *sym);
        let ftrylockfile = __library.get(b"ftrylockfile\0").map(|sym| *sym);
        let funlockfile = __library.get(b"funlockfile\0").map(|sym| *sym);
        let __uflow = __library.get(b"__uflow\0").map(|sym| *sym);
        let __overflow = __library.get(b"__overflow\0").map(|sym| *sym);
        let select = __library.get(b"select\0").map(|sym| *sym);
        let pselect = __library.get(b"pselect\0").map(|sym| *sym);
        let access = __library.get(b"access\0").map(|sym| *sym);
        let faccessat = __library.get(b"faccessat\0").map(|sym| *sym);
        let lseek = __library.get(b"lseek\0").map(|sym| *sym);
        let close = __library.get(b"close\0").map(|sym| *sym);
        let closefrom = __library.get(b"closefrom\0").map(|sym| *sym);
        let read = __library.get(b"read\0").map(|sym| *sym);
        let write = __library.get(b"write\0").map(|sym| *sym);
        let pread = __library.get(b"pread\0").map(|sym| *sym);
        let pwrite = __library.get(b"pwrite\0").map(|sym| *sym);
        let pipe = __library.get(b"pipe\0").map(|sym| *sym);
        let alarm = __library.get(b"alarm\0").map(|sym| *sym);
        let sleep = __library.get(b"sleep\0").map(|sym| *sym);
        let ualarm = __library.get(b"ualarm\0").map(|sym| *sym);
        let usleep = __library.get(b"usleep\0").map(|sym| *sym);
        let pause = __library.get(b"pause\0").map(|sym| *sym);
        let chown = __library.get(b"chown\0").map(|sym| *sym);
        let fchown = __library.get(b"fchown\0").map(|sym| *sym);
        let lchown = __library.get(b"lchown\0").map(|sym| *sym);
        let fchownat = __library.get(b"fchownat\0").map(|sym| *sym);
        let chdir = __library.get(b"chdir\0").map(|sym| *sym);
        let fchdir = __library.get(b"fchdir\0").map(|sym| *sym);
        let getcwd = __library.get(b"getcwd\0").map(|sym| *sym);
        let getwd = __library.get(b"getwd\0").map(|sym| *sym);
        let dup = __library.get(b"dup\0").map(|sym| *sym);
        let dup2 = __library.get(b"dup2\0").map(|sym| *sym);
        let execve = __library.get(b"execve\0").map(|sym| *sym);
        let fexecve = __library.get(b"fexecve\0").map(|sym| *sym);
        let execv = __library.get(b"execv\0").map(|sym| *sym);
        let execle = __library.get(b"execle\0").map(|sym| *sym);
        let execl = __library.get(b"execl\0").map(|sym| *sym);
        let execvp = __library.get(b"execvp\0").map(|sym| *sym);
        let execlp = __library.get(b"execlp\0").map(|sym| *sym);
        let nice = __library.get(b"nice\0").map(|sym| *sym);
        let _exit = __library.get(b"_exit\0").map(|sym| *sym);
        let pathconf = __library.get(b"pathconf\0").map(|sym| *sym);
        let fpathconf = __library.get(b"fpathconf\0").map(|sym| *sym);
        let sysconf = __library.get(b"sysconf\0").map(|sym| *sym);
        let confstr = __library.get(b"confstr\0").map(|sym| *sym);
        let getpid = __library.get(b"getpid\0").map(|sym| *sym);
        let getppid = __library.get(b"getppid\0").map(|sym| *sym);
        let getpgrp = __library.get(b"getpgrp\0").map(|sym| *sym);
        let __getpgid = __library.get(b"__getpgid\0").map(|sym| *sym);
        let getpgid = __library.get(b"getpgid\0").map(|sym| *sym);
        let setpgid = __library.get(b"setpgid\0").map(|sym| *sym);
        let setpgrp = __library.get(b"setpgrp\0").map(|sym| *sym);
        let setsid = __library.get(b"setsid\0").map(|sym| *sym);
        let getsid = __library.get(b"getsid\0").map(|sym| *sym);
        let getuid = __library.get(b"getuid\0").map(|sym| *sym);
        let geteuid = __library.get(b"geteuid\0").map(|sym| *sym);
        let getgid = __library.get(b"getgid\0").map(|sym| *sym);
        let getegid = __library.get(b"getegid\0").map(|sym| *sym);
        let getgroups = __library.get(b"getgroups\0").map(|sym| *sym);
        let setuid = __library.get(b"setuid\0").map(|sym| *sym);
        let setreuid = __library.get(b"setreuid\0").map(|sym| *sym);
        let seteuid = __library.get(b"seteuid\0").map(|sym| *sym);
        let setgid = __library.get(b"setgid\0").map(|sym| *sym);
        let setregid = __library.get(b"setregid\0").map(|sym| *sym);
        let setegid = __library.get(b"setegid\0").map(|sym| *sym);
        let fork = __library.get(b"fork\0").map(|sym| *sym);
        let vfork = __library.get(b"vfork\0").map(|sym| *sym);
        let ttyname = __library.get(b"ttyname\0").map(|sym| *sym);
        let ttyname_r = __library.get(b"ttyname_r\0").map(|sym| *sym);
        let isatty = __library.get(b"isatty\0").map(|sym| *sym);
        let ttyslot = __library.get(b"ttyslot\0").map(|sym| *sym);
        let link = __library.get(b"link\0").map(|sym| *sym);
        let linkat = __library.get(b"linkat\0").map(|sym| *sym);
        let symlink = __library.get(b"symlink\0").map(|sym| *sym);
        let readlink = __library.get(b"readlink\0").map(|sym| *sym);
        let symlinkat = __library.get(b"symlinkat\0").map(|sym| *sym);
        let readlinkat = __library.get(b"readlinkat\0").map(|sym| *sym);
        let unlink = __library.get(b"unlink\0").map(|sym| *sym);
        let unlinkat = __library.get(b"unlinkat\0").map(|sym| *sym);
        let rmdir = __library.get(b"rmdir\0").map(|sym| *sym);
        let tcgetpgrp = __library.get(b"tcgetpgrp\0").map(|sym| *sym);
        let tcsetpgrp = __library.get(b"tcsetpgrp\0").map(|sym| *sym);
        let getlogin = __library.get(b"getlogin\0").map(|sym| *sym);
        let getlogin_r = __library.get(b"getlogin_r\0").map(|sym| *sym);
        let setlogin = __library.get(b"setlogin\0").map(|sym| *sym);
        let getopt = __library.get(b"getopt\0").map(|sym| *sym);
        let gethostname = __library.get(b"gethostname\0").map(|sym| *sym);
        let sethostname = __library.get(b"sethostname\0").map(|sym| *sym);
        let sethostid = __library.get(b"sethostid\0").map(|sym| *sym);
        let getdomainname = __library.get(b"getdomainname\0").map(|sym| *sym);
        let setdomainname = __library.get(b"setdomainname\0").map(|sym| *sym);
        let vhangup = __library.get(b"vhangup\0").map(|sym| *sym);
        let revoke = __library.get(b"revoke\0").map(|sym| *sym);
        let profil = __library.get(b"profil\0").map(|sym| *sym);
        let acct = __library.get(b"acct\0").map(|sym| *sym);
        let getusershell = __library.get(b"getusershell\0").map(|sym| *sym);
        let endusershell = __library.get(b"endusershell\0").map(|sym| *sym);
        let setusershell = __library.get(b"setusershell\0").map(|sym| *sym);
        let daemon = __library.get(b"daemon\0").map(|sym| *sym);
        let chroot = __library.get(b"chroot\0").map(|sym| *sym);
        let getpass = __library.get(b"getpass\0").map(|sym| *sym);
        let fsync = __library.get(b"fsync\0").map(|sym| *sym);
        let gethostid = __library.get(b"gethostid\0").map(|sym| *sym);
        let sync = __library.get(b"sync\0").map(|sym| *sym);
        let getpagesize = __library.get(b"getpagesize\0").map(|sym| *sym);
        let getdtablesize = __library.get(b"getdtablesize\0").map(|sym| *sym);
        let truncate = __library.get(b"truncate\0").map(|sym| *sym);
        let ftruncate = __library.get(b"ftruncate\0").map(|sym| *sym);
        let brk = __library.get(b"brk\0").map(|sym| *sym);
        let sbrk = __library.get(b"sbrk\0").map(|sym| *sym);
        let syscall = __library.get(b"syscall\0").map(|sym| *sym);
        let lockf = __library.get(b"lockf\0").map(|sym| *sym);
        let fdatasync = __library.get(b"fdatasync\0").map(|sym| *sym);
        let crypt = __library.get(b"crypt\0").map(|sym| *sym);
        let getentropy = __library.get(b"getentropy\0").map(|sym| *sym);
        let __ctype_get_mb_cur_max = __library.get(b"__ctype_get_mb_cur_max\0").map(|sym| *sym);
        let atof = __library.get(b"atof\0").map(|sym| *sym);
        let atoi = __library.get(b"atoi\0").map(|sym| *sym);
        let atol = __library.get(b"atol\0").map(|sym| *sym);
        let atoll = __library.get(b"atoll\0").map(|sym| *sym);
        let strtod = __library.get(b"strtod\0").map(|sym| *sym);
        let strtof = __library.get(b"strtof\0").map(|sym| *sym);
        let strtold = __library.get(b"strtold\0").map(|sym| *sym);
        let strtol = __library.get(b"strtol\0").map(|sym| *sym);
        let strtoul = __library.get(b"strtoul\0").map(|sym| *sym);
        let strtoq = __library.get(b"strtoq\0").map(|sym| *sym);
        let strtouq = __library.get(b"strtouq\0").map(|sym| *sym);
        let strtoll = __library.get(b"strtoll\0").map(|sym| *sym);
        let strtoull = __library.get(b"strtoull\0").map(|sym| *sym);
        let l64a = __library.get(b"l64a\0").map(|sym| *sym);
        let a64l = __library.get(b"a64l\0").map(|sym| *sym);
        let random = __library.get(b"random\0").map(|sym| *sym);
        let srandom = __library.get(b"srandom\0").map(|sym| *sym);
        let initstate = __library.get(b"initstate\0").map(|sym| *sym);
        let setstate = __library.get(b"setstate\0").map(|sym| *sym);
        let random_r = __library.get(b"random_r\0").map(|sym| *sym);
        let srandom_r = __library.get(b"srandom_r\0").map(|sym| *sym);
        let initstate_r = __library.get(b"initstate_r\0").map(|sym| *sym);
        let setstate_r = __library.get(b"setstate_r\0").map(|sym| *sym);
        let rand = __library.get(b"rand\0").map(|sym| *sym);
        let srand = __library.get(b"srand\0").map(|sym| *sym);
        let rand_r = __library.get(b"rand_r\0").map(|sym| *sym);
        let drand48 = __library.get(b"drand48\0").map(|sym| *sym);
        let erand48 = __library.get(b"erand48\0").map(|sym| *sym);
        let lrand48 = __library.get(b"lrand48\0").map(|sym| *sym);
        let nrand48 = __library.get(b"nrand48\0").map(|sym| *sym);
        let mrand48 = __library.get(b"mrand48\0").map(|sym| *sym);
        let jrand48 = __library.get(b"jrand48\0").map(|sym| *sym);
        let srand48 = __library.get(b"srand48\0").map(|sym| *sym);
        let seed48 = __library.get(b"seed48\0").map(|sym| *sym);
        let lcong48 = __library.get(b"lcong48\0").map(|sym| *sym);
        let drand48_r = __library.get(b"drand48_r\0").map(|sym| *sym);
        let erand48_r = __library.get(b"erand48_r\0").map(|sym| *sym);
        let lrand48_r = __library.get(b"lrand48_r\0").map(|sym| *sym);
        let nrand48_r = __library.get(b"nrand48_r\0").map(|sym| *sym);
        let mrand48_r = __library.get(b"mrand48_r\0").map(|sym| *sym);
        let jrand48_r = __library.get(b"jrand48_r\0").map(|sym| *sym);
        let srand48_r = __library.get(b"srand48_r\0").map(|sym| *sym);
        let seed48_r = __library.get(b"seed48_r\0").map(|sym| *sym);
        let lcong48_r = __library.get(b"lcong48_r\0").map(|sym| *sym);
        let malloc = __library.get(b"malloc\0").map(|sym| *sym);
        let calloc = __library.get(b"calloc\0").map(|sym| *sym);
        let realloc = __library.get(b"realloc\0").map(|sym| *sym);
        let free = __library.get(b"free\0").map(|sym| *sym);
        let reallocarray = __library.get(b"reallocarray\0").map(|sym| *sym);
        let alloca = __library.get(b"alloca\0").map(|sym| *sym);
        let valloc = __library.get(b"valloc\0").map(|sym| *sym);
        let posix_memalign = __library.get(b"posix_memalign\0").map(|sym| *sym);
        let aligned_alloc = __library.get(b"aligned_alloc\0").map(|sym| *sym);
        let abort = __library.get(b"abort\0").map(|sym| *sym);
        let atexit = __library.get(b"atexit\0").map(|sym| *sym);
        let at_quick_exit = __library.get(b"at_quick_exit\0").map(|sym| *sym);
        let on_exit = __library.get(b"on_exit\0").map(|sym| *sym);
        let exit = __library.get(b"exit\0").map(|sym| *sym);
        let quick_exit = __library.get(b"quick_exit\0").map(|sym| *sym);
        let _Exit = __library.get(b"_Exit\0").map(|sym| *sym);
        let getenv = __library.get(b"getenv\0").map(|sym| *sym);
        let putenv = __library.get(b"putenv\0").map(|sym| *sym);
        let setenv = __library.get(b"setenv\0").map(|sym| *sym);
        let unsetenv = __library.get(b"unsetenv\0").map(|sym| *sym);
        let clearenv = __library.get(b"clearenv\0").map(|sym| *sym);
        let mktemp = __library.get(b"mktemp\0").map(|sym| *sym);
        let mkstemp = __library.get(b"mkstemp\0").map(|sym| *sym);
        let mkstemps = __library.get(b"mkstemps\0").map(|sym| *sym);
        let mkdtemp = __library.get(b"mkdtemp\0").map(|sym| *sym);
        let system = __library.get(b"system\0").map(|sym| *sym);
        let realpath = __library.get(b"realpath\0").map(|sym| *sym);
        let bsearch = __library.get(b"bsearch\0").map(|sym| *sym);
        let qsort = __library.get(b"qsort\0").map(|sym| *sym);
        let abs = __library.get(b"abs\0").map(|sym| *sym);
        let labs = __library.get(b"labs\0").map(|sym| *sym);
        let llabs = __library.get(b"llabs\0").map(|sym| *sym);
        let div = __library.get(b"div\0").map(|sym| *sym);
        let ldiv = __library.get(b"ldiv\0").map(|sym| *sym);
        let lldiv = __library.get(b"lldiv\0").map(|sym| *sym);
        let ecvt = __library.get(b"ecvt\0").map(|sym| *sym);
        let fcvt = __library.get(b"fcvt\0").map(|sym| *sym);
        let gcvt = __library.get(b"gcvt\0").map(|sym| *sym);
        let qecvt = __library.get(b"qecvt\0").map(|sym| *sym);
        let qfcvt = __library.get(b"qfcvt\0").map(|sym| *sym);
        let qgcvt = __library.get(b"qgcvt\0").map(|sym| *sym);
        let ecvt_r = __library.get(b"ecvt_r\0").map(|sym| *sym);
        let fcvt_r = __library.get(b"fcvt_r\0").map(|sym| *sym);
        let qecvt_r = __library.get(b"qecvt_r\0").map(|sym| *sym);
        let qfcvt_r = __library.get(b"qfcvt_r\0").map(|sym| *sym);
        let mblen = __library.get(b"mblen\0").map(|sym| *sym);
        let mbtowc = __library.get(b"mbtowc\0").map(|sym| *sym);
        let wctomb = __library.get(b"wctomb\0").map(|sym| *sym);
        let mbstowcs = __library.get(b"mbstowcs\0").map(|sym| *sym);
        let wcstombs = __library.get(b"wcstombs\0").map(|sym| *sym);
        let rpmatch = __library.get(b"rpmatch\0").map(|sym| *sym);
        let getsubopt = __library.get(b"getsubopt\0").map(|sym| *sym);
        let getloadavg = __library.get(b"getloadavg\0").map(|sym| *sym);
        let memcpy = __library.get(b"memcpy\0").map(|sym| *sym);
        let memmove = __library.get(b"memmove\0").map(|sym| *sym);
        let memccpy = __library.get(b"memccpy\0").map(|sym| *sym);
        let memset = __library.get(b"memset\0").map(|sym| *sym);
        let memcmp = __library.get(b"memcmp\0").map(|sym| *sym);
        let memchr = __library.get(b"memchr\0").map(|sym| *sym);
        let strcpy = __library.get(b"strcpy\0").map(|sym| *sym);
        let strncpy = __library.get(b"strncpy\0").map(|sym| *sym);
        let strcat = __library.get(b"strcat\0").map(|sym| *sym);
        let strncat = __library.get(b"strncat\0").map(|sym| *sym);
        let strcmp = __library.get(b"strcmp\0").map(|sym| *sym);
        let strncmp = __library.get(b"strncmp\0").map(|sym| *sym);
        let strcoll = __library.get(b"strcoll\0").map(|sym| *sym);
        let strxfrm = __library.get(b"strxfrm\0").map(|sym| *sym);
        let strcoll_l = __library.get(b"strcoll_l\0").map(|sym| *sym);
        let strxfrm_l = __library.get(b"strxfrm_l\0").map(|sym| *sym);
        let strdup = __library.get(b"strdup\0").map(|sym| *sym);
        let strndup = __library.get(b"strndup\0").map(|sym| *sym);
        let strchr = __library.get(b"strchr\0").map(|sym| *sym);
        let strrchr = __library.get(b"strrchr\0").map(|sym| *sym);
        let strcspn = __library.get(b"strcspn\0").map(|sym| *sym);
        let strspn = __library.get(b"strspn\0").map(|sym| *sym);
        let strpbrk = __library.get(b"strpbrk\0").map(|sym| *sym);
        let strstr = __library.get(b"strstr\0").map(|sym| *sym);
        let strtok = __library.get(b"strtok\0").map(|sym| *sym);
        let __strtok_r = __library.get(b"__strtok_r\0").map(|sym| *sym);
        let strtok_r = __library.get(b"strtok_r\0").map(|sym| *sym);
        let strlen = __library.get(b"strlen\0").map(|sym| *sym);
        let strnlen = __library.get(b"strnlen\0").map(|sym| *sym);
        let strerror = __library.get(b"strerror\0").map(|sym| *sym);
        let strerror_r = __library.get(b"strerror_r\0").map(|sym| *sym);
        let strerror_l = __library.get(b"strerror_l\0").map(|sym| *sym);
        let bcmp = __library.get(b"bcmp\0").map(|sym| *sym);
        let bcopy = __library.get(b"bcopy\0").map(|sym| *sym);
        let bzero = __library.get(b"bzero\0").map(|sym| *sym);
        let index = __library.get(b"index\0").map(|sym| *sym);
        let rindex = __library.get(b"rindex\0").map(|sym| *sym);
        let ffs = __library.get(b"ffs\0").map(|sym| *sym);
        let ffsl = __library.get(b"ffsl\0").map(|sym| *sym);
        let ffsll = __library.get(b"ffsll\0").map(|sym| *sym);
        let strcasecmp = __library.get(b"strcasecmp\0").map(|sym| *sym);
        let strncasecmp = __library.get(b"strncasecmp\0").map(|sym| *sym);
        let strcasecmp_l = __library.get(b"strcasecmp_l\0").map(|sym| *sym);
        let strncasecmp_l = __library.get(b"strncasecmp_l\0").map(|sym| *sym);
        let explicit_bzero = __library.get(b"explicit_bzero\0").map(|sym| *sym);
        let strsep = __library.get(b"strsep\0").map(|sym| *sym);
        let strsignal = __library.get(b"strsignal\0").map(|sym| *sym);
        let __stpcpy = __library.get(b"__stpcpy\0").map(|sym| *sym);
        let stpcpy = __library.get(b"stpcpy\0").map(|sym| *sym);
        let __stpncpy = __library.get(b"__stpncpy\0").map(|sym| *sym);
        let stpncpy = __library.get(b"stpncpy\0").map(|sym| *sym);
        let __errno_location = __library.get(b"__errno_location\0").map(|sym| *sym);
        let __assert_fail = __library.get(b"__assert_fail\0").map(|sym| *sym);
        let __assert_perror_fail = __library.get(b"__assert_perror_fail\0").map(|sym| *sym);
        let __assert = __library.get(b"__assert\0").map(|sym| *sym);
        let imaxabs = __library.get(b"imaxabs\0").map(|sym| *sym);
        let imaxdiv = __library.get(b"imaxdiv\0").map(|sym| *sym);
        let strtoimax = __library.get(b"strtoimax\0").map(|sym| *sym);
        let strtoumax = __library.get(b"strtoumax\0").map(|sym| *sym);
        let wcstoimax = __library.get(b"wcstoimax\0").map(|sym| *sym);
        let wcstoumax = __library.get(b"wcstoumax\0").map(|sym| *sym);
        let hash_create = __library.get(b"hash_create\0").map(|sym| *sym);
        let hash_insert = __library.get(b"hash_insert\0").map(|sym| *sym);
        let hash_remove = __library.get(b"hash_remove\0").map(|sym| *sym);
        let hash_lookup = __library.get(b"hash_lookup\0").map(|sym| *sym);
        let str_list_add = __library.get(b"str_list_add\0").map(|sym| *sym);
        let cstr_list_add = __library.get(b"cstr_list_add\0").map(|sym| *sym);
        let kpathsea_new = __library.get(b"kpathsea_new\0").map(|sym| *sym);
        let kpathsea_finish = __library.get(b"kpathsea_finish\0").map(|sym| *sym);
        let kpse_fopen_trace = __library.get(b"kpse_fopen_trace\0").map(|sym| *sym);
        let kpse_fclose_trace = __library.get(b"kpse_fclose_trace\0").map(|sym| *sym);
        let concat = __library.get(b"concat\0").map(|sym| *sym);
        let concat3 = __library.get(b"concat3\0").map(|sym| *sym);
        let xstrdup = __library.get(b"xstrdup\0").map(|sym| *sym);
        let uppercasify = __library.get(b"uppercasify\0").map(|sym| *sym);
        let atou = __library.get(b"atou\0").map(|sym| *sym);
        let same_file_p = __library.get(b"same_file_p\0").map(|sym| *sym);
        let xbasename = __library.get(b"xbasename\0").map(|sym| *sym);
        let xdirname = __library.get(b"xdirname\0").map(|sym| *sym);
        let find_suffix = __library.get(b"find_suffix\0").map(|sym| *sym);
        let remove_suffix = __library.get(b"remove_suffix\0").map(|sym| *sym);
        let make_suffix = __library.get(b"make_suffix\0").map(|sym| *sym);
        let make_prefix = __library.get(b"make_prefix\0").map(|sym| *sym);
        let extend_filename = __library.get(b"extend_filename\0").map(|sym| *sym);
        let kpathsea_xputenv = __library.get(b"kpathsea_xputenv\0").map(|sym| *sym);
        let kpathsea_xputenv_int = __library.get(b"kpathsea_xputenv_int\0").map(|sym| *sym);
        let xputenv = __library.get(b"xputenv\0").map(|sym| *sym);
        let xputenv_int = __library.get(b"xputenv_int\0").map(|sym| *sym);
        let xgetcwd = __library.get(b"xgetcwd\0").map(|sym| *sym);
        let kpathsea_dir_p = __library.get(b"kpathsea_dir_p\0").map(|sym| *sym);
        let dir_p = __library.get(b"dir_p\0").map(|sym| *sym);
        let dir_links = __library.get(b"dir_links\0").map(|sym| *sym);
        let kpathsea_dir_links = __library.get(b"kpathsea_dir_links\0").map(|sym| *sym);
        let xfopen = __library.get(b"xfopen\0").map(|sym| *sym);
        let xfclose = __library.get(b"xfclose\0").map(|sym| *sym);
        let xfseek = __library.get(b"xfseek\0").map(|sym| *sym);
        let xfseeko = __library.get(b"xfseeko\0").map(|sym| *sym);
        let xftell = __library.get(b"xftell\0").map(|sym| *sym);
        let xftello = __library.get(b"xftello\0").map(|sym| *sym);
        let xmalloc = __library.get(b"xmalloc\0").map(|sym| *sym);
        let xrealloc = __library.get(b"xrealloc\0").map(|sym| *sym);
        let xcalloc = __library.get(b"xcalloc\0").map(|sym| *sym);
        let kpathsea_selfdir = __library.get(b"kpathsea_selfdir\0").map(|sym| *sym);
        let kpathsea_set_program_name = __library
            .get(b"kpathsea_set_program_name\0")
            .map(|sym| *sym);
        let kpse_selfdir = __library.get(b"kpse_selfdir\0").map(|sym| *sym);
        let kpse_set_program_name = __library.get(b"kpse_set_program_name\0").map(|sym| *sym);
        let kpse_program_basename = __library.get(b"kpse_program_basename\0").map(|sym| *sym);
        let kpathsea_absolute_p = __library.get(b"kpathsea_absolute_p\0").map(|sym| *sym);
        let kpse_absolute_p = __library.get(b"kpse_absolute_p\0").map(|sym| *sym);
        let opendir = __library.get(b"opendir\0").map(|sym| *sym);
        let fdopendir = __library.get(b"fdopendir\0").map(|sym| *sym);
        let closedir = __library.get(b"closedir\0").map(|sym| *sym);
        let readdir = __library.get(b"readdir\0").map(|sym| *sym);
        let readdir_r = __library.get(b"readdir_r\0").map(|sym| *sym);
        let rewinddir = __library.get(b"rewinddir\0").map(|sym| *sym);
        let seekdir = __library.get(b"seekdir\0").map(|sym| *sym);
        let telldir = __library.get(b"telldir\0").map(|sym| *sym);
        let dirfd = __library.get(b"dirfd\0").map(|sym| *sym);
        let scandir = __library.get(b"scandir\0").map(|sym| *sym);
        let alphasort = __library.get(b"alphasort\0").map(|sym| *sym);
        let getdirentries = __library.get(b"getdirentries\0").map(|sym| *sym);
        let fcntl = __library.get(b"fcntl\0").map(|sym| *sym);
        let open = __library.get(b"open\0").map(|sym| *sym);
        let openat = __library.get(b"openat\0").map(|sym| *sym);
        let creat = __library.get(b"creat\0").map(|sym| *sym);
        let posix_fadvise = __library.get(b"posix_fadvise\0").map(|sym| *sym);
        let posix_fallocate = __library.get(b"posix_fallocate\0").map(|sym| *sym);
        let __ctype_b_loc = __library.get(b"__ctype_b_loc\0").map(|sym| *sym);
        let __ctype_tolower_loc = __library.get(b"__ctype_tolower_loc\0").map(|sym| *sym);
        let __ctype_toupper_loc = __library.get(b"__ctype_toupper_loc\0").map(|sym| *sym);
        let isalnum = __library.get(b"isalnum\0").map(|sym| *sym);
        let isalpha = __library.get(b"isalpha\0").map(|sym| *sym);
        let iscntrl = __library.get(b"iscntrl\0").map(|sym| *sym);
        let isdigit = __library.get(b"isdigit\0").map(|sym| *sym);
        let islower = __library.get(b"islower\0").map(|sym| *sym);
        let isgraph = __library.get(b"isgraph\0").map(|sym| *sym);
        let isprint = __library.get(b"isprint\0").map(|sym| *sym);
        let ispunct = __library.get(b"ispunct\0").map(|sym| *sym);
        let isspace = __library.get(b"isspace\0").map(|sym| *sym);
        let isupper = __library.get(b"isupper\0").map(|sym| *sym);
        let isxdigit = __library.get(b"isxdigit\0").map(|sym| *sym);
        let tolower = __library.get(b"tolower\0").map(|sym| *sym);
        let toupper = __library.get(b"toupper\0").map(|sym| *sym);
        let isblank = __library.get(b"isblank\0").map(|sym| *sym);
        let isascii = __library.get(b"isascii\0").map(|sym| *sym);
        let toascii = __library.get(b"toascii\0").map(|sym| *sym);
        let _toupper = __library.get(b"_toupper\0").map(|sym| *sym);
        let _tolower = __library.get(b"_tolower\0").map(|sym| *sym);
        let isalnum_l = __library.get(b"isalnum_l\0").map(|sym| *sym);
        let isalpha_l = __library.get(b"isalpha_l\0").map(|sym| *sym);
        let iscntrl_l = __library.get(b"iscntrl_l\0").map(|sym| *sym);
        let isdigit_l = __library.get(b"isdigit_l\0").map(|sym| *sym);
        let islower_l = __library.get(b"islower_l\0").map(|sym| *sym);
        let isgraph_l = __library.get(b"isgraph_l\0").map(|sym| *sym);
        let isprint_l = __library.get(b"isprint_l\0").map(|sym| *sym);
        let ispunct_l = __library.get(b"ispunct_l\0").map(|sym| *sym);
        let isspace_l = __library.get(b"isspace_l\0").map(|sym| *sym);
        let isupper_l = __library.get(b"isupper_l\0").map(|sym| *sym);
        let isxdigit_l = __library.get(b"isxdigit_l\0").map(|sym| *sym);
        let isblank_l = __library.get(b"isblank_l\0").map(|sym| *sym);
        let __tolower_l = __library.get(b"__tolower_l\0").map(|sym| *sym);
        let tolower_l = __library.get(b"tolower_l\0").map(|sym| *sym);
        let __toupper_l = __library.get(b"__toupper_l\0").map(|sym| *sym);
        let toupper_l = __library.get(b"toupper_l\0").map(|sym| *sym);
        let stat = __library.get(b"stat\0").map(|sym| *sym);
        let fstat = __library.get(b"fstat\0").map(|sym| *sym);
        let fstatat = __library.get(b"fstatat\0").map(|sym| *sym);
        let lstat = __library.get(b"lstat\0").map(|sym| *sym);
        let chmod = __library.get(b"chmod\0").map(|sym| *sym);
        let lchmod = __library.get(b"lchmod\0").map(|sym| *sym);
        let fchmod = __library.get(b"fchmod\0").map(|sym| *sym);
        let fchmodat = __library.get(b"fchmodat\0").map(|sym| *sym);
        let umask = __library.get(b"umask\0").map(|sym| *sym);
        let mkdir = __library.get(b"mkdir\0").map(|sym| *sym);
        let mkdirat = __library.get(b"mkdirat\0").map(|sym| *sym);
        let mknod = __library.get(b"mknod\0").map(|sym| *sym);
        let mknodat = __library.get(b"mknodat\0").map(|sym| *sym);
        let mkfifo = __library.get(b"mkfifo\0").map(|sym| *sym);
        let mkfifoat = __library.get(b"mkfifoat\0").map(|sym| *sym);
        let utimensat = __library.get(b"utimensat\0").map(|sym| *sym);
        let futimens = __library.get(b"futimens\0").map(|sym| *sym);
        let kpathsea_cnf_get = __library.get(b"kpathsea_cnf_get\0").map(|sym| *sym);
        let kpathsea_cnf_line_env_progname = __library
            .get(b"kpathsea_cnf_line_env_progname\0")
            .map(|sym| *sym);
        let kpse_cnf_get = __library.get(b"kpse_cnf_get\0").map(|sym| *sym);
        let concatn = __library.get(b"concatn\0").map(|sym| *sym);
        let kpathsea_brace_expand = __library.get(b"kpathsea_brace_expand\0").map(|sym| *sym);
        let kpathsea_path_expand = __library.get(b"kpathsea_path_expand\0").map(|sym| *sym);
        let kpse_brace_expand = __library.get(b"kpse_brace_expand\0").map(|sym| *sym);
        let kpse_path_expand = __library.get(b"kpse_path_expand\0").map(|sym| *sym);
        let getopt_long = __library.get(b"getopt_long\0").map(|sym| *sym);
        let getopt_long_only = __library.get(b"getopt_long_only\0").map(|sym| *sym);
        let read_line = __library.get(b"read_line\0").map(|sym| *sym);
        let kpathsea_magstep_fix = __library.get(b"kpathsea_magstep_fix\0").map(|sym| *sym);
        let kpse_magstep_fix = __library.get(b"kpse_magstep_fix\0").map(|sym| *sym);
        let kpathsea_path_search = __library.get(b"kpathsea_path_search\0").map(|sym| *sym);
        let kpathsea_all_path_search = __library.get(b"kpathsea_all_path_search\0").map(|sym| *sym);
        let kpse_path_search = __library.get(b"kpse_path_search\0").map(|sym| *sym);
        let kpse_all_path_search = __library.get(b"kpse_all_path_search\0").map(|sym| *sym);
        let kpathsea_init_prog = __library.get(b"kpathsea_init_prog\0").map(|sym| *sym);
        let kpse_init_prog = __library.get(b"kpse_init_prog\0").map(|sym| *sym);
        let kpathsea_readable_file = __library.get(b"kpathsea_readable_file\0").map(|sym| *sym);
        let kpse_readable_file = __library.get(b"kpse_readable_file\0").map(|sym| *sym);
        let kpathsea_set_program_enabled = __library
            .get(b"kpathsea_set_program_enabled\0")
            .map(|sym| *sym);
        let kpathsea_maketex_option = __library.get(b"kpathsea_maketex_option\0").map(|sym| *sym);
        let kpathsea_set_suffixes = __library.get(b"kpathsea_set_suffixes\0").map(|sym| *sym);
        let kpathsea_init_format = __library.get(b"kpathsea_init_format\0").map(|sym| *sym);
        let kpathsea_init_format_return_varlist = __library
            .get(b"kpathsea_init_format_return_varlist\0")
            .map(|sym| *sym);
        let kpathsea_find_file = __library.get(b"kpathsea_find_file\0").map(|sym| *sym);
        let kpathsea_find_file_generic = __library
            .get(b"kpathsea_find_file_generic\0")
            .map(|sym| *sym);
        let kpathsea_in_name_ok = __library.get(b"kpathsea_in_name_ok\0").map(|sym| *sym);
        let kpathsea_out_name_ok = __library.get(b"kpathsea_out_name_ok\0").map(|sym| *sym);
        let kpathsea_in_name_ok_silent = __library
            .get(b"kpathsea_in_name_ok_silent\0")
            .map(|sym| *sym);
        let kpathsea_out_name_ok_silent = __library
            .get(b"kpathsea_out_name_ok_silent\0")
            .map(|sym| *sym);
        let kpathsea_open_file = __library.get(b"kpathsea_open_file\0").map(|sym| *sym);
        let kpathsea_reset_program_name = __library
            .get(b"kpathsea_reset_program_name\0")
            .map(|sym| *sym);
        let kpse_init_fallback_resolutions = __library
            .get(b"kpse_init_fallback_resolutions\0")
            .map(|sym| *sym);
        let kpse_set_program_enabled = __library.get(b"kpse_set_program_enabled\0").map(|sym| *sym);
        let kpse_maketex_option = __library.get(b"kpse_maketex_option\0").map(|sym| *sym);
        let kpse_set_suffixes = __library.get(b"kpse_set_suffixes\0").map(|sym| *sym);
        let kpse_init_format = __library.get(b"kpse_init_format\0").map(|sym| *sym);
        let kpse_find_file = __library.get(b"kpse_find_file\0").map(|sym| *sym);
        let kpse_find_file_generic = __library.get(b"kpse_find_file_generic\0").map(|sym| *sym);
        let kpse_in_name_ok = __library.get(b"kpse_in_name_ok\0").map(|sym| *sym);
        let kpse_out_name_ok = __library.get(b"kpse_out_name_ok\0").map(|sym| *sym);
        let kpse_open_file = __library.get(b"kpse_open_file\0").map(|sym| *sym);
        let kpse_reset_program_name = __library.get(b"kpse_reset_program_name\0").map(|sym| *sym);
        let kpathsea_find_glyph = __library.get(b"kpathsea_find_glyph\0").map(|sym| *sym);
        let kpathsea_bitmap_tolerance = __library
            .get(b"kpathsea_bitmap_tolerance\0")
            .map(|sym| *sym);
        let kpse_find_glyph = __library.get(b"kpse_find_glyph\0").map(|sym| *sym);
        let kpse_bitmap_tolerance = __library.get(b"kpse_bitmap_tolerance\0").map(|sym| *sym);
        let kpathsea_tex_hush = __library.get(b"kpathsea_tex_hush\0").map(|sym| *sym);
        let kpse_tex_hush = __library.get(b"kpse_tex_hush\0").map(|sym| *sym);
        let kpathsea_make_tex = __library.get(b"kpathsea_make_tex\0").map(|sym| *sym);
        let kpse_make_tex = __library.get(b"kpse_make_tex\0").map(|sym| *sym);
        let kpathsea_var_value = __library.get(b"kpathsea_var_value\0").map(|sym| *sym);
        let kpathsea_var_expand = __library.get(b"kpathsea_var_expand\0").map(|sym| *sym);
        let kpse_var_value = __library.get(b"kpse_var_value\0").map(|sym| *sym);
        let kpse_var_expand = __library.get(b"kpse_var_expand\0").map(|sym| *sym);
        Ok(Kpathsea {
            __library,
            __fpclassify,
            __signbit,
            __isinf,
            __finite,
            __isnan,
            __iseqsig,
            __issignaling,
            acos,
            __acos,
            asin,
            __asin,
            atan,
            __atan,
            atan2,
            __atan2,
            cos,
            __cos,
            sin,
            __sin,
            tan,
            __tan,
            cosh,
            __cosh,
            sinh,
            __sinh,
            tanh,
            __tanh,
            acosh,
            __acosh,
            asinh,
            __asinh,
            atanh,
            __atanh,
            exp,
            __exp,
            frexp,
            __frexp,
            ldexp,
            __ldexp,
            log,
            __log,
            log10,
            __log10,
            modf,
            __modf,
            expm1,
            __expm1,
            log1p,
            __log1p,
            logb,
            __logb,
            exp2,
            __exp2,
            log2,
            __log2,
            pow,
            __pow,
            sqrt,
            __sqrt,
            hypot,
            __hypot,
            cbrt,
            __cbrt,
            ceil,
            __ceil,
            fabs,
            __fabs,
            floor,
            __floor,
            fmod,
            __fmod,
            isinf,
            finite,
            drem,
            __drem,
            significand,
            __significand,
            copysign,
            __copysign,
            nan,
            __nan,
            isnan,
            j0,
            __j0,
            j1,
            __j1,
            jn,
            __jn,
            y0,
            __y0,
            y1,
            __y1,
            yn,
            __yn,
            erf,
            __erf,
            erfc,
            __erfc,
            lgamma,
            __lgamma,
            tgamma,
            __tgamma,
            gamma,
            __gamma,
            lgamma_r,
            __lgamma_r,
            rint,
            __rint,
            nextafter,
            __nextafter,
            nexttoward,
            __nexttoward,
            remainder,
            __remainder,
            scalbn,
            __scalbn,
            ilogb,
            __ilogb,
            scalbln,
            __scalbln,
            nearbyint,
            __nearbyint,
            round,
            __round,
            trunc,
            __trunc,
            remquo,
            __remquo,
            lrint,
            __lrint,
            llrint,
            __llrint,
            lround,
            __lround,
            llround,
            __llround,
            fdim,
            __fdim,
            fmax,
            __fmax,
            fmin,
            __fmin,
            fma,
            __fma,
            scalb,
            __scalb,
            __fpclassifyf,
            __signbitf,
            __isinff,
            __finitef,
            __isnanf,
            __iseqsigf,
            __issignalingf,
            acosf,
            __acosf,
            asinf,
            __asinf,
            atanf,
            __atanf,
            atan2f,
            __atan2f,
            cosf,
            __cosf,
            sinf,
            __sinf,
            tanf,
            __tanf,
            coshf,
            __coshf,
            sinhf,
            __sinhf,
            tanhf,
            __tanhf,
            acoshf,
            __acoshf,
            asinhf,
            __asinhf,
            atanhf,
            __atanhf,
            expf,
            __expf,
            frexpf,
            __frexpf,
            ldexpf,
            __ldexpf,
            logf,
            __logf,
            log10f,
            __log10f,
            modff,
            __modff,
            expm1f,
            __expm1f,
            log1pf,
            __log1pf,
            logbf,
            __logbf,
            exp2f,
            __exp2f,
            log2f,
            __log2f,
            powf,
            __powf,
            sqrtf,
            __sqrtf,
            hypotf,
            __hypotf,
            cbrtf,
            __cbrtf,
            ceilf,
            __ceilf,
            fabsf,
            __fabsf,
            floorf,
            __floorf,
            fmodf,
            __fmodf,
            isinff,
            finitef,
            dremf,
            __dremf,
            significandf,
            __significandf,
            copysignf,
            __copysignf,
            nanf,
            __nanf,
            isnanf,
            j0f,
            __j0f,
            j1f,
            __j1f,
            jnf,
            __jnf,
            y0f,
            __y0f,
            y1f,
            __y1f,
            ynf,
            __ynf,
            erff,
            __erff,
            erfcf,
            __erfcf,
            lgammaf,
            __lgammaf,
            tgammaf,
            __tgammaf,
            gammaf,
            __gammaf,
            lgammaf_r,
            __lgammaf_r,
            rintf,
            __rintf,
            nextafterf,
            __nextafterf,
            nexttowardf,
            __nexttowardf,
            remainderf,
            __remainderf,
            scalbnf,
            __scalbnf,
            ilogbf,
            __ilogbf,
            scalblnf,
            __scalblnf,
            nearbyintf,
            __nearbyintf,
            roundf,
            __roundf,
            truncf,
            __truncf,
            remquof,
            __remquof,
            lrintf,
            __lrintf,
            llrintf,
            __llrintf,
            lroundf,
            __lroundf,
            llroundf,
            __llroundf,
            fdimf,
            __fdimf,
            fmaxf,
            __fmaxf,
            fminf,
            __fminf,
            fmaf,
            __fmaf,
            scalbf,
            __scalbf,
            __fpclassifyl,
            __signbitl,
            __isinfl,
            __finitel,
            __isnanl,
            __iseqsigl,
            __issignalingl,
            acosl,
            __acosl,
            asinl,
            __asinl,
            atanl,
            __atanl,
            atan2l,
            __atan2l,
            cosl,
            __cosl,
            sinl,
            __sinl,
            tanl,
            __tanl,
            coshl,
            __coshl,
            sinhl,
            __sinhl,
            tanhl,
            __tanhl,
            acoshl,
            __acoshl,
            asinhl,
            __asinhl,
            atanhl,
            __atanhl,
            expl,
            __expl,
            frexpl,
            __frexpl,
            ldexpl,
            __ldexpl,
            logl,
            __logl,
            log10l,
            __log10l,
            modfl,
            __modfl,
            expm1l,
            __expm1l,
            log1pl,
            __log1pl,
            logbl,
            __logbl,
            exp2l,
            __exp2l,
            log2l,
            __log2l,
            powl,
            __powl,
            sqrtl,
            __sqrtl,
            hypotl,
            __hypotl,
            cbrtl,
            __cbrtl,
            ceill,
            __ceill,
            fabsl,
            __fabsl,
            floorl,
            __floorl,
            fmodl,
            __fmodl,
            isinfl,
            finitel,
            dreml,
            __dreml,
            significandl,
            __significandl,
            copysignl,
            __copysignl,
            nanl,
            __nanl,
            isnanl,
            j0l,
            __j0l,
            j1l,
            __j1l,
            jnl,
            __jnl,
            y0l,
            __y0l,
            y1l,
            __y1l,
            ynl,
            __ynl,
            erfl,
            __erfl,
            erfcl,
            __erfcl,
            lgammal,
            __lgammal,
            tgammal,
            __tgammal,
            gammal,
            __gammal,
            lgammal_r,
            __lgammal_r,
            rintl,
            __rintl,
            nextafterl,
            __nextafterl,
            nexttowardl,
            __nexttowardl,
            remainderl,
            __remainderl,
            scalbnl,
            __scalbnl,
            ilogbl,
            __ilogbl,
            scalblnl,
            __scalblnl,
            nearbyintl,
            __nearbyintl,
            roundl,
            __roundl,
            truncl,
            __truncl,
            remquol,
            __remquol,
            lrintl,
            __lrintl,
            llrintl,
            __llrintl,
            lroundl,
            __lroundl,
            llroundl,
            __llroundl,
            fdiml,
            __fdiml,
            fmaxl,
            __fmaxl,
            fminl,
            __fminl,
            fmal,
            __fmal,
            scalbl,
            __scalbl,
            remove,
            rename,
            renameat,
            fclose,
            tmpfile,
            tmpnam,
            tmpnam_r,
            tempnam,
            fflush,
            fflush_unlocked,
            fopen,
            freopen,
            fdopen,
            fmemopen,
            open_memstream,
            setbuf,
            setvbuf,
            setbuffer,
            setlinebuf,
            fprintf,
            printf,
            sprintf,
            vfprintf,
            vprintf,
            vsprintf,
            snprintf,
            vsnprintf,
            vdprintf,
            dprintf,
            fscanf,
            scanf,
            sscanf,
            fscanf1,
            scanf1,
            sscanf1,
            vfscanf,
            vscanf,
            vsscanf,
            vfscanf1,
            vscanf1,
            vsscanf1,
            fgetc,
            getc,
            getchar,
            getc_unlocked,
            getchar_unlocked,
            fgetc_unlocked,
            fputc,
            putc,
            putchar,
            fputc_unlocked,
            putc_unlocked,
            putchar_unlocked,
            getw,
            putw,
            fgets,
            __getdelim,
            getdelim,
            getline,
            fputs,
            puts,
            ungetc,
            fread,
            fwrite,
            fread_unlocked,
            fwrite_unlocked,
            fseek,
            ftell,
            rewind,
            fseeko,
            ftello,
            fgetpos,
            fsetpos,
            clearerr,
            feof,
            ferror,
            clearerr_unlocked,
            feof_unlocked,
            ferror_unlocked,
            perror,
            fileno,
            fileno_unlocked,
            pclose,
            popen,
            ctermid,
            flockfile,
            ftrylockfile,
            funlockfile,
            __uflow,
            __overflow,
            select,
            pselect,
            access,
            faccessat,
            lseek,
            close,
            closefrom,
            read,
            write,
            pread,
            pwrite,
            pipe,
            alarm,
            sleep,
            ualarm,
            usleep,
            pause,
            chown,
            fchown,
            lchown,
            fchownat,
            chdir,
            fchdir,
            getcwd,
            getwd,
            dup,
            dup2,
            execve,
            fexecve,
            execv,
            execle,
            execl,
            execvp,
            execlp,
            nice,
            _exit,
            pathconf,
            fpathconf,
            sysconf,
            confstr,
            getpid,
            getppid,
            getpgrp,
            __getpgid,
            getpgid,
            setpgid,
            setpgrp,
            setsid,
            getsid,
            getuid,
            geteuid,
            getgid,
            getegid,
            getgroups,
            setuid,
            setreuid,
            seteuid,
            setgid,
            setregid,
            setegid,
            fork,
            vfork,
            ttyname,
            ttyname_r,
            isatty,
            ttyslot,
            link,
            linkat,
            symlink,
            readlink,
            symlinkat,
            readlinkat,
            unlink,
            unlinkat,
            rmdir,
            tcgetpgrp,
            tcsetpgrp,
            getlogin,
            getlogin_r,
            setlogin,
            getopt,
            gethostname,
            sethostname,
            sethostid,
            getdomainname,
            setdomainname,
            vhangup,
            revoke,
            profil,
            acct,
            getusershell,
            endusershell,
            setusershell,
            daemon,
            chroot,
            getpass,
            fsync,
            gethostid,
            sync,
            getpagesize,
            getdtablesize,
            truncate,
            ftruncate,
            brk,
            sbrk,
            syscall,
            lockf,
            fdatasync,
            crypt,
            getentropy,
            __ctype_get_mb_cur_max,
            atof,
            atoi,
            atol,
            atoll,
            strtod,
            strtof,
            strtold,
            strtol,
            strtoul,
            strtoq,
            strtouq,
            strtoll,
            strtoull,
            l64a,
            a64l,
            random,
            srandom,
            initstate,
            setstate,
            random_r,
            srandom_r,
            initstate_r,
            setstate_r,
            rand,
            srand,
            rand_r,
            drand48,
            erand48,
            lrand48,
            nrand48,
            mrand48,
            jrand48,
            srand48,
            seed48,
            lcong48,
            drand48_r,
            erand48_r,
            lrand48_r,
            nrand48_r,
            mrand48_r,
            jrand48_r,
            srand48_r,
            seed48_r,
            lcong48_r,
            malloc,
            calloc,
            realloc,
            free,
            reallocarray,
            alloca,
            valloc,
            posix_memalign,
            aligned_alloc,
            abort,
            atexit,
            at_quick_exit,
            on_exit,
            exit,
            quick_exit,
            _Exit,
            getenv,
            putenv,
            setenv,
            unsetenv,
            clearenv,
            mktemp,
            mkstemp,
            mkstemps,
            mkdtemp,
            system,
            realpath,
            bsearch,
            qsort,
            abs,
            labs,
            llabs,
            div,
            ldiv,
            lldiv,
            ecvt,
            fcvt,
            gcvt,
            qecvt,
            qfcvt,
            qgcvt,
            ecvt_r,
            fcvt_r,
            qecvt_r,
            qfcvt_r,
            mblen,
            mbtowc,
            wctomb,
            mbstowcs,
            wcstombs,
            rpmatch,
            getsubopt,
            getloadavg,
            memcpy,
            memmove,
            memccpy,
            memset,
            memcmp,
            memchr,
            strcpy,
            strncpy,
            strcat,
            strncat,
            strcmp,
            strncmp,
            strcoll,
            strxfrm,
            strcoll_l,
            strxfrm_l,
            strdup,
            strndup,
            strchr,
            strrchr,
            strcspn,
            strspn,
            strpbrk,
            strstr,
            strtok,
            __strtok_r,
            strtok_r,
            strlen,
            strnlen,
            strerror,
            strerror_r,
            strerror_l,
            bcmp,
            bcopy,
            bzero,
            index,
            rindex,
            ffs,
            ffsl,
            ffsll,
            strcasecmp,
            strncasecmp,
            strcasecmp_l,
            strncasecmp_l,
            explicit_bzero,
            strsep,
            strsignal,
            __stpcpy,
            stpcpy,
            __stpncpy,
            stpncpy,
            __errno_location,
            __assert_fail,
            __assert_perror_fail,
            __assert,
            imaxabs,
            imaxdiv,
            strtoimax,
            strtoumax,
            wcstoimax,
            wcstoumax,
            hash_create,
            hash_insert,
            hash_remove,
            hash_lookup,
            str_list_add,
            cstr_list_add,
            kpathsea_new,
            kpathsea_finish,
            kpse_fopen_trace,
            kpse_fclose_trace,
            concat,
            concat3,
            xstrdup,
            uppercasify,
            atou,
            same_file_p,
            xbasename,
            xdirname,
            find_suffix,
            remove_suffix,
            make_suffix,
            make_prefix,
            extend_filename,
            kpathsea_xputenv,
            kpathsea_xputenv_int,
            xputenv,
            xputenv_int,
            xgetcwd,
            kpathsea_dir_p,
            dir_p,
            dir_links,
            kpathsea_dir_links,
            xfopen,
            xfclose,
            xfseek,
            xfseeko,
            xftell,
            xftello,
            xmalloc,
            xrealloc,
            xcalloc,
            kpathsea_selfdir,
            kpathsea_set_program_name,
            kpse_selfdir,
            kpse_set_program_name,
            kpse_program_basename,
            kpathsea_absolute_p,
            kpse_absolute_p,
            opendir,
            fdopendir,
            closedir,
            readdir,
            readdir_r,
            rewinddir,
            seekdir,
            telldir,
            dirfd,
            scandir,
            alphasort,
            getdirentries,
            fcntl,
            open,
            openat,
            creat,
            posix_fadvise,
            posix_fallocate,
            __ctype_b_loc,
            __ctype_tolower_loc,
            __ctype_toupper_loc,
            isalnum,
            isalpha,
            iscntrl,
            isdigit,
            islower,
            isgraph,
            isprint,
            ispunct,
            isspace,
            isupper,
            isxdigit,
            tolower,
            toupper,
            isblank,
            isascii,
            toascii,
            _toupper,
            _tolower,
            isalnum_l,
            isalpha_l,
            iscntrl_l,
            isdigit_l,
            islower_l,
            isgraph_l,
            isprint_l,
            ispunct_l,
            isspace_l,
            isupper_l,
            isxdigit_l,
            isblank_l,
            __tolower_l,
            tolower_l,
            __toupper_l,
            toupper_l,
            stat,
            fstat,
            fstatat,
            lstat,
            chmod,
            lchmod,
            fchmod,
            fchmodat,
            umask,
            mkdir,
            mkdirat,
            mknod,
            mknodat,
            mkfifo,
            mkfifoat,
            utimensat,
            futimens,
            kpathsea_cnf_get,
            kpathsea_cnf_line_env_progname,
            kpse_cnf_get,
            concatn,
            kpathsea_brace_expand,
            kpathsea_path_expand,
            kpse_brace_expand,
            kpse_path_expand,
            getopt_long,
            getopt_long_only,
            read_line,
            kpathsea_magstep_fix,
            kpse_magstep_fix,
            kpathsea_path_search,
            kpathsea_all_path_search,
            kpse_path_search,
            kpse_all_path_search,
            kpathsea_init_prog,
            kpse_init_prog,
            kpathsea_readable_file,
            kpse_readable_file,
            kpathsea_set_program_enabled,
            kpathsea_maketex_option,
            kpathsea_set_suffixes,
            kpathsea_init_format,
            kpathsea_init_format_return_varlist,
            kpathsea_find_file,
            kpathsea_find_file_generic,
            kpathsea_in_name_ok,
            kpathsea_out_name_ok,
            kpathsea_in_name_ok_silent,
            kpathsea_out_name_ok_silent,
            kpathsea_open_file,
            kpathsea_reset_program_name,
            kpse_init_fallback_resolutions,
            kpse_set_program_enabled,
            kpse_maketex_option,
            kpse_set_suffixes,
            kpse_init_format,
            kpse_find_file,
            kpse_find_file_generic,
            kpse_in_name_ok,
            kpse_out_name_ok,
            kpse_open_file,
            kpse_reset_program_name,
            kpathsea_find_glyph,
            kpathsea_bitmap_tolerance,
            kpse_find_glyph,
            kpse_bitmap_tolerance,
            kpathsea_tex_hush,
            kpse_tex_hush,
            kpathsea_make_tex,
            kpse_make_tex,
            kpathsea_var_value,
            kpathsea_var_expand,
            kpse_var_value,
            kpse_var_expand,
        })
    }
    pub unsafe fn __fpclassify(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__fpclassify
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __signbit(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__signbit
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isinf(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__isinf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __finite(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__finite
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isnan(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__isnan
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __iseqsig(&self, __x: f64, __y: f64) -> ::std::os::raw::c_int {
        (self
            .__iseqsig
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __issignaling(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__issignaling
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn acos(&self, __x: f64) -> f64 {
        (self.acos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acos(&self, __x: f64) -> f64 {
        (self.__acos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asin(&self, __x: f64) -> f64 {
        (self.asin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asin(&self, __x: f64) -> f64 {
        (self.__asin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan(&self, __x: f64) -> f64 {
        (self.atan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atan(&self, __x: f64) -> f64 {
        (self.__atan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan2(&self, __y: f64, __x: f64) -> f64 {
        (self.atan2.as_ref().expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn __atan2(&self, __y: f64, __x: f64) -> f64 {
        (self
            .__atan2
            .as_ref()
            .expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn cos(&self, __x: f64) -> f64 {
        (self.cos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cos(&self, __x: f64) -> f64 {
        (self.__cos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sin(&self, __x: f64) -> f64 {
        (self.sin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sin(&self, __x: f64) -> f64 {
        (self.__sin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tan(&self, __x: f64) -> f64 {
        (self.tan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tan(&self, __x: f64) -> f64 {
        (self.__tan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn cosh(&self, __x: f64) -> f64 {
        (self.cosh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cosh(&self, __x: f64) -> f64 {
        (self.__cosh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinh(&self, __x: f64) -> f64 {
        (self.sinh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinh(&self, __x: f64) -> f64 {
        (self.__sinh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanh(&self, __x: f64) -> f64 {
        (self.tanh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanh(&self, __x: f64) -> f64 {
        (self.__tanh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn acosh(&self, __x: f64) -> f64 {
        (self.acosh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acosh(&self, __x: f64) -> f64 {
        (self
            .__acosh
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinh(&self, __x: f64) -> f64 {
        (self.asinh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinh(&self, __x: f64) -> f64 {
        (self
            .__asinh
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanh(&self, __x: f64) -> f64 {
        (self.atanh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanh(&self, __x: f64) -> f64 {
        (self
            .__atanh
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp(&self, __x: f64) -> f64 {
        (self.exp.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp(&self, __x: f64) -> f64 {
        (self.__exp.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn frexp(&self, __x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64 {
        (self.frexp.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __frexp(&self, __x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .__frexp
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn ldexp(&self, __x: f64, __exponent: ::std::os::raw::c_int) -> f64 {
        (self.ldexp.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __ldexp(&self, __x: f64, __exponent: ::std::os::raw::c_int) -> f64 {
        (self
            .__ldexp
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn log(&self, __x: f64) -> f64 {
        (self.log.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log(&self, __x: f64) -> f64 {
        (self.__log.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log10(&self, __x: f64) -> f64 {
        (self.log10.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log10(&self, __x: f64) -> f64 {
        (self
            .__log10
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn modf(&self, __x: f64, __iptr: *mut f64) -> f64 {
        (self.modf.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn __modf(&self, __x: f64, __iptr: *mut f64) -> f64 {
        (self.__modf.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn expm1(&self, __x: f64) -> f64 {
        (self.expm1.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expm1(&self, __x: f64) -> f64 {
        (self
            .__expm1
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log1p(&self, __x: f64) -> f64 {
        (self.log1p.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log1p(&self, __x: f64) -> f64 {
        (self
            .__log1p
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn logb(&self, __x: f64) -> f64 {
        (self.logb.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logb(&self, __x: f64) -> f64 {
        (self.__logb.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp2(&self, __x: f64) -> f64 {
        (self.exp2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp2(&self, __x: f64) -> f64 {
        (self.__exp2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log2(&self, __x: f64) -> f64 {
        (self.log2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log2(&self, __x: f64) -> f64 {
        (self.__log2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn pow(&self, __x: f64, __y: f64) -> f64 {
        (self.pow.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __pow(&self, __x: f64, __y: f64) -> f64 {
        (self.__pow.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn sqrt(&self, __x: f64) -> f64 {
        (self.sqrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sqrt(&self, __x: f64) -> f64 {
        (self.__sqrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn hypot(&self, __x: f64, __y: f64) -> f64 {
        (self.hypot.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __hypot(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__hypot
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn cbrt(&self, __x: f64) -> f64 {
        (self.cbrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cbrt(&self, __x: f64) -> f64 {
        (self.__cbrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn ceil(&self, __x: f64) -> f64 {
        (self.ceil.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ceil(&self, __x: f64) -> f64 {
        (self.__ceil.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fabs(&self, __x: f64) -> f64 {
        (self.fabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __fabs(&self, __x: f64) -> f64 {
        (self.__fabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn floor(&self, __x: f64) -> f64 {
        (self.floor.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __floor(&self, __x: f64) -> f64 {
        (self
            .__floor
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fmod(&self, __x: f64, __y: f64) -> f64 {
        (self.fmod.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmod(&self, __x: f64, __y: f64) -> f64 {
        (self.__fmod.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn isinf(&self, __value: f64) -> ::std::os::raw::c_int {
        (self.isinf.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn finite(&self, __value: f64) -> ::std::os::raw::c_int {
        (self.finite.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn drem(&self, __x: f64, __y: f64) -> f64 {
        (self.drem.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __drem(&self, __x: f64, __y: f64) -> f64 {
        (self.__drem.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn significand(&self, __x: f64) -> f64 {
        (self
            .significand
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __significand(&self, __x: f64) -> f64 {
        (self
            .__significand
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn copysign(&self, __x: f64, __y: f64) -> f64 {
        (self
            .copysign
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __copysign(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__copysign
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nan(&self, __tagb: *const ::std::os::raw::c_char) -> f64 {
        (self.nan.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn __nan(&self, __tagb: *const ::std::os::raw::c_char) -> f64 {
        (self.__nan.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn isnan(&self, __value: f64) -> ::std::os::raw::c_int {
        (self.isnan.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn j0(&self, arg1: f64) -> f64 {
        (self.j0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j0(&self, arg1: f64) -> f64 {
        (self.__j0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn j1(&self, arg1: f64) -> f64 {
        (self.j1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j1(&self, arg1: f64) -> f64 {
        (self.__j1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn jn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.jn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __jn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.__jn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn y0(&self, arg1: f64) -> f64 {
        (self.y0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y0(&self, arg1: f64) -> f64 {
        (self.__y0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn y1(&self, arg1: f64) -> f64 {
        (self.y1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y1(&self, arg1: f64) -> f64 {
        (self.__y1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn yn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.yn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __yn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.__yn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn erf(&self, arg1: f64) -> f64 {
        (self.erf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erf(&self, arg1: f64) -> f64 {
        (self.__erf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn erfc(&self, arg1: f64) -> f64 {
        (self.erfc.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfc(&self, arg1: f64) -> f64 {
        (self.__erfc.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgamma(&self, arg1: f64) -> f64 {
        (self.lgamma.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __lgamma(&self, arg1: f64) -> f64 {
        (self
            .__lgamma
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tgamma(&self, arg1: f64) -> f64 {
        (self.tgamma.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __tgamma(&self, arg1: f64) -> f64 {
        (self
            .__tgamma
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gamma(&self, arg1: f64) -> f64 {
        (self.gamma.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __gamma(&self, arg1: f64) -> f64 {
        (self
            .__gamma
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgamma_r(&self, arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .lgamma_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn __lgamma_r(&self, arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .__lgamma_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn rint(&self, __x: f64) -> f64 {
        (self.rint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __rint(&self, __x: f64) -> f64 {
        (self.__rint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn nextafter(&self, __x: f64, __y: f64) -> f64 {
        (self
            .nextafter
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nextafter(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__nextafter
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nexttoward(&self, __x: f64, __y: u128) -> f64 {
        (self
            .nexttoward
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nexttoward(&self, __x: f64, __y: u128) -> f64 {
        (self
            .__nexttoward
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn remainder(&self, __x: f64, __y: f64) -> f64 {
        (self
            .remainder
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __remainder(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__remainder
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn scalbn(&self, __x: f64, __n: ::std::os::raw::c_int) -> f64 {
        (self.scalbn.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbn(&self, __x: f64, __n: ::std::os::raw::c_int) -> f64 {
        (self
            .__scalbn
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn ilogb(&self, __x: f64) -> ::std::os::raw::c_int {
        (self.ilogb.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ilogb(&self, __x: f64) -> ::std::os::raw::c_int {
        (self
            .__ilogb
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn scalbln(&self, __x: f64, __n: ::std::os::raw::c_long) -> f64 {
        (self
            .scalbln
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbln(&self, __x: f64, __n: ::std::os::raw::c_long) -> f64 {
        (self
            .__scalbln
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn nearbyint(&self, __x: f64) -> f64 {
        (self
            .nearbyint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __nearbyint(&self, __x: f64) -> f64 {
        (self
            .__nearbyint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn round(&self, __x: f64) -> f64 {
        (self.round.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __round(&self, __x: f64) -> f64 {
        (self
            .__round
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn trunc(&self, __x: f64) -> f64 {
        (self.trunc.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __trunc(&self, __x: f64) -> f64 {
        (self
            .__trunc
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn remquo(&self, __x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64 {
        (self.remquo.as_ref().expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn __remquo(&self, __x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .__remquo
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn lrint(&self, __x: f64) -> ::std::os::raw::c_long {
        (self.lrint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lrint(&self, __x: f64) -> ::std::os::raw::c_long {
        (self
            .__lrint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llrint(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self.llrint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llrint(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self
            .__llrint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn lround(&self, __x: f64) -> ::std::os::raw::c_long {
        (self.lround.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lround(&self, __x: f64) -> ::std::os::raw::c_long {
        (self
            .__lround
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llround(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self
            .llround
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llround(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self
            .__llround
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fdim(&self, __x: f64, __y: f64) -> f64 {
        (self.fdim.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fdim(&self, __x: f64, __y: f64) -> f64 {
        (self.__fdim.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmax(&self, __x: f64, __y: f64) -> f64 {
        (self.fmax.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmax(&self, __x: f64, __y: f64) -> f64 {
        (self.__fmax.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmin(&self, __x: f64, __y: f64) -> f64 {
        (self.fmin.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmin(&self, __x: f64, __y: f64) -> f64 {
        (self.__fmin.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fma(&self, __x: f64, __y: f64, __z: f64) -> f64 {
        (self.fma.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn __fma(&self, __x: f64, __y: f64, __z: f64) -> f64 {
        (self.__fma.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn scalb(&self, __x: f64, __n: f64) -> f64 {
        (self.scalb.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalb(&self, __x: f64, __n: f64) -> f64 {
        (self
            .__scalb
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __fpclassifyf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__fpclassifyf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __signbitf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__signbitf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isinff(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__isinff
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __finitef(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__finitef
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isnanf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__isnanf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __iseqsigf(&self, __x: f32, __y: f32) -> ::std::os::raw::c_int {
        (self
            .__iseqsigf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __issignalingf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__issignalingf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn acosf(&self, __x: f32) -> f32 {
        (self.acosf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acosf(&self, __x: f32) -> f32 {
        (self
            .__acosf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinf(&self, __x: f32) -> f32 {
        (self.asinf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinf(&self, __x: f32) -> f32 {
        (self
            .__asinf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanf(&self, __x: f32) -> f32 {
        (self.atanf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanf(&self, __x: f32) -> f32 {
        (self
            .__atanf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan2f(&self, __y: f32, __x: f32) -> f32 {
        (self.atan2f.as_ref().expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn __atan2f(&self, __y: f32, __x: f32) -> f32 {
        (self
            .__atan2f
            .as_ref()
            .expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn cosf(&self, __x: f32) -> f32 {
        (self.cosf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cosf(&self, __x: f32) -> f32 {
        (self.__cosf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinf(&self, __x: f32) -> f32 {
        (self.sinf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinf(&self, __x: f32) -> f32 {
        (self.__sinf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanf(&self, __x: f32) -> f32 {
        (self.tanf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanf(&self, __x: f32) -> f32 {
        (self.__tanf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn coshf(&self, __x: f32) -> f32 {
        (self.coshf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __coshf(&self, __x: f32) -> f32 {
        (self
            .__coshf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinhf(&self, __x: f32) -> f32 {
        (self.sinhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinhf(&self, __x: f32) -> f32 {
        (self
            .__sinhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanhf(&self, __x: f32) -> f32 {
        (self.tanhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanhf(&self, __x: f32) -> f32 {
        (self
            .__tanhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn acoshf(&self, __x: f32) -> f32 {
        (self.acoshf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acoshf(&self, __x: f32) -> f32 {
        (self
            .__acoshf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinhf(&self, __x: f32) -> f32 {
        (self.asinhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinhf(&self, __x: f32) -> f32 {
        (self
            .__asinhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanhf(&self, __x: f32) -> f32 {
        (self.atanhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanhf(&self, __x: f32) -> f32 {
        (self
            .__atanhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn expf(&self, __x: f32) -> f32 {
        (self.expf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expf(&self, __x: f32) -> f32 {
        (self.__expf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn frexpf(&self, __x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32 {
        (self.frexpf.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __frexpf(&self, __x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .__frexpf
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn ldexpf(&self, __x: f32, __exponent: ::std::os::raw::c_int) -> f32 {
        (self.ldexpf.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __ldexpf(&self, __x: f32, __exponent: ::std::os::raw::c_int) -> f32 {
        (self
            .__ldexpf
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn logf(&self, __x: f32) -> f32 {
        (self.logf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logf(&self, __x: f32) -> f32 {
        (self.__logf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log10f(&self, __x: f32) -> f32 {
        (self.log10f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log10f(&self, __x: f32) -> f32 {
        (self
            .__log10f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn modff(&self, __x: f32, __iptr: *mut f32) -> f32 {
        (self.modff.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn __modff(&self, __x: f32, __iptr: *mut f32) -> f32 {
        (self
            .__modff
            .as_ref()
            .expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn expm1f(&self, __x: f32) -> f32 {
        (self.expm1f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expm1f(&self, __x: f32) -> f32 {
        (self
            .__expm1f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log1pf(&self, __x: f32) -> f32 {
        (self.log1pf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log1pf(&self, __x: f32) -> f32 {
        (self
            .__log1pf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn logbf(&self, __x: f32) -> f32 {
        (self.logbf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logbf(&self, __x: f32) -> f32 {
        (self
            .__logbf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp2f(&self, __x: f32) -> f32 {
        (self.exp2f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp2f(&self, __x: f32) -> f32 {
        (self
            .__exp2f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log2f(&self, __x: f32) -> f32 {
        (self.log2f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log2f(&self, __x: f32) -> f32 {
        (self
            .__log2f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn powf(&self, __x: f32, __y: f32) -> f32 {
        (self.powf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __powf(&self, __x: f32, __y: f32) -> f32 {
        (self.__powf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn sqrtf(&self, __x: f32) -> f32 {
        (self.sqrtf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sqrtf(&self, __x: f32) -> f32 {
        (self
            .__sqrtf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn hypotf(&self, __x: f32, __y: f32) -> f32 {
        (self.hypotf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __hypotf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__hypotf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn cbrtf(&self, __x: f32) -> f32 {
        (self.cbrtf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cbrtf(&self, __x: f32) -> f32 {
        (self
            .__cbrtf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn ceilf(&self, __x: f32) -> f32 {
        (self.ceilf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ceilf(&self, __x: f32) -> f32 {
        (self
            .__ceilf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fabsf(&self, __x: f32) -> f32 {
        (self.fabsf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __fabsf(&self, __x: f32) -> f32 {
        (self
            .__fabsf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn floorf(&self, __x: f32) -> f32 {
        (self.floorf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __floorf(&self, __x: f32) -> f32 {
        (self
            .__floorf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fmodf(&self, __x: f32, __y: f32) -> f32 {
        (self.fmodf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmodf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fmodf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn isinff(&self, __value: f32) -> ::std::os::raw::c_int {
        (self.isinff.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn finitef(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .finitef
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn dremf(&self, __x: f32, __y: f32) -> f32 {
        (self.dremf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __dremf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__dremf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn significandf(&self, __x: f32) -> f32 {
        (self
            .significandf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __significandf(&self, __x: f32) -> f32 {
        (self
            .__significandf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn copysignf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .copysignf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __copysignf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__copysignf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nanf(&self, __tagb: *const ::std::os::raw::c_char) -> f32 {
        (self.nanf.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn __nanf(&self, __tagb: *const ::std::os::raw::c_char) -> f32 {
        (self.__nanf.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn isnanf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self.isnanf.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn j0f(&self, arg1: f32) -> f32 {
        (self.j0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j0f(&self, arg1: f32) -> f32 {
        (self.__j0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn j1f(&self, arg1: f32) -> f32 {
        (self.j1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j1f(&self, arg1: f32) -> f32 {
        (self.__j1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn jnf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.jnf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __jnf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.__jnf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn y0f(&self, arg1: f32) -> f32 {
        (self.y0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y0f(&self, arg1: f32) -> f32 {
        (self.__y0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn y1f(&self, arg1: f32) -> f32 {
        (self.y1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y1f(&self, arg1: f32) -> f32 {
        (self.__y1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ynf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.ynf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __ynf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.__ynf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn erff(&self, arg1: f32) -> f32 {
        (self.erff.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erff(&self, arg1: f32) -> f32 {
        (self.__erff.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn erfcf(&self, arg1: f32) -> f32 {
        (self.erfcf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfcf(&self, arg1: f32) -> f32 {
        (self
            .__erfcf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammaf(&self, arg1: f32) -> f32 {
        (self
            .lgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __lgammaf(&self, arg1: f32) -> f32 {
        (self
            .__lgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tgammaf(&self, arg1: f32) -> f32 {
        (self
            .tgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __tgammaf(&self, arg1: f32) -> f32 {
        (self
            .__tgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gammaf(&self, arg1: f32) -> f32 {
        (self.gammaf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __gammaf(&self, arg1: f32) -> f32 {
        (self
            .__gammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammaf_r(&self, arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .lgammaf_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn __lgammaf_r(&self, arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .__lgammaf_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn rintf(&self, __x: f32) -> f32 {
        (self.rintf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __rintf(&self, __x: f32) -> f32 {
        (self
            .__rintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn nextafterf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .nextafterf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nextafterf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__nextafterf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nexttowardf(&self, __x: f32, __y: u128) -> f32 {
        (self
            .nexttowardf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nexttowardf(&self, __x: f32, __y: u128) -> f32 {
        (self
            .__nexttowardf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn remainderf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .remainderf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __remainderf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__remainderf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn scalbnf(&self, __x: f32, __n: ::std::os::raw::c_int) -> f32 {
        (self
            .scalbnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbnf(&self, __x: f32, __n: ::std::os::raw::c_int) -> f32 {
        (self
            .__scalbnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn ilogbf(&self, __x: f32) -> ::std::os::raw::c_int {
        (self.ilogbf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ilogbf(&self, __x: f32) -> ::std::os::raw::c_int {
        (self
            .__ilogbf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn scalblnf(&self, __x: f32, __n: ::std::os::raw::c_long) -> f32 {
        (self
            .scalblnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalblnf(&self, __x: f32, __n: ::std::os::raw::c_long) -> f32 {
        (self
            .__scalblnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn nearbyintf(&self, __x: f32) -> f32 {
        (self
            .nearbyintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __nearbyintf(&self, __x: f32) -> f32 {
        (self
            .__nearbyintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn roundf(&self, __x: f32) -> f32 {
        (self.roundf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __roundf(&self, __x: f32) -> f32 {
        (self
            .__roundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn truncf(&self, __x: f32) -> f32 {
        (self.truncf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __truncf(&self, __x: f32) -> f32 {
        (self
            .__truncf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn remquof(&self, __x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .remquof
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn __remquof(&self, __x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .__remquof
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn lrintf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self.lrintf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lrintf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self
            .__lrintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llrintf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .llrintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llrintf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .__llrintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn lroundf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self
            .lroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lroundf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self
            .__lroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llroundf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .llroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llroundf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .__llroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fdimf(&self, __x: f32, __y: f32) -> f32 {
        (self.fdimf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fdimf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fdimf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmaxf(&self, __x: f32, __y: f32) -> f32 {
        (self.fmaxf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmaxf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fmaxf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fminf(&self, __x: f32, __y: f32) -> f32 {
        (self.fminf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fminf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fminf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmaf(&self, __x: f32, __y: f32, __z: f32) -> f32 {
        (self.fmaf.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn __fmaf(&self, __x: f32, __y: f32, __z: f32) -> f32 {
        (self.__fmaf.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn scalbf(&self, __x: f32, __n: f32) -> f32 {
        (self.scalbf.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbf(&self, __x: f32, __n: f32) -> f32 {
        (self
            .__scalbf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __fpclassifyl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__fpclassifyl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __signbitl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__signbitl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isinfl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__isinfl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __finitel(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__finitel
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isnanl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__isnanl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __iseqsigl(&self, __x: u128, __y: u128) -> ::std::os::raw::c_int {
        (self
            .__iseqsigl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __issignalingl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__issignalingl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn acosl(&self, __x: u128) -> u128 {
        (self.acosl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acosl(&self, __x: u128) -> u128 {
        (self
            .__acosl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinl(&self, __x: u128) -> u128 {
        (self.asinl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinl(&self, __x: u128) -> u128 {
        (self
            .__asinl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanl(&self, __x: u128) -> u128 {
        (self.atanl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanl(&self, __x: u128) -> u128 {
        (self
            .__atanl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan2l(&self, __y: u128, __x: u128) -> u128 {
        (self.atan2l.as_ref().expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn __atan2l(&self, __y: u128, __x: u128) -> u128 {
        (self
            .__atan2l
            .as_ref()
            .expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn cosl(&self, __x: u128) -> u128 {
        (self.cosl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cosl(&self, __x: u128) -> u128 {
        (self.__cosl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinl(&self, __x: u128) -> u128 {
        (self.sinl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinl(&self, __x: u128) -> u128 {
        (self.__sinl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanl(&self, __x: u128) -> u128 {
        (self.tanl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanl(&self, __x: u128) -> u128 {
        (self.__tanl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn coshl(&self, __x: u128) -> u128 {
        (self.coshl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __coshl(&self, __x: u128) -> u128 {
        (self
            .__coshl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinhl(&self, __x: u128) -> u128 {
        (self.sinhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinhl(&self, __x: u128) -> u128 {
        (self
            .__sinhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanhl(&self, __x: u128) -> u128 {
        (self.tanhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanhl(&self, __x: u128) -> u128 {
        (self
            .__tanhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn acoshl(&self, __x: u128) -> u128 {
        (self.acoshl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acoshl(&self, __x: u128) -> u128 {
        (self
            .__acoshl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinhl(&self, __x: u128) -> u128 {
        (self.asinhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinhl(&self, __x: u128) -> u128 {
        (self
            .__asinhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanhl(&self, __x: u128) -> u128 {
        (self.atanhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanhl(&self, __x: u128) -> u128 {
        (self
            .__atanhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn expl(&self, __x: u128) -> u128 {
        (self.expl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expl(&self, __x: u128) -> u128 {
        (self.__expl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn frexpl(&self, __x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128 {
        (self.frexpl.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __frexpl(&self, __x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .__frexpl
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn ldexpl(&self, __x: u128, __exponent: ::std::os::raw::c_int) -> u128 {
        (self.ldexpl.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __ldexpl(&self, __x: u128, __exponent: ::std::os::raw::c_int) -> u128 {
        (self
            .__ldexpl
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn logl(&self, __x: u128) -> u128 {
        (self.logl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logl(&self, __x: u128) -> u128 {
        (self.__logl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log10l(&self, __x: u128) -> u128 {
        (self.log10l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log10l(&self, __x: u128) -> u128 {
        (self
            .__log10l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn modfl(&self, __x: u128, __iptr: *mut u128) -> u128 {
        (self.modfl.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn __modfl(&self, __x: u128, __iptr: *mut u128) -> u128 {
        (self
            .__modfl
            .as_ref()
            .expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn expm1l(&self, __x: u128) -> u128 {
        (self.expm1l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expm1l(&self, __x: u128) -> u128 {
        (self
            .__expm1l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log1pl(&self, __x: u128) -> u128 {
        (self.log1pl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log1pl(&self, __x: u128) -> u128 {
        (self
            .__log1pl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn logbl(&self, __x: u128) -> u128 {
        (self.logbl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logbl(&self, __x: u128) -> u128 {
        (self
            .__logbl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp2l(&self, __x: u128) -> u128 {
        (self.exp2l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp2l(&self, __x: u128) -> u128 {
        (self
            .__exp2l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log2l(&self, __x: u128) -> u128 {
        (self.log2l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log2l(&self, __x: u128) -> u128 {
        (self
            .__log2l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn powl(&self, __x: u128, __y: u128) -> u128 {
        (self.powl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __powl(&self, __x: u128, __y: u128) -> u128 {
        (self.__powl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn sqrtl(&self, __x: u128) -> u128 {
        (self.sqrtl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sqrtl(&self, __x: u128) -> u128 {
        (self
            .__sqrtl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn hypotl(&self, __x: u128, __y: u128) -> u128 {
        (self.hypotl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __hypotl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__hypotl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn cbrtl(&self, __x: u128) -> u128 {
        (self.cbrtl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cbrtl(&self, __x: u128) -> u128 {
        (self
            .__cbrtl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn ceill(&self, __x: u128) -> u128 {
        (self.ceill.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ceill(&self, __x: u128) -> u128 {
        (self
            .__ceill
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fabsl(&self, __x: u128) -> u128 {
        (self.fabsl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __fabsl(&self, __x: u128) -> u128 {
        (self
            .__fabsl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn floorl(&self, __x: u128) -> u128 {
        (self.floorl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __floorl(&self, __x: u128) -> u128 {
        (self
            .__floorl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fmodl(&self, __x: u128, __y: u128) -> u128 {
        (self.fmodl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmodl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fmodl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn isinfl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self.isinfl.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn finitel(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .finitel
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn dreml(&self, __x: u128, __y: u128) -> u128 {
        (self.dreml.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __dreml(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__dreml
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn significandl(&self, __x: u128) -> u128 {
        (self
            .significandl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __significandl(&self, __x: u128) -> u128 {
        (self
            .__significandl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn copysignl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .copysignl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __copysignl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__copysignl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nanl(&self, __tagb: *const ::std::os::raw::c_char) -> u128 {
        (self.nanl.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn __nanl(&self, __tagb: *const ::std::os::raw::c_char) -> u128 {
        (self.__nanl.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn isnanl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self.isnanl.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn j0l(&self, arg1: u128) -> u128 {
        (self.j0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j0l(&self, arg1: u128) -> u128 {
        (self.__j0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn j1l(&self, arg1: u128) -> u128 {
        (self.j1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j1l(&self, arg1: u128) -> u128 {
        (self.__j1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn jnl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.jnl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __jnl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.__jnl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn y0l(&self, arg1: u128) -> u128 {
        (self.y0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y0l(&self, arg1: u128) -> u128 {
        (self.__y0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn y1l(&self, arg1: u128) -> u128 {
        (self.y1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y1l(&self, arg1: u128) -> u128 {
        (self.__y1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ynl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.ynl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __ynl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.__ynl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn erfl(&self, arg1: u128) -> u128 {
        (self.erfl.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfl(&self, arg1: u128) -> u128 {
        (self.__erfl.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn erfcl(&self, arg1: u128) -> u128 {
        (self.erfcl.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfcl(&self, arg1: u128) -> u128 {
        (self
            .__erfcl
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammal(&self, arg1: u128) -> u128 {
        (self
            .lgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __lgammal(&self, arg1: u128) -> u128 {
        (self
            .__lgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tgammal(&self, arg1: u128) -> u128 {
        (self
            .tgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __tgammal(&self, arg1: u128) -> u128 {
        (self
            .__tgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gammal(&self, arg1: u128) -> u128 {
        (self.gammal.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __gammal(&self, arg1: u128) -> u128 {
        (self
            .__gammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammal_r(&self, arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .lgammal_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn __lgammal_r(&self, arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .__lgammal_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn rintl(&self, __x: u128) -> u128 {
        (self.rintl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __rintl(&self, __x: u128) -> u128 {
        (self
            .__rintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn nextafterl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .nextafterl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nextafterl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__nextafterl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nexttowardl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .nexttowardl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nexttowardl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__nexttowardl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn remainderl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .remainderl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __remainderl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__remainderl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn scalbnl(&self, __x: u128, __n: ::std::os::raw::c_int) -> u128 {
        (self
            .scalbnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbnl(&self, __x: u128, __n: ::std::os::raw::c_int) -> u128 {
        (self
            .__scalbnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn ilogbl(&self, __x: u128) -> ::std::os::raw::c_int {
        (self.ilogbl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ilogbl(&self, __x: u128) -> ::std::os::raw::c_int {
        (self
            .__ilogbl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn scalblnl(&self, __x: u128, __n: ::std::os::raw::c_long) -> u128 {
        (self
            .scalblnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalblnl(&self, __x: u128, __n: ::std::os::raw::c_long) -> u128 {
        (self
            .__scalblnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn nearbyintl(&self, __x: u128) -> u128 {
        (self
            .nearbyintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __nearbyintl(&self, __x: u128) -> u128 {
        (self
            .__nearbyintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn roundl(&self, __x: u128) -> u128 {
        (self.roundl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __roundl(&self, __x: u128) -> u128 {
        (self
            .__roundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn truncl(&self, __x: u128) -> u128 {
        (self.truncl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __truncl(&self, __x: u128) -> u128 {
        (self
            .__truncl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn remquol(&self, __x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .remquol
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn __remquol(
        &self,
        __x: u128,
        __y: u128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> u128 {
        (self
            .__remquol
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn lrintl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self.lrintl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lrintl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self
            .__lrintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llrintl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .llrintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llrintl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .__llrintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn lroundl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self
            .lroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lroundl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self
            .__lroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llroundl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .llroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llroundl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .__llroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fdiml(&self, __x: u128, __y: u128) -> u128 {
        (self.fdiml.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fdiml(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fdiml
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmaxl(&self, __x: u128, __y: u128) -> u128 {
        (self.fmaxl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmaxl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fmaxl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fminl(&self, __x: u128, __y: u128) -> u128 {
        (self.fminl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fminl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fminl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmal(&self, __x: u128, __y: u128, __z: u128) -> u128 {
        (self.fmal.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn __fmal(&self, __x: u128, __y: u128, __z: u128) -> u128 {
        (self.__fmal.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn scalbl(&self, __x: u128, __n: u128) -> u128 {
        (self.scalbl.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbl(&self, __x: u128, __n: u128) -> u128 {
        (self
            .__scalbl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn remove(
        &self,
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.remove.as_ref().expect("Expected function, got error."))(__filename)
    }
    pub unsafe fn rename(
        &self,
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.rename.as_ref().expect("Expected function, got error."))(__old, __new)
    }
    pub unsafe fn renameat(
        &self,
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .renameat
            .as_ref()
            .expect("Expected function, got error."))(__oldfd, __old, __newfd, __new)
    }
    pub unsafe fn fclose(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fclose.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn tmpfile(&self) -> *mut FILE {
        (self
            .tmpfile
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn tmpnam(&self, arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.tmpnam.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tmpnam_r(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            .tmpnam_r
            .as_ref()
            .expect("Expected function, got error."))(__s)
    }
    pub unsafe fn tempnam(
        &self,
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .tempnam
            .as_ref()
            .expect("Expected function, got error."))(__dir, __pfx)
    }
    pub unsafe fn fflush(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fflush.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fflush_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fflush_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fopen(
        &self,
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.fopen.as_ref().expect("Expected function, got error."))(__filename, __modes)
    }
    pub unsafe fn freopen(
        &self,
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE {
        (self
            .freopen
            .as_ref()
            .expect("Expected function, got error."))(__filename, __modes, __stream)
    }
    pub unsafe fn fdopen(
        &self,
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.fdopen.as_ref().expect("Expected function, got error."))(__fd, __modes)
    }
    pub unsafe fn fmemopen(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            .fmemopen
            .as_ref()
            .expect("Expected function, got error."))(__s, __len, __modes)
    }
    pub unsafe fn open_memstream(
        &self,
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE {
        (self
            .open_memstream
            .as_ref()
            .expect("Expected function, got error."))(__bufloc, __sizeloc)
    }
    pub unsafe fn setbuf(&self, __stream: *mut FILE, __buf: *mut ::std::os::raw::c_char) -> () {
        (self.setbuf.as_ref().expect("Expected function, got error."))(__stream, __buf)
    }
    pub unsafe fn setvbuf(
        &self,
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .setvbuf
            .as_ref()
            .expect("Expected function, got error."))(__stream, __buf, __modes, __n)
    }
    pub unsafe fn setbuffer(
        &self,
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> () {
        (self
            .setbuffer
            .as_ref()
            .expect("Expected function, got error."))(__stream, __buf, __size)
    }
    pub unsafe fn setlinebuf(&self, __stream: *mut FILE) -> () {
        (self
            .setlinebuf
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn vfprintf(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vfprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vprintf(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vprintf
            .as_ref()
            .expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vsnprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsnprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxlen, __format, __arg)
    }
    pub unsafe fn vdprintf(
        &self,
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vdprintf
            .as_ref()
            .expect("Expected function, got error."))(__fd, __fmt, __arg)
    }
    pub unsafe fn vfscanf(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vfscanf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vscanf(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self.vscanf.as_ref().expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsscanf(
        &self,
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsscanf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vfscanf1(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vfscanf1
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vscanf1(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vscanf1
            .as_ref()
            .expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsscanf1(
        &self,
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsscanf1
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn fgetc(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fgetc.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getc(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.getc.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getchar(&self) -> ::std::os::raw::c_int {
        (self
            .getchar
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getc_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .getc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getchar_unlocked(&self) -> ::std::os::raw::c_int {
        (self
            .getchar_unlocked
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn fgetc_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fgetc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fputc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.fputc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.putc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putchar(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .putchar
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn fputc_unlocked(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .fputc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putc_unlocked(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .putc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putchar_unlocked(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .putchar_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn getw(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.getw.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn putw(
        &self,
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.putw.as_ref().expect("Expected function, got error."))(__w, __stream)
    }
    pub unsafe fn fgets(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char {
        (self.fgets.as_ref().expect("Expected function, got error."))(__s, __n, __stream)
    }
    pub unsafe fn __getdelim(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .__getdelim
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __delimiter, __stream)
    }
    pub unsafe fn getdelim(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .getdelim
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __delimiter, __stream)
    }
    pub unsafe fn getline(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .getline
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __stream)
    }
    pub unsafe fn fputs(
        &self,
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.fputs.as_ref().expect("Expected function, got error."))(__s, __stream)
    }
    pub unsafe fn puts(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.puts.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn ungetc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.ungetc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn fread(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong {
        (self.fread.as_ref().expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fwrite(
        &self,
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong {
        (self.fwrite.as_ref().expect("Expected function, got error."))(__ptr, __size, __n, __s)
    }
    pub unsafe fn fread_unlocked(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t {
        (self
            .fread_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fwrite_unlocked(
        &self,
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t {
        (self
            .fwrite_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fseek(
        &self,
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.fseek.as_ref().expect("Expected function, got error."))(__stream, __off, __whence)
    }
    pub unsafe fn ftell(&self, __stream: *mut FILE) -> ::std::os::raw::c_long {
        (self.ftell.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn rewind(&self, __stream: *mut FILE) -> () {
        (self.rewind.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fseeko(
        &self,
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.fseeko.as_ref().expect("Expected function, got error."))(__stream, __off, __whence)
    }
    pub unsafe fn ftello(&self, __stream: *mut FILE) -> __off_t {
        (self.ftello.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fgetpos(&self, __stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int {
        (self
            .fgetpos
            .as_ref()
            .expect("Expected function, got error."))(__stream, __pos)
    }
    pub unsafe fn fsetpos(
        &self,
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int {
        (self
            .fsetpos
            .as_ref()
            .expect("Expected function, got error."))(__stream, __pos)
    }
    pub unsafe fn clearerr(&self, __stream: *mut FILE) -> () {
        (self
            .clearerr
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn feof(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.feof.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ferror(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.ferror.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn clearerr_unlocked(&self, __stream: *mut FILE) -> () {
        (self
            .clearerr_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn feof_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .feof_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ferror_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .ferror_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn perror(&self, __s: *const ::std::os::raw::c_char) -> () {
        (self.perror.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn fileno(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fileno.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fileno_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fileno_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn pclose(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.pclose.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn popen(
        &self,
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.popen.as_ref().expect("Expected function, got error."))(__command, __modes)
    }
    pub unsafe fn ctermid(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            .ctermid
            .as_ref()
            .expect("Expected function, got error."))(__s)
    }
    pub unsafe fn flockfile(&self, __stream: *mut FILE) -> () {
        (self
            .flockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ftrylockfile(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .ftrylockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn funlockfile(&self, __stream: *mut FILE) -> () {
        (self
            .funlockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn __uflow(&self, arg1: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .__uflow
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __overflow(
        &self,
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__overflow
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn select(
        &self,
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int {
        (self.select.as_ref().expect("Expected function, got error."))(
            __nfds,
            __readfds,
            __writefds,
            __exceptfds,
            __timeout,
        )
    }
    pub unsafe fn pselect(
        &self,
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pselect
            .as_ref()
            .expect("Expected function, got error."))(
            __nfds,
            __readfds,
            __writefds,
            __exceptfds,
            __timeout,
            __sigmask,
        )
    }
    pub unsafe fn access(
        &self,
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.access.as_ref().expect("Expected function, got error."))(__name, __type)
    }
    pub unsafe fn faccessat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .faccessat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __type, __flag)
    }
    pub unsafe fn lseek(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t {
        (self.lseek.as_ref().expect("Expected function, got error."))(__fd, __offset, __whence)
    }
    pub unsafe fn close(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.close.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn closefrom(&self, __lowfd: ::std::os::raw::c_int) -> () {
        (self
            .closefrom
            .as_ref()
            .expect("Expected function, got error."))(__lowfd)
    }
    pub unsafe fn read(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t {
        (self.read.as_ref().expect("Expected function, got error."))(__fd, __buf, __nbytes)
    }
    pub unsafe fn write(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t {
        (self.write.as_ref().expect("Expected function, got error."))(__fd, __buf, __n)
    }
    pub unsafe fn pread(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t {
        (self.pread.as_ref().expect("Expected function, got error."))(
            __fd, __buf, __nbytes, __offset,
        )
    }
    pub unsafe fn pwrite(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t {
        (self.pwrite.as_ref().expect("Expected function, got error."))(__fd, __buf, __n, __offset)
    }
    pub unsafe fn pipe(&self, __pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.pipe.as_ref().expect("Expected function, got error."))(__pipedes)
    }
    pub unsafe fn alarm(&self, __seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self.alarm.as_ref().expect("Expected function, got error."))(__seconds)
    }
    pub unsafe fn sleep(&self, __seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self.sleep.as_ref().expect("Expected function, got error."))(__seconds)
    }
    pub unsafe fn ualarm(&self, __value: __useconds_t, __interval: __useconds_t) -> __useconds_t {
        (self.ualarm.as_ref().expect("Expected function, got error."))(__value, __interval)
    }
    pub unsafe fn usleep(&self, __useconds: __useconds_t) -> ::std::os::raw::c_int {
        (self.usleep.as_ref().expect("Expected function, got error."))(__useconds)
    }
    pub unsafe fn pause(&self) -> ::std::os::raw::c_int {
        (self.pause.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn chown(
        &self,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.chown.as_ref().expect("Expected function, got error."))(__file, __owner, __group)
    }
    pub unsafe fn fchown(
        &self,
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.fchown.as_ref().expect("Expected function, got error."))(__fd, __owner, __group)
    }
    pub unsafe fn lchown(
        &self,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.lchown.as_ref().expect("Expected function, got error."))(__file, __owner, __group)
    }
    pub unsafe fn fchownat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fchownat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __owner, __group, __flag)
    }
    pub unsafe fn chdir(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.chdir.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn fchdir(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.fchdir.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn getcwd(
        &self,
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char {
        (self.getcwd.as_ref().expect("Expected function, got error."))(__buf, __size)
    }
    pub unsafe fn getwd(&self, __buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.getwd.as_ref().expect("Expected function, got error."))(__buf)
    }
    pub unsafe fn dup(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.dup.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn dup2(
        &self,
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.dup2.as_ref().expect("Expected function, got error."))(__fd, __fd2)
    }
    pub unsafe fn execve(
        &self,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execve.as_ref().expect("Expected function, got error."))(__path, __argv, __envp)
    }
    pub unsafe fn fexecve(
        &self,
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .fexecve
            .as_ref()
            .expect("Expected function, got error."))(__fd, __argv, __envp)
    }
    pub unsafe fn execv(
        &self,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execv.as_ref().expect("Expected function, got error."))(__path, __argv)
    }
    pub unsafe fn execvp(
        &self,
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execvp.as_ref().expect("Expected function, got error."))(__file, __argv)
    }
    pub unsafe fn nice(&self, __inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.nice.as_ref().expect("Expected function, got error."))(__inc)
    }
    pub unsafe fn _exit(&self, __status: ::std::os::raw::c_int) -> () {
        (self._exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn pathconf(
        &self,
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .pathconf
            .as_ref()
            .expect("Expected function, got error."))(__path, __name)
    }
    pub unsafe fn fpathconf(
        &self,
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .fpathconf
            .as_ref()
            .expect("Expected function, got error."))(__fd, __name)
    }
    pub unsafe fn sysconf(&self, __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long {
        (self
            .sysconf
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn confstr(
        &self,
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t {
        (self
            .confstr
            .as_ref()
            .expect("Expected function, got error."))(__name, __buf, __len)
    }
    pub unsafe fn getpid(&self) -> __pid_t {
        (self.getpid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getppid(&self) -> __pid_t {
        (self
            .getppid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getpgrp(&self) -> __pid_t {
        (self
            .getpgrp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __getpgid(&self, __pid: __pid_t) -> __pid_t {
        (self
            .__getpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn getpgid(&self, __pid: __pid_t) -> __pid_t {
        (self
            .getpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn setpgid(&self, __pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int {
        (self
            .setpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid, __pgid)
    }
    pub unsafe fn setpgrp(&self) -> ::std::os::raw::c_int {
        (self
            .setpgrp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setsid(&self) -> __pid_t {
        (self.setsid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getsid(&self, __pid: __pid_t) -> __pid_t {
        (self.getsid.as_ref().expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn getuid(&self) -> __uid_t {
        (self.getuid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn geteuid(&self) -> __uid_t {
        (self
            .geteuid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgid(&self) -> __gid_t {
        (self.getgid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getegid(&self) -> __gid_t {
        (self
            .getegid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgroups(
        &self,
        __size: ::std::os::raw::c_int,
        __list: *mut __gid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getgroups
            .as_ref()
            .expect("Expected function, got error."))(__size, __list)
    }
    pub unsafe fn setuid(&self, __uid: __uid_t) -> ::std::os::raw::c_int {
        (self.setuid.as_ref().expect("Expected function, got error."))(__uid)
    }
    pub unsafe fn setreuid(&self, __ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int {
        (self
            .setreuid
            .as_ref()
            .expect("Expected function, got error."))(__ruid, __euid)
    }
    pub unsafe fn seteuid(&self, __uid: __uid_t) -> ::std::os::raw::c_int {
        (self
            .seteuid
            .as_ref()
            .expect("Expected function, got error."))(__uid)
    }
    pub unsafe fn setgid(&self, __gid: __gid_t) -> ::std::os::raw::c_int {
        (self.setgid.as_ref().expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn setregid(&self, __rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int {
        (self
            .setregid
            .as_ref()
            .expect("Expected function, got error."))(__rgid, __egid)
    }
    pub unsafe fn setegid(&self, __gid: __gid_t) -> ::std::os::raw::c_int {
        (self
            .setegid
            .as_ref()
            .expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn fork(&self) -> __pid_t {
        (self.fork.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn vfork(&self) -> ::std::os::raw::c_int {
        (self.vfork.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn ttyname(&self, __fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .ttyname
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn ttyname_r(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ttyname_r
            .as_ref()
            .expect("Expected function, got error."))(__fd, __buf, __buflen)
    }
    pub unsafe fn isatty(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.isatty.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn ttyslot(&self) -> ::std::os::raw::c_int {
        (self
            .ttyslot
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn link(
        &self,
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.link.as_ref().expect("Expected function, got error."))(__from, __to)
    }
    pub unsafe fn linkat(
        &self,
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.linkat.as_ref().expect("Expected function, got error."))(
            __fromfd, __from, __tofd, __to, __flags,
        )
    }
    pub unsafe fn symlink(
        &self,
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .symlink
            .as_ref()
            .expect("Expected function, got error."))(__from, __to)
    }
    pub unsafe fn readlink(
        &self,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t {
        (self
            .readlink
            .as_ref()
            .expect("Expected function, got error."))(__path, __buf, __len)
    }
    pub unsafe fn symlinkat(
        &self,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .symlinkat
            .as_ref()
            .expect("Expected function, got error."))(__from, __tofd, __to)
    }
    pub unsafe fn readlinkat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t {
        (self
            .readlinkat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __buf, __len)
    }
    pub unsafe fn unlink(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.unlink.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn unlinkat(
        &self,
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .unlinkat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __name, __flag)
    }
    pub unsafe fn rmdir(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.rmdir.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn tcgetpgrp(&self, __fd: ::std::os::raw::c_int) -> __pid_t {
        (self
            .tcgetpgrp
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn tcsetpgrp(
        &self,
        __fd: ::std::os::raw::c_int,
        __pgrp_id: __pid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .tcsetpgrp
            .as_ref()
            .expect("Expected function, got error."))(__fd, __pgrp_id)
    }
    pub unsafe fn getlogin(&self) -> *mut ::std::os::raw::c_char {
        (self
            .getlogin
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getlogin_r(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getlogin_r
            .as_ref()
            .expect("Expected function, got error."))(__name, __name_len)
    }
    pub unsafe fn setlogin(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .setlogin
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getopt(
        &self,
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.getopt.as_ref().expect("Expected function, got error."))(
            ___argc,
            ___argv,
            __shortopts,
        )
    }
    pub unsafe fn gethostname(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn sethostname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .sethostname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn sethostid(&self, __id: ::std::os::raw::c_long) -> ::std::os::raw::c_int {
        (self
            .sethostid
            .as_ref()
            .expect("Expected function, got error."))(__id)
    }
    pub unsafe fn getdomainname(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getdomainname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn setdomainname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .setdomainname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn vhangup(&self) -> ::std::os::raw::c_int {
        (self
            .vhangup
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn revoke(&self, __file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.revoke.as_ref().expect("Expected function, got error."))(__file)
    }
    pub unsafe fn profil(
        &self,
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self.profil.as_ref().expect("Expected function, got error."))(
            __sample_buffer,
            __size,
            __offset,
            __scale,
        )
    }
    pub unsafe fn acct(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.acct.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getusershell(&self) -> *mut ::std::os::raw::c_char {
        (self
            .getusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn endusershell(&self) -> () {
        (self
            .endusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setusershell(&self) -> () {
        (self
            .setusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn daemon(
        &self,
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.daemon.as_ref().expect("Expected function, got error."))(__nochdir, __noclose)
    }
    pub unsafe fn chroot(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.chroot.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn getpass(
        &self,
        __prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .getpass
            .as_ref()
            .expect("Expected function, got error."))(__prompt)
    }
    pub unsafe fn fsync(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.fsync.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn gethostid(&self) -> ::std::os::raw::c_long {
        (self
            .gethostid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn sync(&self) -> () {
        (self.sync.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getpagesize(&self) -> ::std::os::raw::c_int {
        (self
            .getpagesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getdtablesize(&self) -> ::std::os::raw::c_int {
        (self
            .getdtablesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn truncate(
        &self,
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .truncate
            .as_ref()
            .expect("Expected function, got error."))(__file, __length)
    }
    pub unsafe fn ftruncate(
        &self,
        __fd: ::std::os::raw::c_int,
        __length: __off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ftruncate
            .as_ref()
            .expect("Expected function, got error."))(__fd, __length)
    }
    pub unsafe fn brk(&self, __addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int {
        (self.brk.as_ref().expect("Expected function, got error."))(__addr)
    }
    pub unsafe fn sbrk(&self, __delta: isize) -> *mut ::std::os::raw::c_void {
        (self.sbrk.as_ref().expect("Expected function, got error."))(__delta)
    }
    pub unsafe fn lockf(
        &self,
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int {
        (self.lockf.as_ref().expect("Expected function, got error."))(__fd, __cmd, __len)
    }
    pub unsafe fn fdatasync(&self, __fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .fdatasync
            .as_ref()
            .expect("Expected function, got error."))(__fildes)
    }
    pub unsafe fn crypt(
        &self,
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.crypt.as_ref().expect("Expected function, got error."))(__key, __salt)
    }
    pub unsafe fn getentropy(
        &self,
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getentropy
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __length)
    }
    pub unsafe fn __ctype_get_mb_cur_max(&self) -> size_t {
        (self
            .__ctype_get_mb_cur_max
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn atof(&self, __nptr: *const ::std::os::raw::c_char) -> f64 {
        (self.atof.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atoi(&self, __nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.atoi.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atol(&self, __nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.atol.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atoll(
        &self,
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong {
        (self.atoll.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn strtod(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self.strtod.as_ref().expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtof(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32 {
        (self.strtof.as_ref().expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtold(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128 {
        (self
            .strtold
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtol(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self.strtol.as_ref().expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoul(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strtoul
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoq(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self.strtoq.as_ref().expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtouq(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtouq
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoll(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            .strtoll
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoull(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtoull
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn l64a(&self, __n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char {
        (self.l64a.as_ref().expect("Expected function, got error."))(__n)
    }
    pub unsafe fn a64l(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.a64l.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn random(&self) -> ::std::os::raw::c_long {
        (self.random.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn srandom(&self, __seed: ::std::os::raw::c_uint) -> () {
        (self
            .srandom
            .as_ref()
            .expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn initstate(
        &self,
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .initstate
            .as_ref()
            .expect("Expected function, got error."))(__seed, __statebuf, __statelen)
    }
    pub unsafe fn setstate(
        &self,
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .setstate
            .as_ref()
            .expect("Expected function, got error."))(__statebuf)
    }
    pub unsafe fn random_r(
        &self,
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int {
        (self
            .random_r
            .as_ref()
            .expect("Expected function, got error."))(__buf, __result)
    }
    pub unsafe fn srandom_r(
        &self,
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .srandom_r
            .as_ref()
            .expect("Expected function, got error."))(__seed, __buf)
    }
    pub unsafe fn initstate_r(
        &self,
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .initstate_r
            .as_ref()
            .expect("Expected function, got error."))(__seed, __statebuf, __statelen, __buf)
    }
    pub unsafe fn setstate_r(
        &self,
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .setstate_r
            .as_ref()
            .expect("Expected function, got error."))(__statebuf, __buf)
    }
    pub unsafe fn rand(&self) -> ::std::os::raw::c_int {
        (self.rand.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn srand(&self, __seed: ::std::os::raw::c_uint) -> () {
        (self.srand.as_ref().expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn rand_r(&self, __seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self.rand_r.as_ref().expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn drand48(&self) -> f64 {
        (self
            .drand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn erand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> f64 {
        (self
            .erand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn lrand48(&self) -> ::std::os::raw::c_long {
        (self
            .lrand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn nrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        (self
            .nrand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn mrand48(&self) -> ::std::os::raw::c_long {
        (self
            .mrand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn jrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        (self
            .jrand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn srand48(&self, __seedval: ::std::os::raw::c_long) -> () {
        (self
            .srand48
            .as_ref()
            .expect("Expected function, got error."))(__seedval)
    }
    pub unsafe fn seed48(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort {
        (self.seed48.as_ref().expect("Expected function, got error."))(__seed16v)
    }
    pub unsafe fn lcong48(&self, __param: *mut ::std::os::raw::c_ushort) -> () {
        (self
            .lcong48
            .as_ref()
            .expect("Expected function, got error."))(__param)
    }
    pub unsafe fn drand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int {
        (self
            .drand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn erand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int {
        (self
            .erand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn lrand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .lrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn nrand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .nrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn mrand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .mrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn jrand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .jrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn srand48_r(
        &self,
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .srand48_r
            .as_ref()
            .expect("Expected function, got error."))(__seedval, __buffer)
    }
    pub unsafe fn seed48_r(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .seed48_r
            .as_ref()
            .expect("Expected function, got error."))(__seed16v, __buffer)
    }
    pub unsafe fn lcong48_r(
        &self,
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .lcong48_r
            .as_ref()
            .expect("Expected function, got error."))(__param, __buffer)
    }
    pub unsafe fn malloc(&self, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void {
        (self.malloc.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn calloc(
        &self,
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.calloc.as_ref().expect("Expected function, got error."))(__nmemb, __size)
    }
    pub unsafe fn realloc(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .realloc
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size)
    }
    pub unsafe fn free(&self, __ptr: *mut ::std::os::raw::c_void) -> () {
        (self.free.as_ref().expect("Expected function, got error."))(__ptr)
    }
    pub unsafe fn reallocarray(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .reallocarray
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __nmemb, __size)
    }
    pub unsafe fn alloca(&self, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void {
        (self.alloca.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn valloc(&self, __size: size_t) -> *mut ::std::os::raw::c_void {
        (self.valloc.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn posix_memalign(
        &self,
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_memalign
            .as_ref()
            .expect("Expected function, got error."))(__memptr, __alignment, __size)
    }
    pub unsafe fn aligned_alloc(
        &self,
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .aligned_alloc
            .as_ref()
            .expect("Expected function, got error."))(__alignment, __size)
    }
    pub unsafe fn abort(&self) -> () {
        (self.abort.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn atexit(
        &self,
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self.atexit.as_ref().expect("Expected function, got error."))(__func)
    }
    pub unsafe fn at_quick_exit(
        &self,
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .at_quick_exit
            .as_ref()
            .expect("Expected function, got error."))(__func)
    }
    pub unsafe fn on_exit(
        &self,
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .on_exit
            .as_ref()
            .expect("Expected function, got error."))(__func, __arg)
    }
    pub unsafe fn exit(&self, __status: ::std::os::raw::c_int) -> () {
        (self.exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn quick_exit(&self, __status: ::std::os::raw::c_int) -> () {
        (self
            .quick_exit
            .as_ref()
            .expect("Expected function, got error."))(__status)
    }
    pub unsafe fn _Exit(&self, __status: ::std::os::raw::c_int) -> () {
        (self._Exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn getenv(
        &self,
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.getenv.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn putenv(&self, __string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.putenv.as_ref().expect("Expected function, got error."))(__string)
    }
    pub unsafe fn setenv(
        &self,
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.setenv.as_ref().expect("Expected function, got error."))(__name, __value, __replace)
    }
    pub unsafe fn unsetenv(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .unsetenv
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn clearenv(&self) -> ::std::os::raw::c_int {
        (self
            .clearenv
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mktemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.mktemp.as_ref().expect("Expected function, got error."))(__template)
    }
    pub unsafe fn mkstemp(&self, __template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .mkstemp
            .as_ref()
            .expect("Expected function, got error."))(__template)
    }
    pub unsafe fn mkstemps(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mkstemps
            .as_ref()
            .expect("Expected function, got error."))(__template, __suffixlen)
    }
    pub unsafe fn mkdtemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .mkdtemp
            .as_ref()
            .expect("Expected function, got error."))(__template)
    }
    pub unsafe fn system(&self, __command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.system.as_ref().expect("Expected function, got error."))(__command)
    }
    pub unsafe fn realpath(
        &self,
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .realpath
            .as_ref()
            .expect("Expected function, got error."))(__name, __resolved)
    }
    pub unsafe fn bsearch(
        &self,
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .bsearch
            .as_ref()
            .expect("Expected function, got error."))(
            __key, __base, __nmemb, __size, __compar
        )
    }
    pub unsafe fn qsort(
        &self,
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> () {
        (self.qsort.as_ref().expect("Expected function, got error."))(
            __base, __nmemb, __size, __compar,
        )
    }
    pub unsafe fn abs(&self, __x: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.abs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn labs(&self, __x: ::std::os::raw::c_long) -> ::std::os::raw::c_long {
        (self.labs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llabs(&self, __x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong {
        (self.llabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn div(
        &self,
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> div_t {
        (self.div.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn ldiv(
        &self,
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t {
        (self.ldiv.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn lldiv(
        &self,
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t {
        (self.lldiv.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn ecvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.ecvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn fcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.fcvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn gcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.gcvt.as_ref().expect("Expected function, got error."))(__value, __ndigit, __buf)
    }
    pub unsafe fn qecvt(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.qecvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn qfcvt(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.qfcvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn qgcvt(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.qgcvt.as_ref().expect("Expected function, got error."))(__value, __ndigit, __buf)
    }
    pub unsafe fn ecvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self.ecvt_r.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn fcvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self.fcvt_r.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn qecvt_r(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .qecvt_r
            .as_ref()
            .expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn qfcvt_r(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .qfcvt_r
            .as_ref()
            .expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn mblen(
        &self,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        (self.mblen.as_ref().expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn mbtowc(
        &self,
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        (self.mbtowc.as_ref().expect("Expected function, got error."))(__pwc, __s, __n)
    }
    pub unsafe fn wctomb(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int {
        (self.wctomb.as_ref().expect("Expected function, got error."))(__s, __wchar)
    }
    pub unsafe fn mbstowcs(
        &self,
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t {
        (self
            .mbstowcs
            .as_ref()
            .expect("Expected function, got error."))(__pwcs, __s, __n)
    }
    pub unsafe fn wcstombs(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t {
        (self
            .wcstombs
            .as_ref()
            .expect("Expected function, got error."))(__s, __pwcs, __n)
    }
    pub unsafe fn rpmatch(
        &self,
        __response: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .rpmatch
            .as_ref()
            .expect("Expected function, got error."))(__response)
    }
    pub unsafe fn getsubopt(
        &self,
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .getsubopt
            .as_ref()
            .expect("Expected function, got error."))(__optionp, __tokens, __valuep)
    }
    pub unsafe fn getloadavg(
        &self,
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getloadavg
            .as_ref()
            .expect("Expected function, got error."))(__loadavg, __nelem)
    }
    pub unsafe fn memcpy(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memcpy.as_ref().expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn memmove(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memmove
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn memccpy(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memccpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __c, __n)
    }
    pub unsafe fn memset(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memset.as_ref().expect("Expected function, got error."))(__s, __c, __n)
    }
    pub unsafe fn memcmp(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self.memcmp.as_ref().expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn memchr(
        &self,
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memchr.as_ref().expect("Expected function, got error."))(__s, __c, __n)
    }
    pub unsafe fn strcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcpy.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn strncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcat(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcat.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn strncat(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncat
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.strcmp.as_ref().expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strncmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self
            .strncmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn strcoll(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strxfrm(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strxfrm
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcoll_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __l)
    }
    pub unsafe fn strxfrm_l(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t {
        (self
            .strxfrm_l
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n, __l)
    }
    pub unsafe fn strdup(&self, __s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.strdup.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn strndup(
        &self,
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strndup
            .as_ref()
            .expect("Expected function, got error."))(__string, __n)
    }
    pub unsafe fn strchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.strchr.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn strrchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strrchr
            .as_ref()
            .expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn strcspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strcspn
            .as_ref()
            .expect("Expected function, got error."))(__s, __reject)
    }
    pub unsafe fn strspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong {
        (self.strspn.as_ref().expect("Expected function, got error."))(__s, __accept)
    }
    pub unsafe fn strpbrk(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strpbrk
            .as_ref()
            .expect("Expected function, got error."))(__s, __accept)
    }
    pub unsafe fn strstr(
        &self,
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strstr.as_ref().expect("Expected function, got error."))(__haystack, __needle)
    }
    pub unsafe fn strtok(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strtok.as_ref().expect("Expected function, got error."))(__s, __delim)
    }
    pub unsafe fn __strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__strtok_r
            .as_ref()
            .expect("Expected function, got error."))(__s, __delim, __save_ptr)
    }
    pub unsafe fn strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strtok_r
            .as_ref()
            .expect("Expected function, got error."))(__s, __delim, __save_ptr)
    }
    pub unsafe fn strlen(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong {
        (self.strlen.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn strnlen(
        &self,
        __string: *const ::std::os::raw::c_char,
        __maxlen: size_t,
    ) -> size_t {
        (self
            .strnlen
            .as_ref()
            .expect("Expected function, got error."))(__string, __maxlen)
    }
    pub unsafe fn strerror(&self, __errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .strerror
            .as_ref()
            .expect("Expected function, got error."))(__errnum)
    }
    pub unsafe fn strerror_r(
        &self,
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strerror_r
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __buf, __buflen)
    }
    pub unsafe fn strerror_l(
        &self,
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strerror_l
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __l)
    }
    pub unsafe fn bcmp(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self.bcmp.as_ref().expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn bcopy(
        &self,
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    ) -> () {
        (self.bcopy.as_ref().expect("Expected function, got error."))(__src, __dest, __n)
    }
    pub unsafe fn bzero(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> () {
        (self.bzero.as_ref().expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn index(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.index.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn rindex(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.rindex.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn ffs(&self, __i: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ffs.as_ref().expect("Expected function, got error."))(__i)
    }
    pub unsafe fn ffsl(&self, __l: ::std::os::raw::c_long) -> ::std::os::raw::c_int {
        (self.ffsl.as_ref().expect("Expected function, got error."))(__l)
    }
    pub unsafe fn ffsll(&self, __ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int {
        (self.ffsll.as_ref().expect("Expected function, got error."))(__ll)
    }
    pub unsafe fn strcasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcasecmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strncasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self
            .strncasecmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn strcasecmp_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strcasecmp_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __loc)
    }
    pub unsafe fn strncasecmp_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strncasecmp_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n, __loc)
    }
    pub unsafe fn explicit_bzero(&self, __s: *mut ::std::os::raw::c_void, __n: size_t) -> () {
        (self
            .explicit_bzero
            .as_ref()
            .expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn strsep(
        &self,
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strsep.as_ref().expect("Expected function, got error."))(__stringp, __delim)
    }
    pub unsafe fn strsignal(&self, __sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .strsignal
            .as_ref()
            .expect("Expected function, got error."))(__sig)
    }
    pub unsafe fn __stpcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__stpcpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn stpcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.stpcpy.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn __stpncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__stpncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn stpncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .stpncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn __errno_location(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__errno_location
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __assert_fail(
        &self,
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> () {
        (self
            .__assert_fail
            .as_ref()
            .expect("Expected function, got error."))(
            __assertion, __file, __line, __function
        )
    }
    pub unsafe fn __assert_perror_fail(
        &self,
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> () {
        (self
            .__assert_perror_fail
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __file, __line, __function)
    }
    pub unsafe fn __assert(
        &self,
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> () {
        (self
            .__assert
            .as_ref()
            .expect("Expected function, got error."))(__assertion, __file, __line)
    }
    pub unsafe fn imaxabs(&self, __n: intmax_t) -> intmax_t {
        (self
            .imaxabs
            .as_ref()
            .expect("Expected function, got error."))(__n)
    }
    pub unsafe fn imaxdiv(&self, __numer: intmax_t, __denom: intmax_t) -> imaxdiv_t {
        (self
            .imaxdiv
            .as_ref()
            .expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn strtoimax(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t {
        (self
            .strtoimax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoumax(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t {
        (self
            .strtoumax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn wcstoimax(
        &self,
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t {
        (self
            .wcstoimax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn wcstoumax(
        &self,
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t {
        (self
            .wcstoumax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn hash_create(&self, size: ::std::os::raw::c_uint) -> hash_table_type {
        (self
            .hash_create
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn hash_insert(
        &self,
        table: *mut hash_table_type,
        key: const_string,
        value: const_string,
    ) -> () {
        (self
            .hash_insert
            .as_ref()
            .expect("Expected function, got error."))(table, key, value)
    }
    pub unsafe fn hash_remove(
        &self,
        table: *mut hash_table_type,
        key: const_string,
        value: const_string,
    ) -> () {
        (self
            .hash_remove
            .as_ref()
            .expect("Expected function, got error."))(table, key, value)
    }
    pub unsafe fn hash_lookup(
        &self,
        table: hash_table_type,
        key: const_string,
    ) -> *mut const_string {
        (self
            .hash_lookup
            .as_ref()
            .expect("Expected function, got error."))(table, key)
    }
    pub unsafe fn str_list_add(&self, l: *mut str_list_type, s: string) -> () {
        (self
            .str_list_add
            .as_ref()
            .expect("Expected function, got error."))(l, s)
    }
    pub unsafe fn cstr_list_add(&self, l: *mut cstr_list_type, s: const_string) -> () {
        (self
            .cstr_list_add
            .as_ref()
            .expect("Expected function, got error."))(l, s)
    }
    pub unsafe fn kpathsea_new(&self) -> kpathsea {
        (self
            .kpathsea_new
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn kpathsea_finish(&self, kpse: kpathsea) -> () {
        (self
            .kpathsea_finish
            .as_ref()
            .expect("Expected function, got error."))(kpse)
    }
    pub unsafe fn kpse_fopen_trace(
        &self,
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            .kpse_fopen_trace
            .as_ref()
            .expect("Expected function, got error."))(filename, mode)
    }
    pub unsafe fn kpse_fclose_trace(&self, arg1: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .kpse_fclose_trace
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn concat(&self, s1: const_string, s2: const_string) -> string {
        (self.concat.as_ref().expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn concat3(
        &self,
        arg1: const_string,
        arg2: const_string,
        arg3: const_string,
    ) -> string {
        (self
            .concat3
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn xstrdup(&self, s: const_string) -> string {
        (self
            .xstrdup
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn uppercasify(&self, s: const_string) -> string {
        (self
            .uppercasify
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn atou(&self, arg1: const_string) -> ::std::os::raw::c_uint {
        (self.atou.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn same_file_p(&self, filename1: const_string, filename2: const_string) -> boolean {
        (self
            .same_file_p
            .as_ref()
            .expect("Expected function, got error."))(filename1, filename2)
    }
    pub unsafe fn xbasename(&self, name: const_string) -> const_string {
        (self
            .xbasename
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn xdirname(&self, name: const_string) -> string {
        (self
            .xdirname
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn find_suffix(&self, name: const_string) -> const_string {
        (self
            .find_suffix
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn remove_suffix(&self, name: const_string) -> string {
        (self
            .remove_suffix
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn make_suffix(&self, s: const_string, suffix: const_string) -> string {
        (self
            .make_suffix
            .as_ref()
            .expect("Expected function, got error."))(s, suffix)
    }
    pub unsafe fn make_prefix(&self, stem_prefix: string, name: string) -> string {
        (self
            .make_prefix
            .as_ref()
            .expect("Expected function, got error."))(stem_prefix, name)
    }
    pub unsafe fn extend_filename(&self, name: const_string, suffix: const_string) -> const_string {
        (self
            .extend_filename
            .as_ref()
            .expect("Expected function, got error."))(name, suffix)
    }
    pub unsafe fn kpathsea_xputenv(
        &self,
        kpse: kpathsea,
        var: const_string,
        value: const_string,
    ) -> () {
        (self
            .kpathsea_xputenv
            .as_ref()
            .expect("Expected function, got error."))(kpse, var, value)
    }
    pub unsafe fn kpathsea_xputenv_int(
        &self,
        kpse: kpathsea,
        var: const_string,
        value: ::std::os::raw::c_int,
    ) -> () {
        (self
            .kpathsea_xputenv_int
            .as_ref()
            .expect("Expected function, got error."))(kpse, var, value)
    }
    pub unsafe fn xputenv(&self, var: const_string, value: const_string) -> () {
        (self
            .xputenv
            .as_ref()
            .expect("Expected function, got error."))(var, value)
    }
    pub unsafe fn xputenv_int(&self, var: const_string, value: ::std::os::raw::c_int) -> () {
        (self
            .xputenv_int
            .as_ref()
            .expect("Expected function, got error."))(var, value)
    }
    pub unsafe fn xgetcwd(&self) -> string {
        (self
            .xgetcwd
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn kpathsea_dir_p(&self, kpse: kpathsea, fn_: string) -> boolean {
        (self
            .kpathsea_dir_p
            .as_ref()
            .expect("Expected function, got error."))(kpse, fn_)
    }
    pub unsafe fn dir_p(&self, fn_: string) -> boolean {
        (self.dir_p.as_ref().expect("Expected function, got error."))(fn_)
    }
    pub unsafe fn dir_links(
        &self,
        fn_: const_string,
        nlinks: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .dir_links
            .as_ref()
            .expect("Expected function, got error."))(fn_, nlinks)
    }
    pub unsafe fn kpathsea_dir_links(
        &self,
        kpse: kpathsea,
        fn_: const_string,
        nlinks: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .kpathsea_dir_links
            .as_ref()
            .expect("Expected function, got error."))(kpse, fn_, nlinks)
    }
    pub unsafe fn xfopen(&self, filename: const_string, mode: const_string) -> *mut FILE {
        (self.xfopen.as_ref().expect("Expected function, got error."))(filename, mode)
    }
    pub unsafe fn xfclose(&self, fp: *mut FILE, filename: const_string) -> () {
        (self
            .xfclose
            .as_ref()
            .expect("Expected function, got error."))(fp, filename)
    }
    pub unsafe fn xfseek(
        &self,
        fp: *mut FILE,
        offset: ::std::os::raw::c_long,
        wherefrom: ::std::os::raw::c_int,
        filename: const_string,
    ) -> () {
        (self.xfseek.as_ref().expect("Expected function, got error."))(
            fp, offset, wherefrom, filename,
        )
    }
    pub unsafe fn xfseeko(
        &self,
        fp: *mut FILE,
        offset: off_t,
        wherefrom: ::std::os::raw::c_int,
        filename: const_string,
    ) -> () {
        (self
            .xfseeko
            .as_ref()
            .expect("Expected function, got error."))(fp, offset, wherefrom, filename)
    }
    pub unsafe fn xftell(&self, fp: *mut FILE, filename: const_string) -> ::std::os::raw::c_long {
        (self.xftell.as_ref().expect("Expected function, got error."))(fp, filename)
    }
    pub unsafe fn xftello(&self, fp: *mut FILE, filename: const_string) -> off_t {
        (self
            .xftello
            .as_ref()
            .expect("Expected function, got error."))(fp, filename)
    }
    pub unsafe fn xmalloc(&self, size: size_t) -> address {
        (self
            .xmalloc
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn xrealloc(&self, old_address: address, new_size: size_t) -> address {
        (self
            .xrealloc
            .as_ref()
            .expect("Expected function, got error."))(old_address, new_size)
    }
    pub unsafe fn xcalloc(&self, nelem: size_t, elsize: size_t) -> address {
        (self
            .xcalloc
            .as_ref()
            .expect("Expected function, got error."))(nelem, elsize)
    }
    pub unsafe fn kpathsea_selfdir(&self, kpse: kpathsea, argv0: const_string) -> string {
        (self
            .kpathsea_selfdir
            .as_ref()
            .expect("Expected function, got error."))(kpse, argv0)
    }
    pub unsafe fn kpathsea_set_program_name(
        &self,
        kpse: kpathsea,
        argv0: const_string,
        progname: const_string,
    ) -> () {
        (self
            .kpathsea_set_program_name
            .as_ref()
            .expect("Expected function, got error."))(kpse, argv0, progname)
    }
    pub unsafe fn kpse_selfdir(&self, argv0: const_string) -> string {
        (self
            .kpse_selfdir
            .as_ref()
            .expect("Expected function, got error."))(argv0)
    }
    pub unsafe fn kpse_set_program_name(&self, argv0: const_string, progname: const_string) -> () {
        (self
            .kpse_set_program_name
            .as_ref()
            .expect("Expected function, got error."))(argv0, progname)
    }
    pub unsafe fn kpse_program_basename(&self, argv0: const_string) -> string {
        (self
            .kpse_program_basename
            .as_ref()
            .expect("Expected function, got error."))(argv0)
    }
    pub unsafe fn kpathsea_absolute_p(
        &self,
        kpse: kpathsea,
        filename: const_string,
        relative_ok: boolean,
    ) -> boolean {
        (self
            .kpathsea_absolute_p
            .as_ref()
            .expect("Expected function, got error."))(kpse, filename, relative_ok)
    }
    pub unsafe fn kpse_absolute_p(&self, filename: const_string, relative_ok: boolean) -> boolean {
        (self
            .kpse_absolute_p
            .as_ref()
            .expect("Expected function, got error."))(filename, relative_ok)
    }
    pub unsafe fn opendir(&self, __name: *const ::std::os::raw::c_char) -> *mut DIR {
        (self
            .opendir
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn fdopendir(&self, __fd: ::std::os::raw::c_int) -> *mut DIR {
        (self
            .fdopendir
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn closedir(&self, __dirp: *mut DIR) -> ::std::os::raw::c_int {
        (self
            .closedir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn readdir(&self, __dirp: *mut DIR) -> *mut dirent {
        (self
            .readdir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn readdir_r(
        &self,
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int {
        (self
            .readdir_r
            .as_ref()
            .expect("Expected function, got error."))(__dirp, __entry, __result)
    }
    pub unsafe fn rewinddir(&self, __dirp: *mut DIR) -> () {
        (self
            .rewinddir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn seekdir(&self, __dirp: *mut DIR, __pos: ::std::os::raw::c_long) -> () {
        (self
            .seekdir
            .as_ref()
            .expect("Expected function, got error."))(__dirp, __pos)
    }
    pub unsafe fn telldir(&self, __dirp: *mut DIR) -> ::std::os::raw::c_long {
        (self
            .telldir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn dirfd(&self, __dirp: *mut DIR) -> ::std::os::raw::c_int {
        (self.dirfd.as_ref().expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn scandir(
        &self,
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int {
        (self
            .scandir
            .as_ref()
            .expect("Expected function, got error."))(__dir, __namelist, __selector, __cmp)
    }
    pub unsafe fn alphasort(
        &self,
        __e1: *mut *const dirent,
        __e2: *mut *const dirent,
    ) -> ::std::os::raw::c_int {
        (self
            .alphasort
            .as_ref()
            .expect("Expected function, got error."))(__e1, __e2)
    }
    pub unsafe fn getdirentries(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
        __basep: *mut __off_t,
    ) -> __ssize_t {
        (self
            .getdirentries
            .as_ref()
            .expect("Expected function, got error."))(__fd, __buf, __nbytes, __basep)
    }
    pub unsafe fn creat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: mode_t,
    ) -> ::std::os::raw::c_int {
        (self.creat.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn posix_fadvise(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_fadvise
            .as_ref()
            .expect("Expected function, got error."))(__fd, __offset, __len, __advise)
    }
    pub unsafe fn posix_fallocate(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_fallocate
            .as_ref()
            .expect("Expected function, got error."))(__fd, __offset, __len)
    }
    pub unsafe fn __ctype_b_loc(&self) -> *mut *const ::std::os::raw::c_ushort {
        (self
            .__ctype_b_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __ctype_tolower_loc(&self) -> *mut *const __int32_t {
        (self
            .__ctype_tolower_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __ctype_toupper_loc(&self) -> *mut *const __int32_t {
        (self
            .__ctype_toupper_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn isalnum(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isalnum
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isalpha(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isalpha
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn iscntrl(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .iscntrl
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isdigit(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isdigit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn islower(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .islower
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isgraph(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isgraph
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isprint(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isprint
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ispunct(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .ispunct
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isspace(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isspace
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isupper(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isupper
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isxdigit(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isxdigit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tolower(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .tolower
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn toupper(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .toupper
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn isblank(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isblank
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isascii(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isascii
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn toascii(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .toascii
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn _toupper(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._toupper
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _tolower(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._tolower
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isalnum_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isalnum_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isalpha_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isalpha_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn iscntrl_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .iscntrl_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isdigit_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isdigit_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn islower_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .islower_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isgraph_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isgraph_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isprint_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isprint_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn ispunct_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ispunct_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isspace_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isspace_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isupper_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isupper_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isxdigit_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isxdigit_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isblank_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isblank_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __tolower_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__tolower_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn tolower_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .tolower_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn __toupper_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__toupper_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn toupper_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .toupper_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn stat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self.stat.as_ref().expect("Expected function, got error."))(__file, __buf)
    }
    pub unsafe fn fstat(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self.fstat.as_ref().expect("Expected function, got error."))(__fd, __buf)
    }
    pub unsafe fn fstatat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fstatat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __buf, __flag)
    }
    pub unsafe fn lstat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self.lstat.as_ref().expect("Expected function, got error."))(__file, __buf)
    }
    pub unsafe fn chmod(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.chmod.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn lchmod(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.lchmod.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn fchmod(
        &self,
        __fd: ::std::os::raw::c_int,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.fchmod.as_ref().expect("Expected function, got error."))(__fd, __mode)
    }
    pub unsafe fn fchmodat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fchmodat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __mode, __flag)
    }
    pub unsafe fn umask(&self, __mask: __mode_t) -> __mode_t {
        (self.umask.as_ref().expect("Expected function, got error."))(__mask)
    }
    pub unsafe fn mkdir(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.mkdir.as_ref().expect("Expected function, got error."))(__path, __mode)
    }
    pub unsafe fn mkdirat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self
            .mkdirat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __mode)
    }
    pub unsafe fn mknod(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int {
        (self.mknod.as_ref().expect("Expected function, got error."))(__path, __mode, __dev)
    }
    pub unsafe fn mknodat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int {
        (self
            .mknodat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __mode, __dev)
    }
    pub unsafe fn mkfifo(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.mkfifo.as_ref().expect("Expected function, got error."))(__path, __mode)
    }
    pub unsafe fn mkfifoat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self
            .mkfifoat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __mode)
    }
    pub unsafe fn utimensat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utimensat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __times, __flags)
    }
    pub unsafe fn futimens(
        &self,
        __fd: ::std::os::raw::c_int,
        __times: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .futimens
            .as_ref()
            .expect("Expected function, got error."))(__fd, __times)
    }
    pub unsafe fn kpathsea_cnf_get(&self, kpse: kpathsea, var: const_string) -> const_string {
        (self
            .kpathsea_cnf_get
            .as_ref()
            .expect("Expected function, got error."))(kpse, var)
    }
    pub unsafe fn kpathsea_cnf_line_env_progname(&self, kpse: kpathsea, l: string) -> () {
        (self
            .kpathsea_cnf_line_env_progname
            .as_ref()
            .expect("Expected function, got error."))(kpse, l)
    }
    pub unsafe fn kpse_cnf_get(&self, var: const_string) -> const_string {
        (self
            .kpse_cnf_get
            .as_ref()
            .expect("Expected function, got error."))(var)
    }
    pub unsafe fn kpathsea_brace_expand(&self, kpse: kpathsea, path: const_string) -> string {
        (self
            .kpathsea_brace_expand
            .as_ref()
            .expect("Expected function, got error."))(kpse, path)
    }
    pub unsafe fn kpathsea_path_expand(&self, kpse: kpathsea, path: const_string) -> string {
        (self
            .kpathsea_path_expand
            .as_ref()
            .expect("Expected function, got error."))(kpse, path)
    }
    pub unsafe fn kpse_brace_expand(&self, path: const_string) -> string {
        (self
            .kpse_brace_expand
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn kpse_path_expand(&self, path: const_string) -> string {
        (self
            .kpse_path_expand
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn getopt_long(
        &self,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        shortopts: *const ::std::os::raw::c_char,
        longopts: *const option,
        longind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getopt_long
            .as_ref()
            .expect("Expected function, got error."))(
            argc, argv, shortopts, longopts, longind
        )
    }
    pub unsafe fn getopt_long_only(
        &self,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        shortopts: *const ::std::os::raw::c_char,
        longopts: *const option,
        longind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getopt_long_only
            .as_ref()
            .expect("Expected function, got error."))(
            argc, argv, shortopts, longopts, longind
        )
    }
    pub unsafe fn read_line(&self, f: *mut FILE) -> string {
        (self
            .read_line
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn kpathsea_magstep_fix(
        &self,
        kpse: kpathsea,
        dpi: ::std::os::raw::c_uint,
        bdpi: ::std::os::raw::c_uint,
        m_ret: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .kpathsea_magstep_fix
            .as_ref()
            .expect("Expected function, got error."))(kpse, dpi, bdpi, m_ret)
    }
    pub unsafe fn kpse_magstep_fix(
        &self,
        dpi: ::std::os::raw::c_uint,
        bdpi: ::std::os::raw::c_uint,
        m_ret: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .kpse_magstep_fix
            .as_ref()
            .expect("Expected function, got error."))(dpi, bdpi, m_ret)
    }
    pub unsafe fn kpathsea_path_search(
        &self,
        kpse: kpathsea,
        path: const_string,
        name: const_string,
        must_exist: boolean,
    ) -> string {
        (self
            .kpathsea_path_search
            .as_ref()
            .expect("Expected function, got error."))(kpse, path, name, must_exist)
    }
    pub unsafe fn kpathsea_all_path_search(
        &self,
        kpse: kpathsea,
        path: const_string,
        name: const_string,
    ) -> *mut string {
        (self
            .kpathsea_all_path_search
            .as_ref()
            .expect("Expected function, got error."))(kpse, path, name)
    }
    pub unsafe fn kpse_path_search(
        &self,
        path: const_string,
        name: const_string,
        must_exist: boolean,
    ) -> string {
        (self
            .kpse_path_search
            .as_ref()
            .expect("Expected function, got error."))(path, name, must_exist)
    }
    pub unsafe fn kpse_all_path_search(
        &self,
        path: const_string,
        name: const_string,
    ) -> *mut string {
        (self
            .kpse_all_path_search
            .as_ref()
            .expect("Expected function, got error."))(path, name)
    }
    pub unsafe fn kpathsea_init_prog(
        &self,
        kpse: kpathsea,
        prefix: const_string,
        dpi: ::std::os::raw::c_uint,
        mode: const_string,
        fallback: const_string,
    ) -> () {
        (self
            .kpathsea_init_prog
            .as_ref()
            .expect("Expected function, got error."))(kpse, prefix, dpi, mode, fallback)
    }
    pub unsafe fn kpse_init_prog(
        &self,
        prefix: const_string,
        dpi: ::std::os::raw::c_uint,
        mode: const_string,
        fallback: const_string,
    ) -> () {
        (self
            .kpse_init_prog
            .as_ref()
            .expect("Expected function, got error."))(prefix, dpi, mode, fallback)
    }
    pub unsafe fn kpathsea_readable_file(&self, kpse: kpathsea, name: string) -> string {
        (self
            .kpathsea_readable_file
            .as_ref()
            .expect("Expected function, got error."))(kpse, name)
    }
    pub unsafe fn kpse_readable_file(&self, name: string) -> string {
        (self
            .kpse_readable_file
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn kpathsea_set_program_enabled(
        &self,
        kpse: kpathsea,
        fmt: kpse_file_format_type,
        value: boolean,
        level: kpse_src_type,
    ) -> () {
        (self
            .kpathsea_set_program_enabled
            .as_ref()
            .expect("Expected function, got error."))(kpse, fmt, value, level)
    }
    pub unsafe fn kpathsea_maketex_option(
        &self,
        kpse: kpathsea,
        fmtname: const_string,
        value: boolean,
    ) -> () {
        (self
            .kpathsea_maketex_option
            .as_ref()
            .expect("Expected function, got error."))(kpse, fmtname, value)
    }
    pub unsafe fn kpathsea_init_format(
        &self,
        kpse: kpathsea,
        format: kpse_file_format_type,
    ) -> const_string {
        (self
            .kpathsea_init_format
            .as_ref()
            .expect("Expected function, got error."))(kpse, format)
    }
    pub unsafe fn kpathsea_init_format_return_varlist(
        &self,
        kpse: kpathsea,
        format: kpse_file_format_type,
    ) -> const_string {
        (self
            .kpathsea_init_format_return_varlist
            .as_ref()
            .expect("Expected function, got error."))(kpse, format)
    }
    pub unsafe fn kpathsea_find_file(
        &self,
        kpse: kpathsea,
        name: const_string,
        format: kpse_file_format_type,
        must_exist: boolean,
    ) -> string {
        (self
            .kpathsea_find_file
            .as_ref()
            .expect("Expected function, got error."))(kpse, name, format, must_exist)
    }
    pub unsafe fn kpathsea_find_file_generic(
        &self,
        kpse: kpathsea,
        name: const_string,
        format: kpse_file_format_type,
        must_exist: boolean,
        all: boolean,
    ) -> *mut string {
        (self
            .kpathsea_find_file_generic
            .as_ref()
            .expect("Expected function, got error."))(kpse, name, format, must_exist, all)
    }
    pub unsafe fn kpathsea_in_name_ok(&self, kpse: kpathsea, fname: const_string) -> boolean {
        (self
            .kpathsea_in_name_ok
            .as_ref()
            .expect("Expected function, got error."))(kpse, fname)
    }
    pub unsafe fn kpathsea_out_name_ok(&self, kpse: kpathsea, fname: const_string) -> boolean {
        (self
            .kpathsea_out_name_ok
            .as_ref()
            .expect("Expected function, got error."))(kpse, fname)
    }
    pub unsafe fn kpathsea_in_name_ok_silent(
        &self,
        kpse: kpathsea,
        fname: const_string,
    ) -> boolean {
        (self
            .kpathsea_in_name_ok_silent
            .as_ref()
            .expect("Expected function, got error."))(kpse, fname)
    }
    pub unsafe fn kpathsea_out_name_ok_silent(
        &self,
        kpse: kpathsea,
        fname: const_string,
    ) -> boolean {
        (self
            .kpathsea_out_name_ok_silent
            .as_ref()
            .expect("Expected function, got error."))(kpse, fname)
    }
    pub unsafe fn kpathsea_open_file(
        &self,
        kpse: kpathsea,
        name: const_string,
        format: kpse_file_format_type,
    ) -> *mut FILE {
        (self
            .kpathsea_open_file
            .as_ref()
            .expect("Expected function, got error."))(kpse, name, format)
    }
    pub unsafe fn kpathsea_reset_program_name(&self, kpse: kpathsea, progname: const_string) -> () {
        (self
            .kpathsea_reset_program_name
            .as_ref()
            .expect("Expected function, got error."))(kpse, progname)
    }
    pub unsafe fn kpse_init_fallback_resolutions(&self, envvar: string) -> () {
        (self
            .kpse_init_fallback_resolutions
            .as_ref()
            .expect("Expected function, got error."))(envvar)
    }
    pub unsafe fn kpse_set_program_enabled(
        &self,
        fmt: kpse_file_format_type,
        value: boolean,
        level: kpse_src_type,
    ) -> () {
        (self
            .kpse_set_program_enabled
            .as_ref()
            .expect("Expected function, got error."))(fmt, value, level)
    }
    pub unsafe fn kpse_maketex_option(&self, fmtname: const_string, value: boolean) -> () {
        (self
            .kpse_maketex_option
            .as_ref()
            .expect("Expected function, got error."))(fmtname, value)
    }
    pub unsafe fn kpse_init_format(&self, arg1: kpse_file_format_type) -> const_string {
        (self
            .kpse_init_format
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn kpse_find_file(
        &self,
        name: const_string,
        format: kpse_file_format_type,
        must_exist: boolean,
    ) -> string {
        (self
            .kpse_find_file
            .as_ref()
            .expect("Expected function, got error."))(name, format, must_exist)
    }
    pub unsafe fn kpse_find_file_generic(
        &self,
        name: const_string,
        format: kpse_file_format_type,
        must_exist: boolean,
        all: boolean,
    ) -> *mut string {
        (self
            .kpse_find_file_generic
            .as_ref()
            .expect("Expected function, got error."))(name, format, must_exist, all)
    }
    pub unsafe fn kpse_in_name_ok(&self, fname: const_string) -> boolean {
        (self
            .kpse_in_name_ok
            .as_ref()
            .expect("Expected function, got error."))(fname)
    }
    pub unsafe fn kpse_out_name_ok(&self, fname: const_string) -> boolean {
        (self
            .kpse_out_name_ok
            .as_ref()
            .expect("Expected function, got error."))(fname)
    }
    pub unsafe fn kpse_open_file(
        &self,
        arg1: const_string,
        arg2: kpse_file_format_type,
    ) -> *mut FILE {
        (self
            .kpse_open_file
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn kpse_reset_program_name(&self, progname: const_string) -> () {
        (self
            .kpse_reset_program_name
            .as_ref()
            .expect("Expected function, got error."))(progname)
    }
    pub unsafe fn kpathsea_find_glyph(
        &self,
        kpse: kpathsea,
        font_name: const_string,
        dpi: ::std::os::raw::c_uint,
        format: kpse_file_format_type,
        glyph_file: *mut kpse_glyph_file_type,
    ) -> string {
        (self
            .kpathsea_find_glyph
            .as_ref()
            .expect("Expected function, got error."))(
            kpse, font_name, dpi, format, glyph_file
        )
    }
    pub unsafe fn kpathsea_bitmap_tolerance(
        &self,
        kpse: kpathsea,
        dpi1: f64,
        dpi2: f64,
    ) -> boolean {
        (self
            .kpathsea_bitmap_tolerance
            .as_ref()
            .expect("Expected function, got error."))(kpse, dpi1, dpi2)
    }
    pub unsafe fn kpse_find_glyph(
        &self,
        font_name: const_string,
        dpi: ::std::os::raw::c_uint,
        format: kpse_file_format_type,
        glyph_file: *mut kpse_glyph_file_type,
    ) -> string {
        (self
            .kpse_find_glyph
            .as_ref()
            .expect("Expected function, got error."))(font_name, dpi, format, glyph_file)
    }
    pub unsafe fn kpse_bitmap_tolerance(&self, dpi1: f64, dpi2: f64) -> boolean {
        (self
            .kpse_bitmap_tolerance
            .as_ref()
            .expect("Expected function, got error."))(dpi1, dpi2)
    }
    pub unsafe fn kpathsea_tex_hush(&self, kpse: kpathsea, what: const_string) -> boolean {
        (self
            .kpathsea_tex_hush
            .as_ref()
            .expect("Expected function, got error."))(kpse, what)
    }
    pub unsafe fn kpse_tex_hush(&self, what: const_string) -> boolean {
        (self
            .kpse_tex_hush
            .as_ref()
            .expect("Expected function, got error."))(what)
    }
    pub unsafe fn kpathsea_make_tex(
        &self,
        kpse: kpathsea,
        format: kpse_file_format_type,
        base_file: const_string,
    ) -> string {
        (self
            .kpathsea_make_tex
            .as_ref()
            .expect("Expected function, got error."))(kpse, format, base_file)
    }
    pub unsafe fn kpse_make_tex(
        &self,
        format: kpse_file_format_type,
        base_file: const_string,
    ) -> string {
        (self
            .kpse_make_tex
            .as_ref()
            .expect("Expected function, got error."))(format, base_file)
    }
    pub unsafe fn kpathsea_var_value(&self, kpse: kpathsea, var: const_string) -> string {
        (self
            .kpathsea_var_value
            .as_ref()
            .expect("Expected function, got error."))(kpse, var)
    }
    pub unsafe fn kpathsea_var_expand(&self, kpse: kpathsea, src: const_string) -> string {
        (self
            .kpathsea_var_expand
            .as_ref()
            .expect("Expected function, got error."))(kpse, src)
    }
    pub unsafe fn kpse_var_value(&self, var: const_string) -> string {
        (self
            .kpse_var_value
            .as_ref()
            .expect("Expected function, got error."))(var)
    }
    pub unsafe fn kpse_var_expand(&self, src: const_string) -> string {
        (self
            .kpse_var_expand
            .as_ref()
            .expect("Expected function, got error."))(src)
    }
}

